-- phpMyAdmin SQL Dump
-- version 4.5.1
-- http://www.phpmyadmin.net
--
-- Servidor: 127.0.0.1
-- Tiempo de generación: 14-04-2016 a las 04:43:47
-- Versión del servidor: 10.1.9-MariaDB
-- Versión de PHP: 5.6.15

SET SQL_MODE = "NO_AUTO_VALUE_ON_ZERO";
SET time_zone = "+00:00";


/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8mb4 */;

--
-- Base de datos: `standart`
--

-- --------------------------------------------------------

--
-- Estructura de tabla para la tabla `acerca`
--

CREATE TABLE `acerca` (
  `id_acerca` int(11) NOT NULL,
  `acerca` text COLLATE utf8_spanish_ci NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_spanish_ci;

--
-- Volcado de datos para la tabla `acerca`
--

INSERT INTO `acerca` (`id_acerca`, `acerca`) VALUES
(0, '<h3 style="color:#da823d">Sobre nosotros</h3>\n\n<p>Somos un equipo de profesionales dedicados al mercado de bienes ra&iacute;ces de la Rep&uacute;blica Dominicana. Nuestra experiencia, seriedad y &eacute;tica nos ha permitido disponer de gran prestigio en todo el &aacute;mbito de la actividad inmobiliaria, garantiz&aacute;ndonos el acceso a selectos clientes, tales como&nbsp;embajadas, consulados y empresas transnacionales de primer nivel.</p>\n\n<p>Gracias a nuestra proactividad y dinamismo en todo lo referente a la compra, venta y alquiler de inmuebles en Rep&uacute;blica Dominicana y Estados Unidos, podemos ofrecer un especial y personalizado trato a nuestra clientela. Adem&aacute;s, contamos con una amplia cartera de propiedades, las cuales garantizan a nuestros clientes una&nbsp;inversi&oacute;n&nbsp;segura y de altos&nbsp;est&aacute;ndares&nbsp;de calidad.</p>\n\n<p>En adici&oacute;n a los&nbsp; servicios&nbsp; inmobiliarios,&nbsp;ofrecemos asesor&iacute;a en el &aacute;mbito legal y financiero, de modo que el cliente&nbsp;realice una inversi&oacute;n exitosa.&nbsp;</p>\n\n<h3 style="color:#da823d">Misi&oacute;n&nbsp;</h3>\n\n<p>Brindar un servicio de alta calidad, y garantizar que nuestros clientes tomen las mejores decisiones de inversi&oacute;n que haya en el mercado inmobiliario. &nbsp;</p>\n\n<h3 style="color:#da823d">Visi&oacute;n</h3>\n\n<p>Convertirnos en la empresa l&iacute;der del sector inmobiliario en Rep&uacute;blica Dominicana....</p>\n');

-- --------------------------------------------------------

--
-- Estructura de tabla para la tabla `baner`
--

CREATE TABLE `baner` (
  `id_baner` int(11) NOT NULL,
  `baner` varchar(255) COLLATE utf8_spanish_ci NOT NULL,
  `titulo` varchar(255) COLLATE utf8_spanish_ci NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_spanish_ci;

--
-- Volcado de datos para la tabla `baner`
--

INSERT INTO `baner` (`id_baner`, `baner`, `titulo`) VALUES
(168, 'imagenes/ps4white.jpg', 'Para todo tipo de necesidad'),
(170, 'imagenes/warrington.jpg', 'listos para instalar'),
(171, 'imagenes/google-plus.png', 'scala'),
(172, 'imagenes/nth-child-t2.jpg', 'nth-child');

-- --------------------------------------------------------

--
-- Estructura de tabla para la tabla `categoria`
--

CREATE TABLE `categoria` (
  `id` int(11) NOT NULL,
  `categoria` varchar(255) COLLATE utf8_spanish2_ci NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_spanish2_ci COMMENT='Categorias';

--
-- Volcado de datos para la tabla `categoria`
--

INSERT INTO `categoria` (`id`, `categoria`) VALUES
(1, 'Programacion'),
(2, 'Electronica'),
(3, 'Maquetacion'),
(4, 'Base de Datos'),
(5, 'Html'),
(6, 'Css'),
(7, 'python'),
(8, 'ruby'),
(9, 'javascript'),
(10, 'php'),
(11, 'Csharp'),
(12, 'visual basic'),
(13, 'lotes'),
(14, 'node js'),
(15, 'sql'),
(16, 'mysql'),
(17, 'hack'),
(18, 'mod');

-- --------------------------------------------------------

--
-- Estructura de tabla para la tabla `comentario`
--

CREATE TABLE `comentario` (
  `id` int(11) NOT NULL,
  `comentario` text COLLATE utf8_spanish2_ci NOT NULL,
  `autor` varchar(255) COLLATE utf8_spanish2_ci NOT NULL,
  `foto` varchar(255) COLLATE utf8_spanish2_ci NOT NULL,
  `publicado` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  `correo` varchar(255) COLLATE utf8_spanish2_ci NOT NULL,
  `categoria` varchar(255) COLLATE utf8_spanish2_ci NOT NULL,
  `id_contenido` int(11) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_spanish2_ci COMMENT='comentario';

--
-- Volcado de datos para la tabla `comentario`
--

INSERT INTO `comentario` (`id`, `comentario`, `autor`, `foto`, `publicado`, `correo`, `categoria`, `id_contenido`) VALUES
(1, 'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed blandit massa vel mauris sollicitudin dignissim. Phasellus ultrices tellus eget ipsum ornare molestie scelerisque eros dignissim. Phasellus fringilla hendrerit lectus nec vehicula. Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. In faucibus, risus eu volutpat pellentesque, massa felis feugiat velit, nec...', 'Alexander Brache', 'imagenes/kratos.png', '2014-05-09 14:07:27', '', 'programacion', 1),
(2, 'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed blandit massa vel mauris sollicitudin dignissim. Phasellus ultrices tellus eget ipsum ornare molestie scelerisque eros dignissim. Phasellus fringilla hendrerit lectus nec vehicula. Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. In faucibus, risus eu volutpat pellentesque, massa felis feugiat velit, nec...', 'Omegaweapon', 'imagenes/strider.png', '2014-05-09 14:07:40', '', 'programacion', 1),
(5, 'Control de noticias para hacer publicaciones diarias sobre eventos historia y toda clase de cosas relacionadas con la empresa y los intereses y veneficios para la sociedad', 'Alexander Brache', 'imagenes/strider.png', '2014-05-09 14:07:47', '', 'programacion', 2),
(6, 'dimelo como tu ta', 'alexander', 'imagenes/user2.jpg', '2014-05-09 14:07:52', 'brache', 'programacion', 2),
(7, 'Control de noticias para hacer publicaciones diarias sobre eventos historia y toda clase de cosas relacionadas con la empresa y los intereses y veneficios para la sociedadControl de noticias para hacer publicaciones diarias sobre eventos historia y toda clase de cosas relacionadas con la empresa y los intereses y veneficios para la sociedadControl de noticias para hacer publicaciones diarias sobre eventos historia y toda clase de cosas relacionadas con la empresa y los intereses y veneficios para la sociedad', 'alexander', 'imagenes/per.jpg', '2014-05-09 14:07:56', 'brache', 'programacion', 2),
(8, 'Control de noticias para hacer publicaciones diarias sobre eventos historia y toda clase de cosas relacionadas con la empresa y los intereses y veneficios para la sociedadControl de noticias para hacer publicaciones diarias sobre eventos historia y toda clase de cosas relacionadas con la empresa y los intereses y veneficios para la sociedadControl de noticias para hacer publicaciones diarias sobre eventos historia y toda clase de cosas relacionadas con la empresa y los intereses y veneficios para la sociedad', 'tetrastrider', 'imagenes/pers.jpg', '2014-05-09 14:08:01', 'brache', 'programacion', 2),
(9, 'Control de noticias para hacer publicaciones diarias sobre eventos historia y toda clase de cosas relacionadas con la empresa y los intereses y veneficios para la sociedadControl de noticias para hacer publicaciones diarias sobre eventos historia y toda clase de cosas relacionadas con la empresa y los intereses y veneficios para la sociedadControl de noticias para hacer publicaciones diarias sobre eventos historia y toda clase de cosas relacionadas con la empresa y los intereses y veneficios para la sociedad', 'tetrastrider', 'imagenes/pl.jpg', '2014-05-09 14:08:05', 'brache', 'programacion', 2),
(10, ' Alexander Brache\r\nControl de noticias para hacer publicaciones diarias sobre eventos historia y toda clase de cosas relacionadas con la empresa y los intereses y veneficios para la sociedad', 'omegaweapon', 'imagenes/pp.jpg', '2014-05-09 14:08:11', 'godmode', 'programacion', 2),
(11, 'multiquery por condicionmultiquery por condicionmultiquery por condicionmultiquery por condicionmultiquery por condicionmultiquery por condicionmultiquery por condicionmultiquery por condicionmultiquery por condicionmultiquery por condicionmultiquery por condicionmultiquery por condicionmultiquery por condicionmultiquery por condicionmultiquery por condicionmultiquery por condicionmultiquery por condicionmultiquery por condicionmultiquery por condicionmultiquery por condicion', 'tetrastrider', 'imagenes/ps.jpg', '2014-05-09 14:08:15', 'alexanderbrache@gmail.com', 'programacion', 1);

-- --------------------------------------------------------

--
-- Estructura de tabla para la tabla `links`
--

CREATE TABLE `links` (
  `id` int(11) NOT NULL,
  `nombre` varchar(255) NOT NULL,
  `link` varchar(255) NOT NULL,
  `notas` varchar(255) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Volcado de datos para la tabla `links`
--

INSERT INTO `links` (`id`, `nombre`, `link`, `notas`) VALUES
(1, 'hackinformer', 'http://hackinformer.com/', ''),
(2, 'wololo', 'http://wololo.net/', ''),
(3, 'yakaracolombia', 'http://www.yakaracolombia.com', ''),
(4, 'optimizilla', 'http://optimizilla.com/', ''),
(5, 'Best PHP Obfuscator', 'http://www.pipsomania.com/best_php_obfuscator.do', ''),
(6, 'Javascript Obfuscator\r\n', 'http://javascriptobfuscator.com/Javascript-Obfuscator.aspx', ''),
(7, 'HTML Color Picker', 'http://www.w3schools.com/tags/ref_colorpicker.asp?colorhex=%23444', ''),
(8, 'etnassoft', 'http://www.etnassoft.com/', ''),
(9, 'Font Awesome', 'http://fortawesome.github.io/Font-Awesome/icons/', '');

-- --------------------------------------------------------

--
-- Estructura de tabla para la tabla `noticias`
--

CREATE TABLE `noticias` (
  `id` int(11) NOT NULL,
  `titulo` varchar(255) COLLATE utf8_spanish2_ci NOT NULL,
  `foto` varchar(255) COLLATE utf8_spanish2_ci NOT NULL,
  `contenido` longtext COLLATE utf8_spanish2_ci NOT NULL,
  `user` varchar(255) COLLATE utf8_spanish2_ci NOT NULL,
  `categoria` varchar(255) COLLATE utf8_spanish2_ci NOT NULL,
  `visitas` int(11) NOT NULL,
  `id_comentario` int(11) NOT NULL,
  `publicado` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  `comentarios` int(11) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_spanish2_ci COMMENT='blog de noticias';

--
-- Volcado de datos para la tabla `noticias`
--

INSERT INTO `noticias` (`id`, `titulo`, `foto`, `contenido`, `user`, `categoria`, `visitas`, `id_comentario`, `publicado`, `comentarios`) VALUES
(1, 'xbox one blanco', 'imagenes/noticia.jpg', '<p>Camino del E3, los rumores en esta &eacute;poca del a&ntilde;o empiezan y se ir&aacute;n multiplicando en estos meses. Y el m&aacute;s reciente surgido a la vez en The Verge y los foros de NeoGAF habla de que Microsoft prepara una Xbox One edici&oacute;n Blanca -como la que entreg&oacute; al equipo creador-, con un disco duro de 1 Tera y, lo m&aacute;s llamativo, sin lector de discos y 100 d&oacute;lares m&aacute;s barata. Y poco ha tardado el analista de Wedbush Morgan -y figura medi&aacute;tica- Michael Pachter en dar su opini&oacute;n v&iacute;a una nota oficial, calificando de &quot;tonta&quot; la idea, en la que no cree: &quot;Si el rumor es verdadero, es una de las ideas m&aacute;s tontas de todos los tiempos&quot;, se&ntilde;ala Pachter, a&ntilde;adiendo que no ser&iacute;a bien visto por cadenas como GameStop y dem&aacute;s, adem&aacute;s de que &quot;Demostrar&iacute;a que Microsoft se puede permitir una Xbox One con disco de 1TB a 399$ con en esencia el mismo coste de producci&oacute;n que el modelo a 499$ con disco de 500GB y lector de Blu-ray&quot;. &quot;Eso provocar&iacute;a que los jugadores creyeran que el modelo con lector de Blu-ray tiene un precio demasiado alto, o provocar&iacute;a que pensaran que Microsoft es codiciosa. Tengo tres palabras para esta idea -tonta, tonta y tonta&quot;. El analista considera que Microsoft est&aacute; &quot;lejos de ser tonto&quot; y que respeta &quot;inmensamente&quot; a todo el personal de la compa&ntilde;&iacute;a, por lo que &quot;en realidad no me creo ese rumor&quot;....</p>\r\n\r\n<p>...</p>\r\n\r\n<p>...</p>\r\n\r\n<p>...</p>\r\n\r\n<p>...</p>\r\n\r\n<p>...</p>\r\n\r\n<p>...</p>\r\n\r\n<p>...</p>\r\n\r\n<p>...</p>\r\n\r\n<p>...</p>\r\n\r\n<p>...</p>\r\n\r\n<p>...</p>\r\n\r\n<p>...</p>\r\n\r\n<p>...</p>\r\n', 'alexander', 'Electronica', 136, 1, '2016-01-21 06:54:15', 3),
(2, 'Playstation 4 blanco', 'imagenes/ps4white.jpg', '<p>Camino del E3, los rumores en esta &eacute;poca del a&ntilde;o empiezan y se ir&aacute;n multiplicando en estos meses. Y el m&aacute;s reciente surgido a la vez en The Verge y los foros de NeoGAF habla de que Microsoft prepara una Xbox One edici&oacute;n Blanca -como la que entreg&oacute; al equipo creador-, con un disco duro de 1 Tera y, lo m&aacute;s llamativo, sin lector de discos y 100 d&oacute;lares m&aacute;s barata. Y poco ha tardado el analista de Wedbush Morgan -y figura medi&aacute;tica- Michael Pachter en dar su opini&oacute;n v&iacute;a una nota oficial, calificando de &quot;tonta&quot; la idea, en la que no cree: &quot;Si el rumor es verdadero, es una de las ideas m&aacute;s tontas de todos los tiempos&quot;, se&ntilde;ala Pachter, a&ntilde;adiendo que no ser&iacute;a bien visto por cadenas como GameStop y dem&aacute;s, adem&aacute;s de que &quot;Demostrar&iacute;a que Microsoft se puede permitir una Xbox One con disco de 1TB a 399$ con en esencia el mismo coste de producci&oacute;n que el modelo a 499$ con disco de 500GB y lector de Blu-ray&quot;. &quot;Eso provocar&iacute;a que los jugadores creyeran que el modelo con lector de Blu-ray tiene un precio demasiado alto, o provocar&iacute;a que pensaran que Microsoft es codiciosa. Tengo tres palabras para esta idea -tonta, tonta y tonta&quot;. El analista considera que Microsoft est&aacute; &quot;lejos de ser tonto&quot; y que respeta &quot;inmensamente&quot; a todo el personal de la compa&ntilde;&iacute;a, por lo que &quot;en realidad no me creo ese rumor&quot;....</p>\r\n\r\n<p>...</p>\r\n\r\n<p>...</p>\r\n\r\n<p>...</p>\r\n', 'alexander', 'Electronica', 255, 2, '2014-10-14 15:23:25', 6),
(12, 'chat online real time', 'imagenes/scr_0-604x535.jpg', '<p>Despu&eacute;s de un peque&ntilde;o descanso volvemos a las andadas. Esta vez voy a mostrar como crear un webchat en tiempo real.</p>\r\n\r\n<p>El problema de los webchat es que la inmensa mayor&iacute;a de los que existen se dedican a refrescar la p&aacute;gina de la charla cada X tiempo o cuando el usuario ha escrito un mensaje. Esto es debido a que el protocolo HTTP esta dise&ntilde;ado para que una vez recibido los datos cierre la conexi&oacute;n, y si queremos recuperar datos nuevos tenemos que hacer una nueva petici&oacute;n.</p>\r\n\r\n<p>Para lograr una interactividad y un realismo temporal cercanos al irc, messenger, etc. y seguir usando la web tenemos que usar un truco, y es crear una p&aacute;gina que nunca termine de ejecutarse. Quiz&aacute; os pregunteis que si nunca termina de ejecutarse, ent&oacute;nces no saldr&aacute; ning&uacute;n resultado, pues bi&eacute;n, podemos desactivar el buffer del php desde el principio o hacer un volcado continuo para que cada dato nuevo se vaya enviando al navegador del cliente. Los navegadores muestran el contenido seg&uacute;n les va llegando, por lo que una sentencia como esta (en pseudocodigo):</p>\r\n\r\n<p><strong>mientras verdadero<br />\r\nrecupera mensajes nuevos<br />\r\nmuestra mensajes nuevos<br />\r\nfin del mientras</strong></p>\r\n\r\n<p>har&iacute;a que cada vez que un mensaje nuevo apareciese se enviase al navegador y este lo mostrara instantaneamente, con lo que habr&iacute;amos conseguido que fuese el tiempo real.</p>\r\n\r\n<p>Parar lograr este planteamiento en php tenemos que seguir los siguientes pasos (he reducido su c&oacute;digo para simplificarlo):</p>\r\n\r\n<p><strong>ob_start();</strong></p>\r\n\r\n<p>Que activa el tratamiento del buffer en php</p>\r\n\r\n<p><strong>set_time_limit(0);</strong></p>\r\n\r\n<p>Indica al motor de php que el script nunca debe caducar a pesar de lo que dure.</p>\r\n\r\n<p><br />\r\n<strong>for(;;)<br />\r\n{</strong></p>\r\n\r\n<p>Este es el bucle que constantemente se va repitiendo.</p>\r\n\r\n<p><br />\r\n<strong>$rs=mysql_query(&ldquo;SELECT * FROM chat_mensajes WHERE IDMensaje&gt;&rsquo;&rdquo; . $id . &ldquo;&lsquo; AND WEEK(DatFecha,1)=WEEK(NOW(),1) AND YEAR(DatFecha)=YEAR(NOW()) ORDER BY IDMensaje&rdquo;)<br />\r\nor die (&ldquo;No se puede realizar la consulta&rdquo;);</strong></p>\r\n\r\n<p>En mi caso guardo los mensajes en una base de datos mysql, por lo que con la consulta SQL compruebo aquellos mensajes cuyo ID sea mayor que el &uacute;ltimo ID de mensaje que se ha mostrado (solo aquellos dentro de la semana actual del a&ntilde;o en curso).</p>\r\n\r\n<p><br />\r\n<strong>if(mysql_num_rows($rs)&gt;0)<br />\r\n{<br />\r\nwhile($fila=mysql_fetch_array($rs,MYSQL_ASSOC)) {</strong></p>\r\n\r\n<p>Compruebo si hay nuevos mensajes y los recorro.</p>\r\n\r\n<p><br />\r\n<strong>$id=$fila[&quot;IDMensaje&quot;];</strong></p>\r\n\r\n<p>Voy actualizando la variable&nbsp;<em>id</em>&nbsp;para que contenga al final el &uacute;ltimo ID y as&iacute; en la siguiente pasada del bucle solo recoger los &uacute;ltimos mensajes escritos a partir del indicado.</p>\r\n\r\n<p><br />\r\n<strong>echo &ldquo;&lt;div&gt;\n&rdquo;;<br />\r\necho &ldquo;&lt;span&gt;&rdquo; . $fila[&quot;DatFecha&quot;] . &rdquo; &rdquo; . &ldquo;&lt;/span&gt;&rdquo;;<br />\r\necho &ldquo;&lt;span&gt;&rdquo; . $fila[&quot;StrUsuario&quot;] . &ldquo;&amp;gt;&lt;/span&gt;&rdquo;;<br />\r\necho &ldquo;&lt;span&gt;&rdquo; . $fila[&quot;StrMensaje&quot;] . &ldquo;&lt;/span&gt;&rdquo;;<br />\r\necho &ldquo;&lt;/div&gt;\n&rdquo;;<br />\r\n}</strong></p>\r\n\r\n<p>Se va mostrando el contenido de los mensajes (fecha, remitente y mensaje).</p>\r\n\r\n<p><br />\r\n<strong>echo &ldquo;&lt;script&gt;scrollTo(0,999999999);&lt;/script&gt;\n&rdquo;;<br />\r\nob_flush();<br />\r\nflush();&nbsp;<br />\r\n}</strong></p>\r\n\r\n<p>Con un peque&ntilde;o truco en javascript logramos desplazar la ventana del navegador siempre hasta el final del contenido. A continuacu&oacute;n vaciamos el buffer hacia el navegador del cliente.</p>\r\n\r\n<p><br />\r\n<strong>sleep(1);<br />\r\n}</strong></p>\r\n\r\n<p>Para no recargar mucho el servidor mysql haciendo constantemente consultas, pausamos durante un segundo la ejecuci&oacute;n para despu&eacute;s continuar con la siguiente iteraci&oacute;n del bucle.</p>\r\n\r\n<p>Quiz&aacute; penseis que esta soluci&oacute;n recarga mucho el servidor (tanto el web como el de mysql), pero el impacto es m&iacute;nimo y si teneis un hosting esto os ahorrar&aacute; ancho de banda puesto que gasta m&aacute;s por usuario el estar haciendo peticiones al servidor web cada X tiempo que una sola petici&oacute;n que dure eternamente (solo gasta lo que envia, como una petici&oacute;n normal); en cuanto al servidor mysql si este esta en localhost (como el 99% de los hosting) el impacto es m&iacute;nimo porque no consume ning&uacute;n recurso de red, adem&aacute;s de que el propio mysql es rap&iacute;disimo y eficiente haciendo las consultas y no mermar&aacute; el rendimiento por estar haciendo una cada segundo por cada usuario. Sin embargo si no quereis usar mysql, podeis usar ficheros (<strong>fopen</strong>) o bi&eacute;n memoria compartida (<strong>Shmop</strong>). Por supuesto esto no es la panacea, pero para cosas peque&ntilde;as (20 personas a la vez) si puede ir bi&eacute;n tenerlo as&iacute; montado.</p>\r\n', 'alexander', 'Programacion', 19, 0, '2014-10-28 21:41:05', 0),
(14, 'window atajos', 'imagenes/windows.jpg', '<p>I&#39;ve always liked that Windows gives me multiple ways to perform popular tasks. Say you want to print something. You could go to the File menu and select the Print command, or you can press the Ctrl button and the letter P. Ctrl+P is just one example of a keyboard shortcut. Shortcuts combine two or more keys to do something special that neither key does alone.</p>\r\n\r\n<p>I prefer to use shortcuts whenever possible. It&rsquo;s kind of amazing how much time you can save by cutting out mouse clicks. Here are my top 20 shortcuts that you might not know about&mdash;but should.</p>\r\n\r\n<div class="article" style="color: rgb(69, 69, 69); font-family: WOL_Reg, ''Segoe UI'', Tahoma, Helvetica, sans-serif; font-size: 13px; line-height: 20px;">\r\n<div class="articleHeading" style="margin-bottom: 20px;">\r\n<h2>Get to know the basics</h2>\r\n</div>\r\n\r\n<div class="articleDesc">\r\n<div class="amlTextDesc">\r\n<p>There are certain shortcuts I use all day, every day. They work whether I&rsquo;m doing stuff with photos, music, documents, or spreadsheets.</p>\r\n</div>\r\n</div>\r\n</div>\r\n\r\n<div class="iList iListSquares iListNoDesc" style="margin-bottom: 25px; color: rgb(69, 69, 69); font-family: WOL_Reg, ''Segoe UI'', Tahoma, Helvetica, sans-serif; font-size: 13px; line-height: 20px;">\r\n<ul style="list-style-type:none; margin-left:0px">\r\n	<li>\r\n	<p><strong>Copy a selected item:</strong>&nbsp;Ctrl+C</p>\r\n	</li>\r\n	<li>\r\n	<p><strong>Cut a selected item:</strong>&nbsp;Ctrl+X</p>\r\n	</li>\r\n	<li>\r\n	<p><strong>Paste a selected item:</strong>&nbsp;Ctrl+V</p>\r\n	</li>\r\n	<li>\r\n	<p><strong>Undo an action:</strong>&nbsp;Ctrl+Z</p>\r\n	</li>\r\n	<li>\r\n	<p><strong>Redo that thing I just undid:</strong>&nbsp;Ctrl+Y</p>\r\n	</li>\r\n	<li>\r\n	<p><strong>Select everything:</strong>&nbsp;Ctrl+A</p>\r\n	</li>\r\n	<li>\r\n	<p><strong>Print:</strong>&nbsp;Ctrl+P</p>\r\n	</li>\r\n</ul>\r\n</div>\r\n\r\n<div class="article" style="color: rgb(69, 69, 69); font-family: WOL_Reg, ''Segoe UI'', Tahoma, Helvetica, sans-serif; font-size: 13px; line-height: 20px;">\r\n<div class="articleHeading" style="margin-bottom: 20px;">\r\n<h2>Manage open windows</h2>\r\n</div>\r\n\r\n<div class="articleDesc">\r\n<div class="amlTextDesc">\r\n<p>Chances are, you use your PC to do a lot of things at once. Shortcuts go a long way towards cutting the clutter. Go ahead and try these out as you read about them.</p>\r\n</div>\r\n</div>\r\n</div>\r\n\r\n<div class="iList iListSquares iListNoDesc" style="margin-bottom: 25px; color: rgb(69, 69, 69); font-family: WOL_Reg, ''Segoe UI'', Tahoma, Helvetica, sans-serif; font-size: 13px; line-height: 20px;">\r\n<ul style="list-style-type:none; margin-left:0px">\r\n	<li>\r\n	<p><strong>Switch between open windows</strong><br />\r\n	Alt+Tab</p>\r\n\r\n	<p>If you have lots of open windows and you&#39;re not sure exactly which one you need, press Alt+Tab, and get a quick thumbnail view of all open windows. Then, while holding down the Alt key, press the Tab key multiple times until you get to the window you want.</p>\r\n\r\n	<div class="para" style="margin-bottom: 8px;">\r\n	<p><img alt="Switching between windows" class="embedObject standalone" src="http://res2.windows.microsoft.com/resbox/en/windows%207/main/e1f1b6f5-e0d0-4b9d-82cd-21a2655be6f8_20.jpg" style="border:none; height:auto; max-width:100%" />Press Alt+Tab to switch between open windows</p>\r\n	</div>\r\n	</li>\r\n	<li>\r\n	<div class="para" style="margin-bottom: 8px;"><strong>Clear away everything and show the desktop</strong><br />\r\n	Windows logo key&nbsp;<img alt="Picture of the Windows logo key" class="embedObject" src="http://res2.windows.microsoft.com/resbox/en/windows%207/main/0c970446-1432-4ea7-b578-67cc2b5844ae_0.jpg" style="border:none; height:auto; max-width:100%" />+D</div>\r\n\r\n	<p>Use this shortcut when you want to minimize a lot of open windows at once to check something on your desktop. Clutter-to-clean with two fingers.</p>\r\n\r\n	<div class="para" style="margin-bottom: 8px;">\r\n	<p><img alt="A cluttered desktop" class="embedObject standalone" src="http://res1.windows.microsoft.com/resbox/en/windows%207/main/7effec4a-c180-4cc1-b840-7cddb70c9ca0_20.jpg" style="border:none; height:auto; max-width:100%" />A desktop before pressing Windows logo key+D</p>\r\n	</div>\r\n\r\n	<div class="para" style="margin-bottom: 8px;">\r\n	<p><img alt="A clean desktop" class="embedObject standalone" src="http://res1.windows.microsoft.com/resbox/en/windows%207/main/8a3d678f-25e4-4e63-9928-c1104439609a_21.jpg" style="border:none; height:auto; max-width:100%" />The same desktop after pressing Windows logo key+D</p>\r\n	</div>\r\n	</li>\r\n	<li>\r\n	<div class="para" style="margin-bottom: 8px;"><strong>Minimize the window</strong><br />\r\n	Windows logo key&nbsp;<img alt="Picture of the Windows logo key" class="embedObject" src="http://res2.windows.microsoft.com/resbox/en/windows%207/main/0c970446-1432-4ea7-b578-67cc2b5844ae_0.jpg" style="border:none; height:auto; max-width:100%" />+Down Arrow</div>\r\n\r\n	<p>Minimizing a window is a surefire way to see what&#39;s underneath it. And it&#39;s fast to use the shortcut. If the window is maximized already (covering the entire screen) it&#39;ll go to &ldquo;normal&rdquo; size. And if it&#39;s normal size, it&#39;ll minimize entirely.</p>\r\n	</li>\r\n	<li>\r\n	<div class="para" style="margin-bottom: 8px;"><strong>Maximize the window</strong><br />\r\n	Windows logo key&nbsp;<img alt="Picture of the Windows logo key" class="embedObject" src="http://res2.windows.microsoft.com/resbox/en/windows%207/main/0c970446-1432-4ea7-b578-67cc2b5844ae_0.jpg" style="border:none; height:auto; max-width:100%" />+Up Arrow</div>\r\n\r\n	<p>Maximizing windows works the same way.</p>\r\n	</li>\r\n</ul>\r\n</div>\r\n\r\n<div class="article" style="color: rgb(69, 69, 69); font-family: WOL_Reg, ''Segoe UI'', Tahoma, Helvetica, sans-serif; font-size: 13px; line-height: 20px;">\r\n<div class="articleHeading" style="margin-bottom: 20px;">\r\n<h2>Get even funkier with window management</h2>\r\n</div>\r\n\r\n<div class="articleDesc">\r\n<div class="amlTextDesc">\r\n<p>It might surprise you to learn that there are even more options when it comes to dealing with your open windows and programs&mdash;but there are.</p>\r\n</div>\r\n</div>\r\n</div>\r\n\r\n<div class="iList iListSquares iListNoDesc" style="margin-bottom: 25px; color: rgb(69, 69, 69); font-family: WOL_Reg, ''Segoe UI'', Tahoma, Helvetica, sans-serif; font-size: 13px; line-height: 20px;">\r\n<ul style="list-style-type:none; margin-left:0px">\r\n	<li>\r\n	<div class="para" style="margin-bottom: 8px;"><strong>Compare and contrast in a snap</strong><br />\r\n	Windows logo key&nbsp;<img alt="Picture of the Windows logo key" class="embedObject" src="http://res2.windows.microsoft.com/resbox/en/windows%207/main/0c970446-1432-4ea7-b578-67cc2b5844ae_0.jpg" style="border:none; height:auto; max-width:100%" />+Left Arrow or Right Arrow</div>\r\n\r\n	<p>Snap is the easiest way I know to compare two documents&mdash;or to write up something while also looking at a web browser. The shortcut for Snap makes it even snappier. Go ahead and try this now.</p>\r\n\r\n	<div class="para" style="margin-bottom: 8px;">While pressing the Windows logo key&nbsp;<img alt="Picture of the Windows logo key" class="embedObject" src="http://res2.windows.microsoft.com/resbox/en/windows%207/main/0c970446-1432-4ea7-b578-67cc2b5844ae_0.jpg" style="border:none; height:auto; max-width:100%" />, click the Right Arrow key or the Left Arrow key and your browser will slide over to one side. Select another window (such as a Word document) and use the shortcut only with the opposite arrow.</div>\r\n\r\n	<div class="para" style="margin-bottom: 8px;">\r\n	<p><img alt="Snap in Windows&nbsp;7" class="embedObject standalone" src="http://res1.windows.microsoft.com/resbox/en/windows%207/main/b1e1392e-e1b4-465a-a50a-39808a5e979b_20.jpg" style="border:none; height:auto; max-width:100%" />You can use a keyboard shortcut to view windows side-by-side with Snap</p>\r\n	</div>\r\n	</li>\r\n	<li>\r\n	<div class="para" style="margin-bottom: 8px;"><strong>Multitask with multiple monitors</strong><br />\r\n	Windows logo key&nbsp;<img alt="Picture of the Windows logo key" class="embedObject" src="http://res2.windows.microsoft.com/resbox/en/windows%207/main/0c970446-1432-4ea7-b578-67cc2b5844ae_0.jpg" style="border:none; height:auto; max-width:100%" />+Shift+Right Arrow or Left Arrow</div>\r\n\r\n	<p>Do you use more than one monitor at a time? Now you can shift an open window to your other monitor in less than a second.&nbsp;</p>\r\n	</li>\r\n</ul>\r\n</div>\r\n\r\n<div class="article" style="color: rgb(69, 69, 69); font-family: WOL_Reg, ''Segoe UI'', Tahoma, Helvetica, sans-serif; font-size: 13px; line-height: 20px;">\r\n<div class="articleHeading" style="margin-bottom: 20px;">\r\n<h2>Manage tasks</h2>\r\n</div>\r\n\r\n<div class="articleDesc">\r\n<div class="amlTextDesc">\r\n<p>You might already be using a shortcut&mdash;Ctrl+Alt+Delete&mdash;to open up Task Manager or to lock your computer. But there are shortcuts for this shortcut.</p>\r\n</div>\r\n</div>\r\n</div>\r\n\r\n<div class="iList iListSquares iListNoDesc" style="margin-bottom: 25px; color: rgb(69, 69, 69); font-family: WOL_Reg, ''Segoe UI'', Tahoma, Helvetica, sans-serif; font-size: 13px; line-height: 20px;">\r\n<ul style="list-style-type:none; margin-left:0px">\r\n	<li>\r\n	<p><strong>Open Task Manager&nbsp;</strong><br />\r\n	Ctrl+Shift+Esc</p>\r\n\r\n	<p>This simple shortcut whisks you straight to Task Manager&mdash;without any intermediary steps.</p>\r\n\r\n	<div class="para" style="margin-bottom: 8px;">\r\n	<p><img alt="Task Manager" class="embedObject standalone" src="http://res2.windows.microsoft.com/resbox/en/windows%207/main/3e3e5682-bae9-475a-bcc8-75a550db7ece_20.jpg" style="border:none; height:auto; max-width:100%" />Task Manager in Windows&nbsp;7</p>\r\n	</div>\r\n	</li>\r\n	<li>\r\n	<div class="para" style="margin-bottom: 8px;"><strong>Lock your PC or switch users</strong><br />\r\n	Windows logo key&nbsp;<img alt="Picture of the Windows logo key" class="embedObject" src="http://res2.windows.microsoft.com/resbox/en/windows%207/main/0c970446-1432-4ea7-b578-67cc2b5844ae_0.jpg" style="border:none; height:auto; max-width:100%" />+L</div>\r\n\r\n	<p>This shortcut locks your PC and instantly displays the login screen.&nbsp;</p>\r\n	</li>\r\n</ul>\r\n</div>\r\n\r\n<div class="article" style="color: rgb(69, 69, 69); font-family: WOL_Reg, ''Segoe UI'', Tahoma, Helvetica, sans-serif; font-size: 13px; line-height: 20px;">\r\n<div class="articleHeading" style="margin-bottom: 20px;">\r\n<h2>Display your way</h2>\r\n</div>\r\n\r\n<div class="articleDesc">\r\n<div class="amlTextDesc">\r\n<p>No matter how you want to view your PC, shortcuts help you get there faster.</p>\r\n</div>\r\n</div>\r\n</div>\r\n\r\n<div class="iList iListSquares iListNoDesc" style="margin-bottom: 25px; color: rgb(69, 69, 69); font-family: WOL_Reg, ''Segoe UI'', Tahoma, Helvetica, sans-serif; font-size: 13px; line-height: 20px;">\r\n<ul style="list-style-type:none; margin-left:0px">\r\n	<li>\r\n	<div class="para" style="margin-bottom: 8px;"><strong>Choose a presentation display mode</strong><br />\r\n	Windows logo key&nbsp;<img alt="Picture of the Windows logo key" class="embedObject" src="http://res2.windows.microsoft.com/resbox/en/windows%207/main/0c970446-1432-4ea7-b578-67cc2b5844ae_0.jpg" style="border:none; height:auto; max-width:100%" />+P</div>\r\n\r\n	<p>Whether you&#39;re giving a presentation or are using multiple monitors, it&#39;s simple to switch settings.</p>\r\n\r\n	<div class="para" style="margin-bottom: 8px;">\r\n	<p><img alt="Choosing a presentation display mode" class="embedObject standalone" src="http://res1.windows.microsoft.com/resbox/en/windows%207/main/e5ae24f9-5e00-43af-ad62-b098b3cd5284_21.jpg" style="border:none; height:auto; max-width:100%" />Choosing a presentation display mode</p>\r\n	</div>\r\n	</li>\r\n	<li>\r\n	<div class="para" style="margin-bottom: 8px;"><strong>Zoom in, zoom out</strong><br />\r\n	Windows logo key&nbsp;<img alt="Picture of the Windows logo key" class="embedObject" src="http://res2.windows.microsoft.com/resbox/en/windows%207/main/0c970446-1432-4ea7-b578-67cc2b5844ae_0.jpg" style="border:none; height:auto; max-width:100%" />+Plus Sign or Minus Sign</div>\r\n\r\n	<p>The Plus Sign key (+) zooms you in, the Minus Sign key (-) zooms you out. This lets you see small text on a webpage or to check out the pixels in a photo.</p>\r\n\r\n	<div class="para" style="margin-bottom: 8px;">\r\n	<p><img alt="Magnifier in Windows&nbsp;7" class="embedObject standalone" src="http://res1.windows.microsoft.com/resbox/en/windows%207/main/e3be0633-63bb-41cd-a5f7-a9b9843f5951_20.jpg" style="border:none; height:auto; max-width:100%" />You can use your keyboard to zoom in on a photo detail</p>\r\n	</div>\r\n	</li>\r\n</ul>\r\n</div>\r\n\r\n<div class="article" style="color: rgb(69, 69, 69); font-family: WOL_Reg, ''Segoe UI'', Tahoma, Helvetica, sans-serif; font-size: 13px; line-height: 20px;">\r\n<div class="articleHeading" style="margin-bottom: 20px;">\r\n<h2>A few last tricks</h2>\r\n</div>\r\n\r\n<div class="articleDesc">\r\n<div class="amlTextDesc">\r\n<p>Here are a few final shortcuts. For more keyboard shortcuts,&nbsp;<a class="navigationLink" href="http://windows.microsoft.com/is-is/windows7/keyboard-shortcuts" style="text-decoration: none; vertical-align: baseline; font-family: WOL_SB, ''Segoe UI Semibold'', ''Segoe UI'', Tahoma, Helvetica, sans-serif; font-weight: 600; color: rgb(0, 114, 198);">check out the complete list</a>.</p>\r\n</div>\r\n</div>\r\n</div>\r\n\r\n<div class="iList iListSquares iListNoDesc" style="margin-bottom: 25px; color: rgb(69, 69, 69); font-family: WOL_Reg, ''Segoe UI'', Tahoma, Helvetica, sans-serif; font-size: 13px; line-height: 20px;">\r\n<ul style="list-style-type:none; margin-left:0px">\r\n	<li>\r\n	<div class="para" style="margin-bottom: 8px;"><strong>Search for files and folders</strong><br />\r\n	Windows logo key&nbsp;<img alt="Picture of the Windows logo key" class="embedObject" src="http://res2.windows.microsoft.com/resbox/en/windows%207/main/0c970446-1432-4ea7-b578-67cc2b5844ae_0.jpg" style="border:none; height:auto; max-width:100%" />+F</div>\r\n\r\n	<p>In the past, finding a file could be like an archaeology expedition. But nowadays, search is really fast and thorough. Use this shortcut to get a search window, type in a few keywords, and presto, you&rsquo;ll get your file.</p>\r\n	</li>\r\n	<li>\r\n	<div class="para" style="margin-bottom: 8px;"><strong>Open a new instance of a program</strong><br />\r\n	Windows logo key&nbsp;<img alt="Picture of the Windows logo key" class="embedObject" src="http://res2.windows.microsoft.com/resbox/en/windows%207/main/0c970446-1432-4ea7-b578-67cc2b5844ae_0.jpg" style="border:none; height:auto; max-width:100%" />+Shift+Click a taskbar icon</div>\r\n\r\n	<p>I like Internet&nbsp;Explorer tabs&mdash;but sometimes I want a whole new browser window. To get one, I click the Internet&nbsp;Explorer icon while holding down Shift.</p>\r\n	</li>\r\n	<li>\r\n	<div class="para" style="margin-bottom: 8px;"><strong>And when you need it &hellip;get help</strong><br />\r\n	Windows logo key&nbsp;<img alt="Picture of the Windows logo key" class="embedObject" src="http://res2.windows.microsoft.com/resbox/en/windows%207/main/0c970446-1432-4ea7-b578-67cc2b5844ae_0.jpg" style="border:none; height:auto; max-width:100%" />+F1</div>\r\n\r\n	<p>It&#39;s the simplest shortcut out there. When all else fails, and you&#39;re just not sure what to do, press F1.</p>\r\n	</li>\r\n</ul>\r\n</div>\r\n', 'alexander', 'Programacion', 16, 0, '2014-10-14 15:21:58', 0),
(15, 'scala', 'imagenes/scala-welcome.png', '<P>The best way to learn Scala depends on what you know already and the way you prefer to learn things. There is a variety of resources available including books, tutorials, training courses, presentations, and of course the Scala compiler for practice. Many people find a good combination is to have one of the Scala books at hand and to start right away trying the examples with the Scala Compiler. On the other hand, you may want to get started with a Scala training course or using the material available online.\nAs your knowledge of Scala grows, you will find there is more advanced material and a very friendly Scala community at hand to help you. They all share a passion for Scala and welcome newcomers warmly. Many have written helpful material for programmers new to Scala, will respond to emails asking for help or are sharing neat new techniques, advanced concepts or tools in one of several Scala forums or personal blogs.</p>\n<h3>SCALA FOR PROGRAMMING BEGINNERS</h3><p>If you are just starting to learn how to code, you will find that a large portion of the material about Scala assumes that you already have some programming experience. There are two valuable resources which we can recommend to programming beginners that will take you directly into the world of Scala:\nThe online class Functional Programming Principles in Scala, available on coursera. Taught by the creator of Scala, Martin Odersky, this online class takes a somewhat academic approach to teach the fundamentals of functional programming. You will learn a lot of Scala by solving the programming assignments.\nKojo is an interactive learning environment that uses Scala programming to explore and play with math, art, music, animations and games.</p><h3>YOUR FIRST LINES OF CODE</h3><p>THE “HELLO, WORLD!” PROGRAM\nAs a first example, we use the standard “Hello, world” program to demonstrate the use of the Scala tools without knowing too much about the language.</p><pre><code>object HelloWorld {\ndef main(args: Array[String]) {\nprintln("Hello, world!")\n}\n}</code></pre><p>The structure of this program should be familiar to Java programmers: it consists of the method main which prints out a friendly greeting to the standard output.\nWe assume that both the Scala software and the user environment are set up correctly. For example:</p><pre><code>Environment	Variable	Value (example)\nUnix	$SCALA_HOME	/usr/local/share/scala\n 	$PATH	$PATH:$SCALA_HOME/bin\nWindows	%SCALA_HOME%	c:\\Progra~1\\Scala\n 	%PATH%	%PATH%;%SCALA_HOME%\\bin</code></pre>\n<h3>RUN IT INTERACTIVELY!</h3><p>The scala command starts an interactive shell where Scala expressions are interpreted interactively.</p><pre><code>> scala\nThis is a Scala shell.\nType in expressions to have them evaluated.\nType :help for more information.\n \nscala> object HelloWorld {\n| def main(args: Array[String]) {\n| println("Hello, world!")\n| }\n| }\ndefined module HelloWorld\n \nscala> HelloWorld.main(null)\nHello, world!\n \nscala>:q\n></code></pre><p>The shortcut :q stands for the internal shell command :quit used to exit the interpreter.</p><h3>COMPILE IT!</h3><p>The scalac command compiles one (or more) Scala source file(s) and generates Java bytecode which can be executed on any standard JVM. The Scala compiler works similarly to javac, the Java compiler of the Java SDK.</p><pre><code>> scalac HelloWorld.scala</code></pre><p>By default scalac generates the class files into the current working directory. You may specify a different output directory using the -d option.</p><pre><code>> scalac -d classes HelloWorld.scala</code></pre>\n<h3>EXECUTE IT!</h3><p>The scala command executes the generated bytecode with the appropriate options:</p><pre><code>> scala HelloWorld</code></pre><p>scala allows us to specify command options, such as the -classpath (alias -cp) option:</p><pre><code>> scala -cp classes HelloWorld</code></pre><p>The argument of the scala command has to be a top-level object. If that object extends trait App, then all statements contained in that object will be executed; otherwise you have to add a method main which will act as the entry point of your program.\nHere is how the “Hello, world” example looks like using the App trait:\n</p><pre><code>object HelloWorld extends App {\nprintln("Hello, world!")\n}</code></pre><h3>SCRIPT IT!</h3><p>We may also run our example as a shell script or batch command (see the examples in the man pages of the scala command).\nThe bash shell script script.sh containing the following Scala code (and shell preamble)</p><pre><code>#!/bin/sh\nexec scala "$0" "$@"\n!#\nobject HelloWorld extends App {\nprintln("Hello, world!")\n}\nHelloWorld.main(args)</code></pre><p>can be run directly from the command shell:</p><pre><code>> ./script.sh</code></pre><p>Note: We assume here that the file script.sh has execute access and the search path for the scala command is specified in the PATH environment variable.</p>', 'alexander', 'Programacion', 23, 0, '2014-05-09 12:32:23', 0),
(16, 'restful', 'imagenes/RestLiClientServerFlow.png', 'Sample database users table columns user_id, user_fullname, user_email, user_password and user_status.\n<pre><code>\nCREATE TABLE IF NOT EXISTS `users` \n(\n`user_id` int(11) NOT NULL AUTO_INCREMENT,\n`user_fullname` varchar(25) NOT NULL,\n`user_email` varchar(50) NOT NULL,\n`user_password` varchar(50) NOT NULL,\n`user_status` tinyint(1) NOT NULL DEFAULT ''0'',\nPRIMARY KEY (`user_id`)\n) ENGINE=InnoDB DEFAULT CHARSET=latin1 AUTO_INCREMENT=1 ;\n</code></pre>\n<h3>Rest API Class: api.php</h3>\nContains simple PHP code, here you have to modify database configuration details like database name, username and password.\n<pre><code> \n<?php\nrequire_once("Rest.inc.php");\n\nclass API extends REST \n{\npublic $data = "";\nconst DB_SERVER = "localhost";\nconst DB_USER = "Database_Username";\nconst DB_PASSWORD = "Database_Password";\nconst DB = "Database_Name";\n\nprivate $db = NULL;\n\npublic function __construct()\n{\nparent::__construct();// Init parent contructor\n$this->dbConnect();// Initiate Database connection\n}\n\n//Database connection\nprivate function dbConnect()\n{\n$this->db = mysql_connect(self::DB_SERVER,self::DB_USER,self::DB_PASSWORD);\nif($this->db)\nmysql_select_db(self::DB,$this->db);\n}\n\n//Public method for access api.\n//This method dynmically call the method based on the query string\npublic function processApi()\n{\n$func = strtolower(trim(str_replace("/","",$_REQUEST[''rquest''])));\nif((int)method_exists($this,$func) > 0)\n$this->$func();\nelse\n$this->response('''',404); \n// If the method not exist with in this class, response would be "Page not found".\n}\n\nprivate function login()\n{\n..............\n}\n\nprivate function users()\n{\n..............\n}\n\nprivate function deleteUser()\n{\n.............\n}\n\n//Encode array into JSON\nprivate function json($data)\n{\nif(is_array($data)){\nreturn json_encode($data);\n}\n}\n}\n\n// Initiiate Library\n$api = new API;\n$api->processApi();\n?>\n</code></pre>\n<h3>Login POST</h3>\n<p>Displaying users records from the users table Rest API URL http://localhost/rest/login/. This Restful API login status works with status codes if status code 200 login success else status code 204 shows fail message. For more status code information check Rest.inc.php in download script.</p>\n<pre><code>\nprivate function login()\n{\n// Cross validation if the request method is POST else it will return "Not Acceptable" status\nif($this->get_request_method() != "POST")\n{\n$this->response('''',406);\n}\n\n$email = $this->_request[''email''];  \n$password = $this->_request[''pwd''];\n\n// Input validations\nif(!empty($email) and !empty($password))\n{\nif(filter_var($email, FILTER_VALIDATE_EMAIL)){\n$sql = mysql_query("SELECT user_id, user_fullname, user_email FROM users WHERE user_email = ''$email'' AND user_password = ''".md5($password)."'' LIMIT 1", $this->db);\nif(mysql_num_rows($sql) > 0){\n$result = mysql_fetch_array($sql,MYSQL_ASSOC);\n\n// If success everythig is good send header as "OK" and user details\n$this->response($this->json($result), 200);\n}\n$this->response('''', 204); // If no records "No Content" status\n}\n}\n\n// If invalid inputs "Bad Request" status message and reason\n$error = array(''status'' => "Failed", "msg" => "Invalid Email address or Password");\n$this->response($this->json($error), 400);\n}\n\nUsers GET\nDisplaying users records from the users table Rest API URL http://localhost/rest/users/\nprivate function users()\n{ \n// Cross validation if the request method is GET else it will return "Not Acceptable" status\nif($this->get_request_method() != "GET")\n{\n$this->response('''',406);\n}\n$sql = mysql_query("SELECT user_id, user_fullname, user_email FROM users WHERE user_status = 1", $this->db);\nif(mysql_num_rows($sql) > 0)\n{\n$result = array();\nwhile($rlt = mysql_fetch_array($sql,MYSQL_ASSOC))\n{\n$result[] = $rlt;\n}\n// If success everythig is good send header as "OK" and return list of users in JSON format\n$this->response($this->json($result), 200);\n}\n$this->response('''',204); // If no records "No Content" status\n}\n\nDeleteUser\nDelete user function based on the user_id value deleting the particular record from the users table Rest API URL http://localhost/rest/deleteUser/\nprivate function deleteUser()\n{\n\nif($this->get_request_method() != "DELETE"){\n$this->response('''',406);\n}\n$id = (int)$this->_request[''id''];\nif($id > 0)\n{    \nmysql_query("DELETE FROM users WHERE user_id = $id");\n$success = array(''status'' => "Success", "msg" => "Successfully one record deleted.");\n$this->response($this->json($success),200);\n}\nelse\n{\n$this->response('''',204); // If no records "No Content" status\n}\n}\n</code></pre>\n<h3>Chrome Extention</h3>\n<p>A Extention for testing PHP restful API response download here Advanced REST client Application</p>\n\n<p>.htaccess code\nRewriting code for friendly URLs. In the download code you just modify htaccess.txt to .htaccess</p>\n<pre><code><IfModule mod_rewrite.c>\nRewriteEngine On\nRewriteCond %{REQUEST_FILENAME} !-d\nRewriteCond %{REQUEST_FILENAME} !-s\nRewriteRule ^(.*)$ api.php?rquest=$1 [QSA,NC,L]\n\nRewriteCond %{REQUEST_FILENAME} -d\nRewriteRule ^(.*)$ api.php [QSA,NC,L]\n\nRewriteCond %{REQUEST_FILENAME} -s\nRewriteRule ^(.*)$ api.php [QSA,NC,L] \n</IfModule></code></pre>', 'alexander', 'Programacion', 11, 0, '2014-04-26 00:14:26', 0);
INSERT INTO `noticias` (`id`, `titulo`, `foto`, `contenido`, `user`, `categoria`, `visitas`, `id_comentario`, `publicado`, `comentarios`) VALUES
(18, 'websocket', 'imagenes/events.jpg', '<p><img alt="url-breakdown" class="alignnone post-thumb size-full wp-image-2769" src="imagenes/url-breakdown.jpg" style="height:30px; width:369px" /></p>\n\n<pre>\n<code>\n//create a new WebSocket object.\nwebsocket = new WebSocket(&quot;ws://localhost:9000/daemon.php&quot;); \nwebsocket.onopen = function(evt) { /* do stuff */ }; //on open event\nwebsocket.onclose = function(evt) { /* do stuff */ }; //on close event\nwebsocket.onmessage = function(evt) { /* do stuff */ }; //on message event\nwebsocket.onerror = function(evt) { /* do stuff */ }; //on error event\nwebsocket.send(message); //send method\nwebsocket.close(); //close method\n</code></pre>\n\n<p>&nbsp;</p>\n\n<p><span style="color:#0000FF">.WebSocket(wsUri)</span>&nbsp;&mdash; creates a new WebSocket object.<br />\n<span style="color:#0000FF">.onopen</span>&nbsp;&mdash; Event occurs when connection is established.<br />\n<span style="color:#0000FF">.onclose</span>&nbsp;&mdash; Event occurs when connection is closed.<br />\n<span style="color:#0000FF">.onmessage</span>&nbsp;&mdash; Event occurs when client receives data from server.<br />\n<span style="color:#0000FF">.onerror</span>&nbsp;&mdash; Event occurs when there is an error.<br />\n<span style="color:#0000FF">.send(message)</span>&nbsp;&mdash; Transmits data to server using open connection.<br />\n<span style="color:#0000FF">.close()&nbsp;</span>&mdash; Terminates existing connection.</p>\n\n<pre>\n<code>\n$(document).ready(function(){\n    //Open a WebSocket connection.\n    var wsUri = &quot;ws://localhost:9000/daemon.php&quot;;   \n    websocket = new WebSocket(wsUri); \n    \n    //Connected to server\n    websocket.onopen = function(ev) {\n        alert(&#39;Connected to server &#39;);\n    }\n    \n    //Connection close\n    websocket.onclose = function(ev) { \n        alert(&#39;Disconnected&#39;);\n    };\n    \n    //Message Receved\n    websocket.onmessage = function(ev) { \n        alert(&#39;Message &#39;+ev.data);\n    };\n    \n    //Error\n    websocket.onerror = function(ev) { \n        alert(&#39;Error &#39;+ev.data);\n    };\n    \n     //Send a Message\n    $(&#39;#send&#39;).click(function(){ \n        var mymessage = &#39;This is a test message&#39;; \n        websocket.send(mymessage);\n    });\n});\n\n\n</code></pre>\n\n<p>&nbsp;</p>\n\n<h3>Chat Page</h3>\n\n<p>As explained in examples above, we start by creating a WebSocket object, attaching event handlers and then using websocket.send() method to send the data. Since we are sending a collection of chat values, such as user name, message, color etc, we&rsquo;ll convert our data to JSON format before sending to server.</p>\n\n<pre>\n\n&nbsp;</pre>\n\n<pre>\n<code>\n    $(document).ready(function(){\n    //create a new WebSocket object.\n    var wsUri = "ws://localhost:9000/daemon.php";   \n    websocket = new WebSocket(wsUri); \n    \n    websocket.onopen = function(ev) { // connection is open \n        $(''#message_box'').append("<div class=\\"system_msg\\">Connected!</div>"); //notify user\n    }\n\n    $(''#send-btn'').click(function(){ //use clicks message send button   \n        var mymessage = $(''#message'').val(); //get message text\n        var myname = $(''#name'').val(); //get user name\n        \n        if(myname == ""){ //empty name?\n            alert("Enter your Name please!");\n            return;\n        }\n        if(mymessage == ""){ //emtpy message?\n            alert("Enter Some message Please!");\n            return;\n        }\n        \n        //prepare json data\n        var msg = {\n        message: mymessage,\n        name: myname,\n        color : ''<?php echo $colours[$user_colour]; ?>''\n        };\n        //convert and send data to server\n        websocket.send(JSON.stringify(msg));\n    });\n    \n    //#### Message received from server?\n    websocket.onmessage = function(ev) {\n        var msg = JSON.parse(ev.data); //PHP sends Json data\n        var type = msg.type; //message type\n        var umsg = msg.message; //message text\n        var uname = msg.name; //user name\n        var ucolor = msg.color; //color\n\n        if(type == ''usermsg'') \n        {\n            $(''#message_box'').append("<div><span class=\\"user_name\\" style=\\"color:#"+ucolor+"\\">"+uname+"</span> : <span class=\\"user_message\\">"+umsg+"</span></div>");\n        }\n        if(type == ''system'')\n        {\n            $(''#message_box'').append("<div class=\\"system_msg\\">"+umsg+"</div>");\n        }\n        \n        $(''#message'').val(''''); //reset text\n    };\n    \n    websocket.onerror   = function(ev){$(''#message_box'').append("<div class=\\"system_error\\">Error Occurred - "+ev.data+"</div>");}; \n    websocket.onclose   = function(ev){$(''#message_box'').append("<div class=\\"system_msg\\">Connection Closed</div>");}; \n});\n</code></pre>\n\n<p>codigo de pagina chat html</p>\n\n<pre><code>&lt;div&nbsp;class=&quot;chat_wrapper&quot;&gt;\n&lt;div&nbsp;class=&quot;message_box&quot;&nbsp;id=&quot;message_box&quot;&gt;&lt;/div&gt;\n&lt;div&nbsp;class=&quot;panel&quot;&gt;\n&lt;input&nbsp;type=&quot;text&quot;&nbsp;name=&quot;name&quot;&nbsp;id=&quot;name&quot;&nbsp;placeholder=&quot;Your Name&quot;&nbsp;maxlength=&quot;10&quot;&nbsp;style=&quot;width:20%&quot;&nbsp;&nbsp;/&gt;\n&lt;input&nbsp;type=&quot;text&quot;&nbsp;name=&quot;message&quot;&nbsp;id=&quot;message&quot;&nbsp;placeholder=&quot;Message&quot;&nbsp;maxlength=&quot;80&quot;&nbsp;style=&quot;width:60%&quot;&nbsp;/&gt;\n&lt;button&nbsp;id=&quot;send-btn&quot;&gt;Send&lt;/button&gt;\n&lt;/div&gt;\n&lt;/div&gt;</code></pre>\n<h3>Chat Server using PHP Socket</h3>\n<p>k! Now we have our chat page ready to connect to server, but we also need to create a WebSocket server that runs permanently (no time-outs), performs WebSocket handshaking, send/receive data from chat page and handles multiple clients, for that we will create a daemon script in PHP. Everyone knows PHP is mostly used to create dynamic webpages, but most of us didn’t know that we can also create daemons (that run in the background) using nothing but PHP.</p>\n<h3>Install WebSocket Server</h3>\n<p>Install a local web server such as WAMP or XAMPP. I am using XAMPP server on Win-XP, it lets me use shell option to start my daemon script, I am not sure if WAMP has the same feature. If you want to implement it on your website, first check whether your host allows you to run daemon scripts and shell commands.<p>\n<img src="imagenes/xampp-shell.jpg" alt="Xampp Shell" width="459" height="106" class="post-thumb alignnone size-full wp-image-2790">\n<h3>PHP Socket Steps</h3>\n<p>We will be using PHP socket to create our WebSocket Chat server, Basically our PHP Chat server should do the following.</p>\n\n<p>Open a socket.<br />\nBind to a address.<br />\nListen incoming connections.<br />\nAccept connections.<br />\nWebSocket Handshake.<br />\nUnmask/Encode data frames.</p>\n<h3>Open a socket:</h3>\n<p>First we create a socket with PHP socket_create(Domain, Type, Protocol) like this:</p>\n<pre><code>//Create TCP/IP sream socket and return the socket resource\n$socket = socket_create(AF_INET, SOCK_STREAM, SOL_TCP);</code></pre>\n<h3>Bind to a address:</h3>\n<p>Bind the name to the socket, this has to be done before a connection is established using socket_connect() or socket_listen().</p>\n<pre><code>// Bind the source address\nsocket_bind($socket, ''localhost'');</code></pre>\n<h3>Listen incoming connections:</h3>\n<p>Once the socket is created, we want our server to listen to incoming connection on that socket.</p>\n<pre><code>// Listen to incoming connection\nsocket_listen($socket);</code></pre>\n<h3>Accept connections:</h3>\n<p>This function will accept incoming connections.</p>\n<pre><code>// Accept new connections\nsocket_accept($socket);</code></pre>\n<h3>Handshake:</h3>\n<p>Client has to introduce itself by sending a <b>WebSocket handshake</b> request to establish a successful connection with server, a handshake request contains a <b>Sec-WebSocket-Key</b> a base64 encoded randomly generated 16-byte value. And the server reads the key, attaches magic string “258EAFA5-E914-47DA-95CA-C5AB0DC85B11″, hash key with SHA1, returns the key in <b>Sec-WebSocket-Accept</b> encoded with base64.</p>\n<img src="imagenes/websocket-handshake-header.jpg" alt="websocket-handshake-header" width="417" height="260" class="post-thumb alignnone size-full wp-image-2795">\n<h3>Handshake response with PHP :</h3>\n<pre><code>$secKey = $headers[''Sec-WebSocket-Key''];\n$secAccept = base64_encode(pack(''H*'', sha1($secKey . ''258EAFA5-E914-47DA-95CA-C5AB0DC85B11'')));\n$upgrade  = "HTTP/1.1 101 Web Socket Protocol Handshake\\r\\n" .\n"Upgrade: websocket\\r\\n" .\n"Connection: Upgrade\\r\\n" .\n"WebSocket-Origin: $host\\r\\n" .\n"WebSocket-Location: ws://$host:$port/deamon.php\\r\\n".\n"Sec-WebSocket-Accept:$secAccept\\r\\n\\r\\n";\nsocket_write($client_conn,$upgrade,strlen($upgrade));</code></pre>\n<h3>Unmasking/Encoding data frames.</h3>\n<p>After the handshaking, client can now send and receive messages, but the messages sent are all encrypted, so if we want to display them, each data frame needs to be unmasked as described here</p>\n\n<h3>Starting Chat Server</h3>\n<p>It’s time to download the sample files by clicking download button below, you should find 2 PHP files, index.php and server.php. Using your Shell command-line interface in XAMPP, start WebSocket chat server by typing :</p>\n<pre><code>php -q c:\\path-to-server\\server.php</code></pre>\n<h3>codigo completo del servidor</h3>\n<pre><code>\n$conect=mysqli_connect(&quot;127.0.0.1&quot;,&quot;root&quot;,&quot;&quot;,&quot;tienda&quot;);<br />\n$host = &#39;localhost&#39;; //host<br />\n$port = &#39;8081&#39;; //port<br />\n$null = NULL; //null var<br />\n$socket = socket_create(AF_INET, SOCK_STREAM, SOL_TCP);//Create TCP/IP sream socket<br />\nsocket_set_option($socket, SOL_SOCKET, SO_REUSEADDR, 1);//reuseable port<br />\nsocket_bind($socket, 0, $port);//bind socket to specified host<br />\nsocket_listen($socket);//listen to port<br />\n$clients = array($socket);//create &amp; add listning socket to the list<br />\n//start endless loop, so that our script doesn&#39;t stop<br />\nwhile (true) {<br />\n&nbsp;&nbsp; &nbsp;<br />\n&nbsp;&nbsp; &nbsp;$changed = $clients;//manage multipal connections<br />\n&nbsp;&nbsp; &nbsp;socket_select($changed, $null, $null, 0, 10);//returns the socket resources in $changed array<br />\n&nbsp;&nbsp; &nbsp;$todos=(sizeof($clients)-1);<br />\n&nbsp;&nbsp; &nbsp;//check for new socket<br />\n&nbsp;&nbsp; &nbsp;if (in_array($socket, $changed)) {<br />\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;$socket_new = socket_accept($socket); //accpet new socket<br />\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;$clients[] = $socket_new; //add socket to client array<br />\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;$header = socket_read($socket_new, 1024); //read data sent by the socket<br />\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;apreton($header, $socket_new, $host, $port); //perform websocket handshake<br />\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;socket_getpeername($socket_new, $ip,$puerto); //get ip address of connected socket<br />\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;$query = mysqli_query($conect,&quot;SELECT * FROM chat ORDER BY id ASC&quot;);<br />\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;while($data=mysqli_fetch_assoc($query)){<br />\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;$user_name = $data[&quot;user_name&quot;];<br />\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;$user_message = $data[&quot;user_message&quot;];<br />\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;$user_color = $data[&quot;user_color&quot;];<br />\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;$publicado = $data[&quot;publicado&quot;];<br />\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;$response = mask(json_encode(array(&#39;type&#39;=&gt;&#39;usermsg&#39;, &#39;name&#39;=&gt;$user_name, &#39;message&#39;=&gt;$user_message, &#39;color&#39;=&gt;$user_color,&#39;clientes&#39;=&gt;$todos,&#39;publicado&#39;=&gt;$publicado))); //prepare json data<br />\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;enviar($response); //notify all users about new connection<br />\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;}<br />\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;//make room for new socket<br />\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;$found_socket = array_search($socket, $changed);<br />\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;unset($changed[$found_socket]);<br />\n&nbsp;&nbsp; &nbsp;}<br />\n&nbsp;&nbsp; &nbsp;//loop through all connected sockets<br />\n&nbsp;&nbsp; &nbsp;foreach ($changed as $changed_socket) {&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;<br />\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;//check for any incomming data<br />\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;while(socket_recv($changed_socket, $buf, 1024, 0) &gt;= 1)<br />\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;{<br />\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;$received_text = unmask($buf); //unmask data<br />\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;$tst_msg = json_decode($received_text); //json decode&nbsp;<br />\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;$user_name = $tst_msg-&gt;name; //sender name<br />\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;$user_message = $tst_msg-&gt;message; //message text<br />\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;$user_color = $tst_msg-&gt;color; //color<br />\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;$publicado = $tst_msg-&gt;publicado;<br />\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;if($user_name!=&quot;&quot;){<br />\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;$query = mysqli_query($conect,&quot;INSERT INTO chat (user_name,user_message,user_color,publicado) VALUES (&#39;$user_name&#39;,&#39;$user_message&#39;,&#39;$user_color&#39;,&#39;$publicado&#39;)&quot;);<br />\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;}<br />\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;//prepare data to be sent to client<br />\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;$response_text = mask(json_encode(array(&#39;type&#39;=&gt;&#39;usermsg&#39;, &#39;name&#39;=&gt;$user_name, &#39;message&#39;=&gt;$user_message, &#39;color&#39;=&gt;$user_color,&#39;clientes&#39;=&gt;$todos,&#39;publicado&#39;=&gt;$publicado)));<br />\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;enviar($response_text); //send data<br />\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;break 2; //exist this loop<br />\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;}<br />\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;<br />\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;$buf = @socket_read($changed_socket, 1024, PHP_NORMAL_READ);<br />\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;if ($buf === false) { // check disconnected client<br />\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;// remove client for $clients array<br />\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;$found_socket = array_search($changed_socket, $clients);<br />\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;socket_getpeername($changed_socket, $ip);<br />\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;unset($clients[$found_socket]);<br />\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;<br />\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;//notify all users about disconnected connection<br />\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;$response = mask(json_encode(array(&#39;type&#39;=&gt;&#39;system&#39;, &#39;message&#39;=&gt;$ip.&#39; desconectado&#39;)));<br />\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;enviar($response);<br />\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;}<br />\n&nbsp;&nbsp; &nbsp;}<br />\n}<br />\n// close the listening socket<br />\nsocket_close($sock);</p>\n\n<p>function enviar($msg)<br />\n{<br />\n&nbsp;&nbsp; &nbsp;global $clients;<br />\n&nbsp;&nbsp; &nbsp;foreach($clients as $changed_socket)<br />\n&nbsp;&nbsp; &nbsp;{<br />\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;@socket_write($changed_socket,$msg,strlen($msg));<br />\n&nbsp;&nbsp; &nbsp;}<br />\n&nbsp;&nbsp; &nbsp;return true;<br />\n}</p>\n\n<p>//Unmask incoming framed message<br />\nfunction unmask($text) {<br />\n&nbsp;&nbsp; &nbsp;$length = ord($text[1]) &amp; 127;<br />\n&nbsp;&nbsp; &nbsp;if($length == 126) {<br />\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;$masks = substr($text, 4, 4);<br />\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;$data = substr($text, 8);<br />\n&nbsp;&nbsp; &nbsp;}<br />\n&nbsp;&nbsp; &nbsp;elseif($length == 127) {<br />\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;$masks = substr($text, 10, 4);<br />\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;$data = substr($text, 14);<br />\n&nbsp;&nbsp; &nbsp;}<br />\n&nbsp;&nbsp; &nbsp;else {<br />\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;$masks = substr($text, 2, 4);<br />\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;$data = substr($text, 6);<br />\n&nbsp;&nbsp; &nbsp;}<br />\n&nbsp;&nbsp; &nbsp;$text = &quot;&quot;;<br />\n&nbsp;&nbsp; &nbsp;for ($i = 0; $i &lt; strlen($data); ++$i) {<br />\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;$text .= $data[$i] ^ $masks[$i%4];<br />\n&nbsp;&nbsp; &nbsp;}<br />\n&nbsp;&nbsp; &nbsp;return $text;<br />\n}</p>\n\n<p>//Encode message for transfer to client.<br />\nfunction mask($text)<br />\n{<br />\n&nbsp;&nbsp; &nbsp;$b1 = 0x80 | (0x1 &amp; 0x0f);<br />\n&nbsp;&nbsp; &nbsp;$length = strlen($text);<br />\n&nbsp;&nbsp; &nbsp;<br />\n&nbsp;&nbsp; &nbsp;if($length &lt;= 125)<br />\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;$header = pack(&#39;CC&#39;, $b1, $length);<br />\n&nbsp;&nbsp; &nbsp;elseif($length &gt; 125 &amp;&amp; $length &lt; 65536)<br />\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;$header = pack(&#39;CCn&#39;, $b1, 126, $length);<br />\n&nbsp;&nbsp; &nbsp;elseif($length &gt;= 65536)<br />\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;$header = pack(&#39;CCNN&#39;, $b1, 127, $length);<br />\n&nbsp;&nbsp; &nbsp;return $header.$text;<br />\n}</p>\n\n<p>//handshake new client.<br />\nfunction apreton($receved_header,$client_conn, $host, $port)<br />\n{<br />\n&nbsp;&nbsp; &nbsp;$headers = array();<br />\n&nbsp;&nbsp; &nbsp;$lines = preg_split(&quot;/\\r\\n/&quot;, $receved_header);<br />\n&nbsp;&nbsp; &nbsp;foreach($lines as $line)<br />\n&nbsp;&nbsp; &nbsp;{<br />\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;$line = chop($line);<br />\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;if(preg_match(&#39;/\\A(\\S+): (.*)\\z/&#39;, $line, $matches))<br />\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;{<br />\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;$headers[$matches[1]] = $matches[2];<br />\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;}<br />\n&nbsp;&nbsp; &nbsp;}</p>\n\n<p>&nbsp;&nbsp; &nbsp;$secKey = $headers[&#39;Sec-WebSocket-Key&#39;];<br />\n&nbsp;&nbsp; &nbsp;$secAccept = base64_encode(pack(&#39;H*&#39;, sha1($secKey . &#39;258EAFA5-E914-47DA-95CA-C5AB0DC85B11&#39;)));<br />\n&nbsp;&nbsp; &nbsp;//hand shaking header<br />\n&nbsp;&nbsp; &nbsp;$upgrade &nbsp;= &quot;HTTP/1.1 101 Web Socket Protocol Handshake\\r\\n&quot; .<br />\n&nbsp;&nbsp; &nbsp;&quot;Upgrade: websocket\\r\\n&quot; .<br />\n&nbsp;&nbsp; &nbsp;&quot;Connection: Upgrade\\r\\n&quot; .<br />\n&nbsp;&nbsp; &nbsp;&quot;WebSocket-Origin: $host\\r\\n&quot; .<br />\n&nbsp;&nbsp; &nbsp;&quot;WebSocket-Location: ws://$host:$port/dos/clase/server.php\\r\\n&quot;.<br />\n&nbsp;&nbsp; &nbsp;&quot;Sec-WebSocket-Accept:$secAccept\\r\\n\\r\\n&quot;;<br />\n&nbsp;&nbsp; &nbsp;socket_write($client_conn,$upgrade,strlen($upgrade));<br />}\n</code></pre>', 'alexander', 'Programacion', 234, 0, '2014-10-25 00:55:10', 0);
INSERT INTO `noticias` (`id`, `titulo`, `foto`, `contenido`, `user`, `categoria`, `visitas`, `id_comentario`, `publicado`, `comentarios`) VALUES
(19, 'tutorial node js', 'imagenes/nodejs.png', '<h1>El Libro para Principiantes en Node.js</h1>\n\n<h2>Sobre el Tutorial</h2>\n\n<p style="text-align:justify">El objetivo de este documento es ayudarte a empezar con el desarrollo de aplicaciones para Node.js, ense&ntilde;&aacute;ndote todo lo que necesites saber acerca de JavaScript &quot;avanzado&quot; sobre la marcha. Este tutorial va mucho m&aacute;s all&aacute; del t&iacute;pico manual &quot;Hola Mundo&quot;.</p>\n\n<h3>Status</h3>\n\n<p style="text-align:justify">Est&aacute;s leyendo la versi&oacute;n final de este libro, es decir, las actualizaciones solo ser&aacute;n hechas para corregir errores o para reflejar cambiar en nuevas versiones de Node.js.</p>\n\n<p style="text-align:justify">Las muestras de c&oacute;digo de este libro est&aacute;n probadas para funcionar con la versi&oacute;n 0.6.11 de Node.js.</p>\n\n<h3>Audiencia Objetivo</h3>\n\n<p style="text-align:justify">Este documento probablemente ser&aacute; mejor entendido por los lectores que tengan un trasfondo similar al m&iacute;o: Programadores experimentados en al menos un lenguaje orientado al objeto, como Ruby, Python, PHP o Java; poca experiencia con JavaScript, y ninguna experiencia en Node.js.</p>\n\n<p style="text-align:justify">El que este documento est&eacute; orientado a desarrolladores que ya tienen experiencia con otros lenguajes de programaci&oacute;n significa que no vamos a cubrir temas realmente b&aacute;sicos como tipos de datos, variables, estructuras de control y similares. Debes saber acerca de estos t&oacute;picos para entender este documento.</p>\n\n<p style="text-align:justify">Sin embargo, dado que las funciones y objetos en JavaScript son diferentes de sus contrapartes en la mayor&iacute;a de los lenguajes, estos ser&aacute;n explicados con m&aacute;s detalle.</p>\n\n<h3>Estructura de este documento</h3>\n\n<p style="text-align:justify">Al T&eacute;rmino de este documento, habr&aacute;s creado una aplicaci&oacute;n Web completa, que permita a los usuarios de &eacute;sta el ver p&aacute;ginas web y subir archivos.</p>\n\n<p style="text-align:justify">La cual, por supuesto, no va ser nada como la &quot;aplicaci&oacute;n que va a cambiar el mundo&quot;, no obstante eso, nosotros haremos la milla extra y no vamos s&oacute;lo a codificar una aplicaci&oacute;n lo &quot;suficientemente simple&quot; para hacer estos casos de uso posible, sino que crearemos un framework sencillo, pero completo, a fin de poder separar los distintos aspectos de nuestra aplicaci&oacute;n. Ver&aacute;s lo que esto significa en poco tiempo.</p>\n\n<p style="text-align:justify">Empezaremos por mirar c&oacute;mo el desarrollo en JavaScript en Node.js es diferente del desarrollo en JavaScript en un browser.</p>\n\n<p style="text-align:justify">Luego, nos mantendremos con la vieja tradici&oacute;n de escribir una aplicaci&oacute;n &quot;Hola Mundo&quot;, la cual es la aplicaci&oacute;n m&aacute;s b&aacute;sica de Node.js que &quot;hace&quot; algo.</p>\n\n<p style="text-align:justify">Enseguida, discutiremos que tipo de &quot;aplicaci&oacute;n del mundo real&quot; queremos construir, disectaremos las diferentes partes que necesitan ser implementadas para ensamblar esta aplicaci&oacute;n, y empezaremos trabajando en cada una de estas partes paso a paso.</p>\n\n<p style="text-align:justify">Tal y cual lo prometido, aprenderemos sobre la marcha acerca de algunos de los muchos conceptos avanzados de JavaScript, como hacer uso de ellos, y ver el porqu&eacute; tiene sentido el hacer uso de estos conceptos en vez de los que ya conocemos por otros lenguajes de programaci&oacute;n.</p>\n\n<div id="table-of-contents-headline" style="margin-top: 48px; color: rgb(119, 0, 0); font-size: 26px; font-weight: bold; font-family: Georgia, serif;">Tabla de Contenidos</div>\n\n<div id="table-of-contents" style="margin-left: -24px; font-family: Georgia, serif;">&nbsp;</div>\n\n<h2>JavaScript y Node.js</h2>\n\n<h3>JavaScript y T&uacute;</h3>\n\n<p style="text-align:justify">Antes que hablemos de toda la parte t&eacute;cnica, tom&eacute;monos un minuto y hablemos acerca de ti y tu relaci&oacute;n con JavaScript. Este cap&iacute;tulo est&aacute; aqu&iacute; para permitirte estimar si tiene sentido el que sigas o no leyendo este documento.</p>\n\n<p style="text-align:justify">Si eres como yo, empezaste con el &quot;desarrollo&quot; HTML hace bastante tiempo, escribiendo documentos HTML. Te encontraste en el camino con esta cosa simp&aacute;tica llamada JavaScript, pero solo la usabas en una forma muy b&aacute;sica, agregando interactividad a tus p&aacute;ginas de cuando en cuando.</p>\n\n<p style="text-align:justify">Lo que realmente quisiste era &quot;la cosa real&quot;, Quer&iacute;as saber c&oacute;mo construir sitios web complejos - Aprendiste un lenguaje de programaci&oacute;n como PHP, Ruby, Java, y empezaste a escribir c&oacute;digo &quot;backend&quot;.</p>\n\n<p style="text-align:justify">No obstante, mantuviste un ojo en JavaScript, y te diste cuenta que con la introducci&oacute;n de jQuery, Prototype y otros, las cosas se fueron poniendo m&aacute;s avanzadas en las Tierras de JavaScript, y que este lenguaje era realmente m&aacute;s que hacer un&nbsp;<em>window.open()</em>.</p>\n\n<p style="text-align:justify">Sin embargo, esto era todo cosa del&nbsp;<em>frontend</em>&nbsp;,y aunque era agradable contar con jQuery a tu disposici&oacute;n en cualquier momento que te sintieras con &aacute;nimo de sazonar una p&aacute;gina web, al final del d&iacute;a, lo que eras a lo m&aacute;s, era un usuario de JavaScript, pero no, un desarrollador de JavaScript.</p>\n\n<p style="text-align:justify">Y entonces lleg&oacute; Node.js. JavaScript en el servidor, &iquest;Qu&eacute; hay con eso?</p>\n\n<p style="text-align:justify">Decidiste que era ya tiempo de revisar el nuevo JavaScript. Pero espera: Escribir aplicaciones Node.js es una cosa ; Entender el porqu&eacute; ellas necesitan ser escritas en la manera que lo son significa entender JavaScript! Y esta vez es en serio.</p>\n\n<p style="text-align:justify">Y aqu&iacute; est&aacute; el problema: Ya que JavaScript realmente vive dos, o tal vez tres vidas (El peque&ntilde;o ayudante DHTML de mediados de los 90&#39;s, las cosas m&aacute;s serias tales como jQuery y similares, y ahora, el lado del servidor), no es tan f&aacute;cil encontrar informaci&oacute;n que te ayude a aprender JavaScript de la &quot;manera correcta&quot;, de forma de poder escribir aplicaciones de Node.js en una apariencia que te haga sentir que no s&oacute;lo est&aacute;s usando JavaScript, sino que tambi&eacute;n est&aacute;n desarrollando con &eacute;l.</p>\n\n<p style="text-align:justify">Porque ah&iacute; est&aacute; el asunto: Ya eres un desarrollador experimentado, y no quieres aprender una nueva t&eacute;cnica simplemente metiendo c&oacute;digo aqu&iacute; y all&aacute; mal-aprovech&aacute;ndolo; Quieres estar seguro que te est&aacute;s enfocando en un &aacute;ngulo correcto.</p>\n\n<p style="text-align:justify">Hay, por supuesto, excelente documentaci&oacute;n afuera. Pero la documentaci&oacute;n por s&iacute; sola no es suficiente. Lo que se necesita es una gu&iacute;a.</p>\n\n<p style="text-align:justify">Mi objetivo es proveerte esta gu&iacute;a.</p>\n\n<h3>Una Advertencia</h3>\n\n<p style="text-align:justify">Hay algunas personas realmente excelente en JavaScript. No soy una de ellas.</p>\n\n<p style="text-align:justify">Yo soy realmente el tipo del que te he hablado en los p&aacute;rrafos previos. S&eacute; un par de cosas acerca de desarrollar aplicaciones backend, pero a&uacute;n soy nuevo al JavaScript &quot;real&quot; y a&uacute;n m&aacute;s nuevo a Node.js. He aprendido solo recientemente alguno de los aspectos avanzados de JavaScript. No soy experimentado.</p>\n\n<p style="text-align:justify">Por lo que este no es un libro &quot;desde novicio hasta experto&quot;. Este es m&aacute;s bien un libro &quot;desde novicio a novicio avanzado&quot;.</p>\n\n<p style="text-align:justify">Si no fallo, entonces este ser&aacute; el tipo de documento que deseo hubiese tenido cuando empec&eacute; con Node.js.</p>\n\n<h3>JavaScript del Lado del Servidor</h3>\n\n<p style="text-align:justify">Las primeras encarnaciones de JavaScript viv&iacute;an en los browsers. Pero esto es s&oacute;lo el contexto. Define lo que puedes hacer con el lenguaje, pero no dice mucho acerca de lo que el lenguaje mismo puede hacer. JavaScript es un lenguaje &quot;completo&quot;: Lo puedes usar en muchos contextos y alcanzar con &eacute;ste, todo lo que puedes alcanzar con cualquier otro lenguaje &quot;completo&quot;.</p>\n\n<p style="text-align:justify">Node.js realmente es s&oacute;lo otro contexto: te permite correr c&oacute;digo JavaScript en el backend, fuera del browser.</p>\n\n<p style="text-align:justify">Para ejecutar el c&oacute;digo JavaScript que tu pretendes correr en el backend, este necesita ser interpretado y, bueno, ejecutado, Esto es lo que Node.js realiza, haciendo uso de la Maquina Virtual V8 de Google, el mismo entorno de ejecuci&oacute;n para JavaScript que Google Chrome utiliza.</p>\n\n<p style="text-align:justify">Adem&aacute;s, Node.js viene con muchos m&oacute;dulos &uacute;tiles, de manera que no tienes que escribir todo de cero, como por ejemplo, algo que ponga un string a la consola.</p>\n\n<p style="text-align:justify">Entonces, Node.js es en realidad dos cosas: un entorno de ejecuci&oacute;n y una librer&iacute;a.</p>\n\n<p style="text-align:justify">Para hacer uso de &eacute;stas (la librer&iacute;a y el entorno), Necesitas instalar Node.js. En lugar de repetir el proceso aqu&iacute;. Te ruego visitar&nbsp;<a href="https://github.com/joyent/node/wiki/Installation" title="Building and Installing Node.js">las instrucciones oficiales de instalaci&oacute;n</a>, Por Favor vuelve una vez que est&eacute;s arriba y corriendo tu versi&oacute;n de Node.js</p>\n\n<h3>&quot;Hola Mundo&quot;</h3>\n\n<p style="text-align:justify">Ok. Saltemos entonces al agua fr&iacute;a y escribamos nuestra primera aplicaci&oacute;n Node.js: &quot;Hola Mundo&quot;.</p>\n\n<p style="text-align:justify">Abre tu editor favorito y crea un archivo llamado&nbsp;<em>holamundo.js</em>. Nosotros queremos escribir &quot;Hola Mundo&quot; a STDOUT, y aqu&iacute; est&aacute; el c&oacute;digo necesario para hacer esto:</p>\n\n<pre><code>\nconsole.log(&quot;Hola Mundo&quot;);\n</code></pre>\n\n<p style="text-align:justify">Graba el archivo, y ejec&uacute;talo a trav&eacute;s de Node.js:</p>\n\n<pre><code>\nnode holamundo.js</code></pre>\n\n<p style="text-align:justify">Este deber&iacute;a retornar&nbsp;<em>Hola Mundo</em>&nbsp;en tu monitor.</p>\n\n<p style="text-align:justify">Ok, esto es aburrido, de acuerdo? As&iacute; que escribamos alguna cosa real.</p>\n\n<h2>Una Aplicaci&oacute;n Web Completa con Node.js</h2>\n\n<h3>Los casos de Uso</h3>\n\n<p style="text-align:justify">Manteng&aacute;moslo simple, pero realista:</p>\n\n<ul>\n	<li>El Usuario deber&iacute;a ser capaz de ocupar nuestra aplicaci&oacute;n con un browser.</li>\n	<li>El Usuario deber&iacute;a ver una p&aacute;gina de bienvenida cuando solicita http://<em>dominio</em>/inicio, la cual despliega un formulario de s&uacute;bida.</li>\n	<li>Eligiendo un archivo de imagen para subir y enviando el formulario, la imagen deber&iacute;a ser subida a http://<em>dominio</em>/subir, donde es desplegada una vez que la s&uacute;bida este finalizada.</li>\n</ul>\n\n<p style="text-align:justify">Muy bien. Ahora, tu puedes ser capaz de alcanzar este objetivo googleando y programando&nbsp;<em>lo que sea</em>, pero eso no es lo que queremos hacer aqu&iacute;.</p>\n\n<p style="text-align:justify">M&aacute;s que eso, no queremos escribir simplemente el c&oacute;digo m&aacute;s b&aacute;sico posible para alcanzar este objetivo, no importa lo elegante y correcto que pueda ser este c&oacute;digo. Nosotros agregaremos intencionalmente m&aacute;s abstracci&oacute;n de la necesaria de manera de poder tener una idea de lo que es construir aplicaciones m&aacute;s complejas de Node.js.</p>\n\n<h3>La Pila de Aplicaciones</h3>\n\n<p style="text-align:justify">Hagamos un desglose a nuestra aplicaci&oacute;n. &iquest;Qu&eacute; partes necesitan ser implementadas para poder satisfacer nuestros casos de uso?</p>\n\n<ul>\n	<li>Queremos servir p&aacute;ginas web, de manera que necesitamos un&nbsp;<strong>Servidor HTTP</strong>.</li>\n	<li>Nuestro servidor necesitar&aacute; responder directamente peticiones (requests), dependiendo de qu&eacute; URL sea pedida en este requerimiento, es que necesitaremos alg&uacute;n tipo de&nbsp;<strong>enrutador (router)</strong>&nbsp;de manera de mapear los peticiones a los handlers (manejadores) de &eacute;stos.</li>\n	<li>Para satisfacer a los peticiones que llegaron al servidor y han sido ruteados usando el enrutador, necesitaremos de hecho&nbsp;<strong>handlers (manejadores) de peticiones</strong></li>\n	<li>El Enrutador probablemente deber&iacute;a tratar cualquier informaci&oacute;n POST que llegue y d&aacute;rsela a los handlers de peticiones en una forma conveniente, luego necesitaremos&nbsp;<strong>manipulaci&oacute;n de data de petici&oacute;n</strong></li>\n	<li>Nosotros no solo queremos manejar peticiones de URLs, sino que tambi&eacute;n queremos desplegar contenido cuando estas URLs sean pedidas, lo que significa que necesitamos alg&uacute;n tipo de&nbsp;<strong>l&oacute;gica en las vistas</strong>&nbsp;a ser utilizada por los handlers de peticiones, de manera de poder enviar contenido al browser del Usuario.</li>\n	<li>Por &uacute;ltimo, pero no menos importante, el Usuario ser&aacute; capaz de subir im&aacute;genes, as&iacute; que necesitaremos alg&uacute;n tipo de&nbsp;<strong>manipulaci&oacute;n de subidas</strong>&nbsp;quien se har&aacute; cargo de los detalles.</li>\n</ul>\n\n<p style="text-align:justify">Pensemos un momento acerca de como construir&iacute;amos esta pila de aplicaciones con PHP. No es exactamente un secreto que la configuraci&oacute;n t&iacute;pica ser&iacute;a un Apache HTTP server con mod_php5 instalado.&nbsp;<br />\nLo que, a su vez, significa que el tema &quot;Necesitamos ser capaces de servir p&aacute;ginas web y recibir peticiones HTTP&quot; ni siquiera sucede dentro de PHP mismo.</p>\n\n<p style="text-align:justify">Bueno, con Node.js, las cosas son un poco distintas. Porque con Node.js, no solo implementamos nuestra aplicaci&oacute;n, nosotros tambi&eacute;n implementamos todo el servidor HTTP completo. De hecho, nuestra aplicaci&oacute;n web y su servidor web son b&aacute;sicamente lo mismo.</p>\n\n<p style="text-align:justify">Esto puede sonar como mucho trabajo, pero veremos en un momento que con Node.js, no lo es.</p>\n\n<p style="text-align:justify">Empecemos por el principio e implementemos la primera parte de nuestra pila, el servidor HTTP..</p>\n\n<h2>Construyendo la Pila de Aplicaciones</h2>\n\n<h3>Un Servidor HTTP B&aacute;sico</h3>\n\n<p style="text-align:justify">Cuando llegu&eacute; al punto donde quer&iacute;a empezar con mi primera aplicaci&oacute;n Node.js &quot;real&quot;, me pregunt&eacute; no solo como la iba a programar, sino que tambi&eacute;n, como organizar mi c&oacute;digo.&nbsp;<br />\n&iquest;Necesitar&eacute; tenerlo todo en un archivo? Muchos tutoriales en la Web que te ense&ntilde;an c&oacute;mo escribir un servidor HTTP b&aacute;sico en Node.js tienen toda la l&oacute;gica en un solo lugar. &iquest;Qu&eacute; pasa si yo quiero asegurarme que mi c&oacute;digo se mantenga le&iacute;ble a medida que le vaya agregando m&aacute;s cosas?</p>\n\n<p style="text-align:justify">Resulta, que es relativamente f&aacute;cil de mantener los distintos aspectos de tu c&oacute;digo separados, poni&eacute;ndolos en m&oacute;dulos.</p>\n\n<p style="text-align:justify">Esto te permite tener un archivo&nbsp;<em>main</em>&nbsp;limpio, en el cual ejecutas Node.js, y m&oacute;dulos limpios que pueden ser utilizados por el archivo&nbsp;<em>main</em>&nbsp;entre muchos otros.</p>\n\n<p style="text-align:justify">As&iacute; que vamos a crear un archivo&nbsp;<em>main</em>&nbsp;el cual usaremos para iniciar nuestra aplicaci&oacute;n, y un archivo de m&oacute;dulo d&oacute;nde residir&aacute; el c&oacute;digo de nuestro servidor HTTP.</p>\n\n<p style="text-align:justify">Mi impresi&oacute;n es que es m&aacute;s o menos un est&aacute;ndar nombrar a tu archivo&nbsp;<em>principal</em>como&nbsp;<em>index.js</em>. Tiene sentido tambi&eacute;n que pongamos nuestro m&oacute;dulo de servidor en un archivo llamado&nbsp;<em>server.js</em>.</p>\n\n<p style="text-align:justify">Empecemos con el m&oacute;dulo del servidor. Crea el archivo&nbsp;<em>server.js</em>&nbsp;en el directorio ra&iacute;z de tu proyecto, y ll&eacute;nalo con el c&oacute;digo siguiente:</p>\n\n<pre><code>\nvar http = require(&quot;http&quot;);\n\nhttp.createServer(function(request, response) {\n  response.writeHead(200, {&quot;Content-Type&quot;: &quot;text/html&quot;});\n  response.write(&quot;Hola Mundo&quot;);\n  response.end();\n}).listen(8888);\n</code></pre>\n\n<p style="text-align:justify">Eso es! Acabas de escribir un servidor HTTP activo. Prob&eacute;moslo ejecut&aacute;ndolo y teste&aacute;ndolo. Primero ejecuta tu script con Node.js:</p>\n\n<pre><code>\nnode server.js</code></pre>\n\n<p style="text-align:justify">Ahora, abre tu browser y ap&uacute;ntalo a&nbsp;<a href="http://localhost:8888/" rel="nofollow">http://localhost:8888/</a>. Esto deber&iacute;a desplegar una p&aacute;gina web que diga &quot;Hola Mundo&quot;.</p>\n\n<p style="text-align:justify">Interesante, &iquest;no? &iquest;Qu&eacute; tal si hablamos de que est&aacute; pasando aqu&iacute; y dejamos la pregunta de &#39;c&oacute;mo organizar nuestro proyecto&#39; para despu&eacute;s? Prometo que volveremos a esto.</p>\n\n<h3>Analizando nuestro servidor HTTP</h3>\n\n<p style="text-align:justify">Bueno, entonces, analicemos que est&aacute; pasando aqu&iacute;.</p>\n\n<p style="text-align:justify">La primera l&iacute;nea&nbsp;<em>require</em>, requiere al m&oacute;dulo&nbsp;<em>http</em>&nbsp;que viene incluido con Node.js y lo hace accesible a trav&eacute;s de la variable&nbsp;<em>http</em>.</p>\n\n<p style="text-align:justify">Luego llamamos a una de las funciones que el m&oacute;dulo http ofrece:&nbsp;<em>createServer</em>. Esta funci&oacute;n retorna un objeto, y este objeto tiene un m&eacute;todo llamado&nbsp;<em>listen</em>(escucha), y toma un valor num&eacute;rico que indica el n&uacute;mero de puerto en que nuestro servidor HTTP va a escuchar.</p>\n\n<p style="text-align:justify">Por favor ignora por un segundo a la definici&oacute;n de funci&oacute;n que sigue a la llave de apertura de&nbsp;<em>http.createServer</em>.</p>\n\n<p style="text-align:justify">Nosotros podr&iacute;amos haber escrito el c&oacute;digo que inicia a nuestro servidor y lo hace escuchar al puerto 8888 de la siguiente manera:</p>\n\n<pre><code>\nvar http = require(&quot;http&quot;);\nvar server = http.createServer();\nserver.listen(8888);</code></pre>\n\n<p style="text-align:justify">Esto hubiese iniciado al servidor HTTP en el puerto 8888 y no hubiese hecho nada m&aacute;s (ni siquiera respondido alguna petici&oacute;n entrante).</p>\n\n<p style="text-align:justify">La parte realmente interesante (y rara, si tu trasfondo es en un lenguaje m&aacute;s conservador, como PHP) es que la definici&oacute;n de funci&oacute;n est&aacute; ah&iacute; mismo donde uno esperar&iacute;a el primer par&aacute;metro de la llamada a&nbsp;<em>createServer()</em>.</p>\n\n<p style="text-align:justify">Resulta que, este definici&oacute;n de funci&oacute;n ES el primer (y &uacute;nico) par&aacute;metro que le vamos a dar a la llamada a&nbsp;<em>createServer()</em>. Ya que en JavaScript, las funciones pueden ser pasadas de un lado a otro como cualquier otro valor.</p>\n\n<h3>Pasando Funciones de un Lado a Otro</h3>\n\n<p style="text-align:justify">Puedes, por ejemplo, hacer algo como esto:</p>\n\n<pre><code>\nfunction decir(palabra) {\n  console.log(palabra);\n}\n\nfunction ejecutar(algunaFuncion, valor) {\n  algunaFuncion(valor);\n}\n\nejecutar(decir, &quot;Hola&quot;);</code></pre>\n\n<p style="text-align:justify">Lee esto cuidadosamente! Lo que estamos haciendo aqu&iacute; es, nosotros pasamos la funci&oacute;n&nbsp;<em>decir()</em>&nbsp;como el primer par&aacute;metro de la funci&oacute;n&nbsp;<em>ejecutar</em>. No el valor de retorno de&nbsp;<em>decir</em>, sino que&nbsp;<em>decir()</em>&nbsp;misma!</p>\n\n<p style="text-align:justify">Entonces,&nbsp;<em>decir</em>&nbsp;se convierte en la variable local&nbsp;<em>algunaFuncion</em>&nbsp;dentro de<em>ejecutar</em>, y ejecutar puede llamar a la funci&oacute;n en esta variable usando<em>algunaFuncion()</em>&nbsp;(agregando llaves).</p>\n\n<p style="text-align:justify">Por supuesto, dado que&nbsp;<em>decir</em>&nbsp;toma un par&aacute;metro,&nbsp;<em>ejecutar</em>&nbsp;puede pasar tal par&aacute;metro cuando llama a&nbsp;<em>algunaFuncion</em>.</p>\n\n<p style="text-align:justify">Nosotros podemos, tal como lo hicimos, pasar una funci&oacute;n por su nombre como par&aacute;metro a otra funci&oacute;n. Pero no estamos obligados a tener que definir la funci&oacute;n primero y luego pasarla. Podemos tambi&eacute;n definir y pasar la funci&oacute;n como un par&aacute;metro a otra funci&oacute;n todo al mismo tiempo:</p>\n\n<pre><code>\nfunction ejecutar(algunaFuncion, valor) {\n  algunaFuncion(valor);\n}\n\nejecutar(function(palabra){ console.log(palabra) }, &quot;Hola&quot;);\n</code></pre>\n\n<p style="text-align:justify">(N.del T.:&nbsp;<em>function</em>&nbsp;es una palabra clave de JavaScript).</p>\n\n<p style="text-align:justify">Nosotros definimos la funci&oacute;n que queremos pasar a&nbsp;<em>ejecutar</em>&nbsp;justo ah&iacute; en el lugar donde&nbsp;<em>ejecutar</em>&nbsp;espera su primer par&aacute;metro.</p>\n\n<p style="text-align:justify">De esta manera, no necesitamos darle a la funci&oacute;n un nombre, por lo que esta funci&oacute;n es llamada&nbsp;<em>funci&oacute;n an&oacute;nima</em>.</p>\n\n<p style="text-align:justify">Esta es una primera ojeada a lo que me gusta llamar JavaScript &quot;avanzado&quot;. Pero tom&eacute;moslo paso a paso. Por ahora, aceptemos que en JavaScript, nosotros podemos pasar una funci&oacute;n como un par&aacute;metro cuando llamamos a otra funci&oacute;n. Podemos hacer esto asignando nuestra funci&oacute;n a una variable, la cual luego pasamos, o definiendo la funci&oacute;n a pasar en el mismo lugar.</p>\n\n<h3>De Qu&eacute; manera el pasar funciones hace que nuestro servidor HTTP funcione</h3>\n\n<p style="text-align:justify">Con este conocimiento, Volvamos a nuestro servidor HTTP minimalista:</p>\n\n<pre><code>\nvar http = require(&quot;http&quot;);\n\nhttp.createServer(function(request, response) {\n  response.writeHead(200, {&quot;Content-Type&quot;: &quot;text/html&quot;});\n  response.write(&quot;Hola Mundo&quot;);\n  response.end();\n}).listen(8888);\n</code></pre>\n\n<p style="text-align:justify">A estas alturas, deber&iacute;a quedar claro lo que estamos haciendo ac&aacute;: Estamos pas&aacute;ndole a la funci&oacute;n&nbsp;<em>createServer</em>&nbsp;una funci&oacute;n an&oacute;nima.</p>\n\n<p style="text-align:justify">Podemos llegar a lo mismo refactorizando nuestro c&oacute;digo as&iacute;:</p>\n\n<pre><code>\nvar http = require(&quot;http&quot;);\n\nfunction onRequest(request, response) {\n  response.writeHead(200, {&quot;Content-Type&quot;: &quot;text/html&quot;});\n  response.write(&quot;Hola Mundo&quot;);\n  response.end();\n}\n\nhttp.createServer(onRequest).listen(8888);\n</code></pre>\n\n<p style="text-align:justify">Quiz&aacute;s ahora es un buen momento para preguntar: &iquest;Por Qu&eacute; estamos haciendo esto de esta manera?</p>\n\n<h3>Callbacks Manejadas por Eventos</h3>\n\n<p style="text-align:justify">La respuesta a) No es una no muy f&aacute;cil de dar (al menos para m&iacute;), y b) Yace en la naturaleza misma de como Node.js trabaja: Est&aacute; orientado al evento, esa es la raz&oacute;n de por qu&eacute; es tan r&aacute;pido.</p>\n\n<p style="text-align:justify">Podr&iacute;as tomarte un tiempo para leer este excelente post (en ingl&eacute;s) de Felix Geisend&ouml;rdfer:&nbsp;<a href="http://debuggable.com/posts/understanding-node-js:4bd98440-45e4-4a9a-8ef7-0f7ecbdd56cb">Understanding node.js</a>&nbsp;para alguna explicaci&oacute;n de trasfondo.</p>\n\n<p style="text-align:justify">Al final todo se reduce al hecho que Node.js trabaja orientado al evento. Ah, y s&iacute;, Yo tampoco s&eacute; exactamente qu&eacute; significa eso. Pero voy a hacer un intento de explicar, el porqu&eacute; esto tiene sentido para nosotros, que queremos escribir aplicaciones web en Node.js.</p>\n\n<p style="text-align:justify">Cuando nosotros llamamos al m&eacute;todo&nbsp;<em>http.createServer</em>, por supuesto que no s&oacute;lo queremos que el servidor se quede escuchando en alg&uacute;n puerto, sino que tambi&eacute;n queremos hacer algo cuando hay una petici&oacute;n HTTP a este servidor.</p>\n\n<p style="text-align:justify">El problema es, que esto sucede de manera asincr&oacute;nica: Puede suceder en cualquier momento, pero solo tenemos un &uacute;nico proceso en el cual nuestro servidor corre.</p>\n\n<p style="text-align:justify">Cuando escribimos aplicaciones PHP, esto no nos molesta en absoluto: cada vez que hay una petici&oacute;n HTTP, el servidor web (por lo general Apache) genera un nuevo proceso solo para esta petici&oacute;n, y empieza el script PHP indicado desde cero, el cual es ejecutado de principio a fin.</p>\n\n<p style="text-align:justify">As&iacute; que respecto al control de flujo, estamos en el medio de nuestro programa en Node.js, cuando una nueva petici&oacute;n llega al puerto 8888: &iquest;C&oacute;mo manipulamos esto sin volvernos locos?</p>\n\n<p style="text-align:justify">Bueno, esta es la parte donde el dise&ntilde;o orientado al evento de Node.js / JavaScript de verdad ayuda, aunque tengamos que aprender nuevos conceptos para poder dominarlo. Veamos como estos conceptos son aplicados en nuestro c&oacute;digo de servidor.</p>\n\n<p style="text-align:justify">Nosotros creamos el servidor, y pasamos una funci&oacute;n al m&eacute;todo que lo crea. Cada vez que nuestro servidor recibe una petici&oacute;n, la funci&oacute;n que le pasamos ser&aacute; llamada.</p>\n\n<p style="text-align:justify">No sabemos qu&eacute; es lo que va a suceder, pero ahora tenemos un lugar donde vamos a poder manipular la petici&oacute;n entrante. Es la funci&oacute;n que pasamos, sin importar si la definimos o si la pasamos de manera an&oacute;nima.</p>\n\n<p style="text-align:justify">Este concepto es llamado un&nbsp;<em>callback</em>&nbsp;(del ingl&eacute;s: call = llamar; y back = de vuelta). Nosotros pasamos una funci&oacute;n a alg&uacute;n m&eacute;todo, y el m&eacute;todo ocupa esta funci&oacute;n para llamar (call) de vuelta (back) si un evento relacionado con este m&eacute;todo ocurre.</p>\n\n<p style="text-align:justify">Al menos para m&iacute;, esto tom&oacute; alg&uacute;n tiempo para ser entendido. Lee el articulo del blog de Felix de nuevo si todav&iacute;a no te sientes seguro.</p>\n\n<p style="text-align:justify">Juguemos un poco con este nuevo concepto. &iquest;Podemos probar que nuestro c&oacute;digo contin&uacute;a despu&eacute;s de haber creado el servidor, incluso si no ha sucedido ninguna petici&oacute;n HTTP y la funci&oacute;n callback que pasamos no ha sido llamada? Probemos:</p>\n\n<pre><code>\nvar http = require(&quot;http&quot;);\n\nfunction onRequest(request, response) {\n  console.log(&quot;Peticion Recibida.&quot;);\n  response.writeHead(200, {&quot;Content-Type&quot;: &quot;text/html&quot;});\n  response.write(&quot;Hola Mundo&quot;);\n  response.end();\n}\n\nhttp.createServer(onRequest).listen(8888);\n\nconsole.log(&quot;Servidor Iniciado.&quot;);\n</code></pre>\n\n<p style="text-align:justify">Noten que utilizo&nbsp;<em>console.log</em>&nbsp;para entregar un texto cada vez que la funci&oacute;n<em>onRequest</em>&nbsp;(nuestro callback) es gatillada, y otro texto&nbsp;<em>despu&eacute;s</em>&nbsp;de iniciar nuestro servidor HTTP.</p>\n\n<p style="text-align:justify">Cuando iniciamos esta aplicaci&oacute;n (con&nbsp;<em>node server.js</em>, como siempre). Esta inmediatamente escribir&aacute; en pantalla &quot;Servidor Iniciado&quot; en la l&iacute;nea de comandos. Cada vez que hagamos una petici&oacute;n a nuestro servidor (abriendo<a href="http://localhost:8888/" rel="nofollow">http://localhost:8888/</a>&nbsp;en nuestro browser), el mensaje &quot;Peticion Recibida.&quot; va a ser impreso en la l&iacute;nea de comandos.</p>\n\n<p style="text-align:justify">Esto es JavaScript del Lado del Servidor Asincr&oacute;nico y orientado al evento con callbacks en acci&oacute;n :-)</p>\n\n<p style="text-align:justify">(Toma en cuenta que nuestro servidor probablemente escribir&aacute; &quot;Petici&oacute;n Recibida.&quot; a STDOUT dos veces al abrir la p&aacute;gina en un browser. Esto es porque la mayor&iacute;a de los browsers van a tratar de cargar el favicon mediante la petici&oacute;n http://localhost:8888/favicon.ico cada vez que abras http://localhost:8888/).</p>\n\n<h3>Como nuestro Servidor manipula las peticiones</h3>\n\n<p style="text-align:justify">OK, Analicemos r&aacute;pidamente el resto del c&oacute;digo de nuestro servidor, esto es, el cuerpo de nuestra funci&oacute;n de callback&nbsp;<em>onRequest()</em>.</p>\n\n<p style="text-align:justify">Cuando la Callback es disparada y nuestra funci&oacute;n&nbsp;<em>onRequest()</em>&nbsp;es gatillada, dos par&aacute;metros son pasados a ella:&nbsp;<em>request</em>&nbsp;y&nbsp;<em>response</em>.</p>\n\n<p style="text-align:justify">Estos son objetos, y puedes usar sus m&eacute;todos para manejar los detalles de la petici&oacute;n HTTP ocurrida y responder a la petici&oacute;n (en otras palabras enviar algo de vuelta al browser que hizo la petici&oacute;n a tu servidor).</p>\n\n<p style="text-align:justify">Y eso es lo que nuestro c&oacute;digo hace: Cada vez que una petici&oacute;n es recibida, usa la funci&oacute;n&nbsp;<em>response.writeHead()</em>&nbsp;para enviar un estatus HTTP 200 y un content-type (par&aacute;metro que define que tipo de contenido es) en el encabezado de la respuesta HTTP, y la funci&oacute;n&nbsp;<em>response.write()</em>&nbsp;para enviar el texto &quot;Hola Mundo&quot; en el cuerpo de la respuesta,</p>\n\n<p style="text-align:justify">Por &uacute;ltimo, nosotros llamamos&nbsp;<em>response.end()</em>&nbsp;para finalizar nuestra respuesta</p>\n\n<p style="text-align:justify">Hasta el momento, no nos hemos interesado por los detalles de la petici&oacute;n, y ese es el porqu&eacute; no hemos ocupado el objeto&nbsp;<em>request</em>&nbsp;completamente.</p>\n\n<h3>Encontrando un lugar para nuestro m&oacute;dulo de servidor</h3>\n\n<p style="text-align:justify">OK, promet&iacute; que volver&iacute;amos a al C&oacute;mo organizar nuestra aplicaci&oacute;n. Tenemos el c&oacute;digo de nuestro servidor HTTP muy b&aacute;sico en el archivo&nbsp;<em>server.js</em>, y mencion&eacute; que es com&uacute;n tener un archivo principal llamado&nbsp;<em>index.js</em>, el cual es usado para arrancar y partir nuestra aplicaci&oacute;n haciendo uso de los otros m&oacute;dulos de la aplicaci&oacute;n (como el m&oacute;dulo de servidor HTTP que vive en<em>server.js</em>).</p>\n\n<p style="text-align:justify">Hablemos de como podemos hacer que nuestro server.js sea un verdadero m&oacute;dulo Node.js y que pueda ser usado por nuestro pronto-a-ser-escrito archivo principal&nbsp;<em>index.js</em>.</p>\n\n<p style="text-align:justify">Como habr&aacute;n notado, ya hemos usado m&oacute;dulos en nuestro c&oacute;digo, como &eacute;ste:</p>\n\n<pre><code>\nvar http = require(&quot;http&quot;);\n\n...\n\nhttp.createServer(...);\n</code></pre>\n\n<p style="text-align:justify">En alg&uacute;n lugar dentro de Node.js vive un m&oacute;dulo llamado &quot;http&quot;, y podemos hacer uso de &eacute;ste en nuestro propio c&oacute;digo requiri&eacute;ndolo y asignando el resultado del requerimiento a una variable local.</p>\n\n<p style="text-align:justify">Esto transforma a nuestra variable local en un objeto que acarrea todos los m&eacute;todos p&uacute;blicos que el m&oacute;dulo&nbsp;<em>http</em>&nbsp;provee.</p>\n\n<p style="text-align:justify">Es pr&aacute;ctica com&uacute;n elegir el nombre del m&oacute;dulo como nombre para nuestra variable local, pero somos libres de escoger cualquiera que nos guste:</p>\n\n<pre><code>\nvar foo = require(&quot;http&quot;);\n\n...\n\nfoo.createServer(...);\n</code></pre>\n\n<p style="text-align:justify">Bien. Ya tenemos claro como hacer uso de los m&oacute;dulos internos de Node.js. &iquest;C&oacute;mo hacemos para crear nuestros propios m&oacute;dulos, y C&oacute;mo los utilizamos?</p>\n\n<p style="text-align:justify">Descubr&aacute;moslo transformando nuestro script&nbsp;<em>server.js</em>&nbsp;en un m&oacute;dulo real.</p>\n\n<p style="text-align:justify">Sucede que, no tenemos que transformarlo tanto. Hacer que alg&uacute;n c&oacute;digo sea un M&oacute;dulo, significa que necesitamos&nbsp;<em>exportar</em>&nbsp;las partes de su funcionalidad que queremos proveer a otros scripts que requieran nuestro m&oacute;dulo.</p>\n\n<p style="text-align:justify">Por ahora, la funcionalidad que nuestro servidor HTTP necesita exportar es simple: Permitir a los scripts que utilicen este m&oacute;dulo arrancar el servidor.</p>\n\n<p style="text-align:justify">Para hacer esto posible, Dotaremos al c&oacute;digo de nuestro servidor de una funci&oacute;n llamada&nbsp;<em>inicio</em>, y exportaremos esta funci&oacute;n:</p>\n\n<p style="text-align:justify">&nbsp;</p>\n\n<pre><code>\nvar http = require(&quot;http&quot;);\n\nfunction iniciar() {\n  function onRequest(request, response) {\n    console.log(&quot;Petici&oacute;n Recibida.&quot;);\n    response.writeHead(200, {&quot;Content-Type&quot;: &quot;text/html&quot;});\n    response.write(&quot;Hola Mundo&quot;);\n    response.end();\n  }\n\n  http.createServer(onRequest).listen(8888);\n  console.log(&quot;Servidor Iniciado.&quot;);\n}\n\nexports.iniciar = iniciar;\n</code></pre>\n\n<p style="text-align:justify">De este modo, Podemos crear nuestro propio archivo principal&nbsp;<em>index.js</em>, y arrancar nuestro servidor HTTP all&iacute;, aunque el c&oacute;digo para el servidor este en nuestro archivo&nbsp;<em>server.js</em>.</p>\n\n<p style="text-align:justify">Crea un archivo&nbsp;<em>index.js</em>&nbsp;con el siguiente contenido:</p>\n\n<pre><code>\nvar server = require(&quot;./server&quot;);\n\nserver.iniciar();\n</code></pre>\n\n<p style="text-align:justify">Como puedes ver, nosotros utilizamos nuestro m&oacute;dulo de servidor tal como cualquier otro m&oacute;dulo interno: requiriendo el archivo donde est&aacute; contenido y asign&aacute;ndolo a una variable, con las funciones que tenga &#39;exportadas&#39; disponibles para nosotros.</p>\n\n<p style="text-align:justify">Eso es. Podemos ahora arrancar nuestra aplicaci&oacute;n por medio de nuestro script principal, y va a hacer exactamente lo mismo:</p>\n\n<pre><code>\nnode index.js</code></pre>\n\n<p style="text-align:justify">Bien, ahora podemos poner las diferentes partes de nuestra aplicaci&oacute;n en archivos diferentes y enlazarlas juntas a trav&eacute;s de la creaci&oacute;n de estos m&oacute;dulos.</p>\n\n<p style="text-align:justify">&nbsp;</p>\n\n<p style="text-align:justify">Tenemos s&oacute;lo la primera parte de nuestra aplicaci&oacute;n en su lugar: Podemos recibir peticiones HTTP. Pero necesitamos hacer algo con ellas - necesitamos reaccionar de manera diferente, dependiendo de que URL el browser requiera de nuestro servidor.</p>\n\n<p style="text-align:justify">&nbsp;</p>\n\n<p style="text-align:justify">Para una aplicaci&oacute;n muy simple, podr&iacute;as hacer esto directamente dentro de una funci&oacute;n de callback&nbsp;<em>OnRequest()</em>. Pero, como dije, agreguemos un poco m&aacute;s de abstracci&oacute;n, de manera de hacer nuestra aplicaci&oacute;n m&aacute;s interesante.</p>\n\n<p style="text-align:justify">Hacer diferentes peticiones HTTP ir a partes diferentes de nuestro c&oacute;digo se llama &quot;ruteo&quot; (routing, en ingl&eacute;s) - bueno, entonces, cre&eacute;mos un m&oacute;dulo llamado&nbsp;<em>router</em>.</p>\n\n<h3>&iquest;Qu&eacute; se necesita para &quot;rutear&quot; peticiones?</h3>\n\n<p style="text-align:justify">Necesitamos ser capaces de entregar la URL requerida y los posibles par&aacute;metros GET o POST adicionales a nuestro router, y basado en estos, el router debe ser capaz de decidir qu&eacute; c&oacute;digo ejecutar (este &quot;c&oacute;digo a ejecutar&quot; es la tercera parte de nuestra aplicaci&oacute;n: una colecci&oacute;n de manipuladores de peticiones que har&aacute;n el verdadero trabajo cuando una petici&oacute;n es recibida).</p>\n\n<p style="text-align:justify">As&iacute; que, Necesitamos mirar en las peticiones HTTP y extraer la URL requerida, as&iacute; como los par&aacute;metros GET/POST de ellos. Se puede discutir acerca de si este procedimiento debe ser parte del router o del servidor (o si lo hacemos un m&oacute;dulo por s&iacute; mismo), pero hagamos el acuerdo de hacerlo parte de nuestro servidor HTTP por ahora.</p>\n\n<p style="text-align:justify">Toda la informaci&oacute;n que necesitamos est&aacute; disponible en el objeto&nbsp;<em>request</em>, el que es pasado como primer par&aacute;metro a nuestra funci&oacute;n callback&nbsp;<em>onRequest()</em>. Pero para interpretar esta informaci&oacute;n, necesitamos algunos m&oacute;dulos adicionales Node.js, llamados&nbsp;<em>url</em>&nbsp;y&nbsp;<em>querystring</em>.</p>\n\n<p style="text-align:justify">El m&oacute;dulo&nbsp;<em>url</em>&nbsp;provee m&eacute;todos que nos permite extraer las diferentes partes de una URL (como por ejemplo la ruta requerida y el string de consulta), y<em>querystring</em>&nbsp;puede, en cambio, ser usado para parsear el string de consulta para los par&aacute;metros requeridos:</p>\n\n<pre><code>\n                               url.parse(string).query\n                                           |\n           url.parse(string).pathname      |\n                       |                   |\n                       |                   |\n                     ------ -------------------\nhttp://localhost:8888/iniciar?foo=bar&amp;hello=world\n                                ---       -----\n                                 |          |\n                                 |          |\n              querystring(string)[&quot;foo&quot;]    |\n                                            |\n                         querystring(string)[&quot;hello&quot;]\n</code></pre>\n\n<p style="text-align:justify">Podemos, por supuesto, tambi&eacute;n utilizar&nbsp;<em>querystring</em>&nbsp;para parsear el cuerpo de una petici&oacute;n POST en busca de par&aacute;metros, como veremos m&aacute;s tarde.</p>\n\n<p style="text-align:justify">Agreguemos ahora a nuestra funci&oacute;n&nbsp;<em>onRequest()</em>&nbsp;la l&oacute;gica requerida para encontrar que ruta URL el browser solicit&oacute;:</p>\n\n<p style="text-align:justify">&nbsp;</p>\n\n<pre><code>\nvar http = require(&quot;http&quot;);\nvar url = require(&quot;url&quot;);\n\nfunction iniciar() {\n  function onRequest(request, response) {\n    var pathname = url.parse(request.url).pathname;\n    console.log(&quot;Petici&oacute;n para &quot; + pathname + &quot; recibida.&quot;);\n    response.writeHead(200, {&quot;Content-Type&quot;: &quot;text/html&quot;});\n    response.write(&quot;Hola Mundo&quot;);\n    response.end();\n  }\n\n  http.createServer(onRequest).listen(8888);\n  console.log(&quot;Servidor Iniciado.&quot;);\n}\n\nexports.iniciar = iniciar;\n</code></pre>\n\n<p style="text-align:justify">Muy Bien. Nuestra aplicaci&oacute;n puede ahora distinguir peticiones basadas en la ruta URL requerida - esto nos permite mapear peticiones hacia nuestro manipuladores de peticiones, bas&aacute;ndonos en la ruta URL usando nuestro (pronto a ser escrito) router. Luego, podemos construir nuestra aplicaci&oacute;n en una forma REST (RESTful way en Ingl&eacute;s), ya que ahora podemos implementar una interfaz que sigue los principios que gu&iacute;an a la&nbsp;<em>Identificaci&oacute;n de Recursos</em>(ve por favor&nbsp;<a href="http://es.wikipedia.org/wiki/Representational_State_Transfer">el art&iacute;culo de Wikipedia acerca de la Transferencia del Estado Representacional</a>&nbsp;para informaci&oacute;n de trasfondo.</p>\n\n<p style="text-align:justify">En el contexto de nuestra aplicaci&oacute;n, esto significa simplemente que seremos capaces de tener peticiones para las URLs&nbsp;<em>/iniciar</em>&nbsp;y&nbsp;<em>/subir</em>&nbsp;manejadas por partes diferentes de nuestro c&oacute;digo. Veremos pronto como todo esto encaja.</p>\n\n<p style="text-align:justify">&nbsp;</p>\n\n<p style="text-align:justify">OK, es hora de escribir nuestro router. Vamos a crear un nuevo archivo llamado<em>router.js</em>, con el siguiente contenido:</p>\n\n<pre><code>\nfunction route(pathname) {\n  console.log(&quot;A punto de rutear una peticion para &quot; + pathname);\n}\n\nexports.route = route;\n</code></pre>\n\n<p style="text-align:justify">Por supuesto, este c&oacute;digo no est&aacute; haciendo nada, pero eso est&aacute; bien por ahora. Empecemos a ver como vamos a encajar este router con nuestro servidor antes de poner m&aacute;s l&oacute;gica en el router.</p>\n\n<p style="text-align:justify">Nuestro servidor HTTP necesita saber y hacer uso de nuestro router. Podemos escribir directamente esta dependencia a nuestro servidor, pero como hemos aprendido de la manera dif&iacute;cil en nuestras experiencias, vamos a acoplar de manera d&eacute;bil (<em>loose coupling</em>&nbsp;en Ingl&eacute;s) al router y su servidor v&iacute;a inyecci&oacute;n por dependencia. Para una referencia de fondo, leer el&nbsp;<a href="http://martinfowler.com/articles/injection.html">Art&iacute;culo de Martin Fowler (en Ingl&eacute;s)</a>.</p>\n\n<p style="text-align:justify">Primero extendamos nuestra funci&oacute;n&nbsp;<em>iniciar()</em>&nbsp;de manera de permitirnos pasar la funci&oacute;n de ruteo a ser usada como par&aacute;metro:</p>\n\n<pre><code>\nvar http = require(&quot;http&quot;);\nvar url = require(&quot;url&quot;);\n\nfunction iniciar(route) {\n  function onRequest(request, response) {\n    var pathname = url.parse(request.url).pathname;\n    console.log(&quot;Peticion para &quot; + pathname + &quot; recibida.&quot;);\n\n    route(pathname);\n\n    response.writeHead(200, {&quot;Content-Type&quot;: &quot;text/html&quot;});\n    response.write(&quot;Hola Mundo&quot;);\n    response.end();\n  }\n\n  http.createServer(onRequest).listen(8888);\n  console.log(&quot;Servidor Iniciado.&quot;);\n}\n\nexports.iniciar = iniciar;\n</code></pre>\n\n<p style="text-align:justify">Y extendamos nuestro&nbsp;<em>index.js</em>&nbsp;adecuadamente, esto es, inyectando la funci&oacute;n de ruteo de nuestro router en el servidor:</p>\n\n<pre><code>\nvar server = require(&quot;./server&quot;);\nvar router = require(&quot;./router&quot;);\n\nserver.iniciar(router.route);\n\n</code></pre>\n\n<p style="text-align:justify">Nuevamente , estamos pasando una funci&oacute;n como par&aacute;metros, pero esto ya no es una novedad para nosotros.</p>\n\n<p style="text-align:justify">Si arrancamos nuestra aplicaci&oacute;n ahora (<em>node index.js</em>&nbsp;como siempre), y hacemos una petici&oacute;n para una URL, puedes ver ahora por las respuestas de la aplicaci&oacute;n que nuestro servidor HTTP hace uso de nuestro router y le entrega el nombre de ruta requerido:</p>\n\n<pre><code>\nbash$ node index.js\nPetici&oacute;n para /foo recibida.\nA punto de rutear una peticion para /foo\n</code></pre>\n\n<p style="text-align:justify">He omitido la molesta respuesta de la petici&oacute;n para /favicon.ico</p>\n\n<h3>Ejecuci&oacute;n en el reino de los verbos</h3>\n\n<p style="text-align:justify">&iquest;Puedo divagar un vez m&aacute;s por un momento y hablar acerca de la programaci&oacute;n funcional de nuevo?</p>\n\n<p style="text-align:justify">Pasar funciones no es s&oacute;lo una consideraci&oacute;n T&eacute;cnica. Con respecto al dise&ntilde;o de software, esto es casi filos&oacute;fico. Tan solo piensa en ello: en nuestro archivo de index, podr&iacute;amos haber entregado el objeto&nbsp;<em>router</em>&nbsp;al servidor, y el servidor hubiese llamado a la funci&oacute;n&nbsp;<em>route</em>&nbsp;de este objeto.</p>\n\n<p style="text-align:justify">De esta manera, podr&iacute;amos haber pasado una&nbsp;<em>cosa</em>, y el servidor hubiese usado esa cosa para&nbsp;<em>hacer</em>&nbsp;algo. Oye, &quot;Cosa Router&quot;, &iquest;Podr&iacute;as por favor rutear esto por m&iacute;?</p>\n\n<p style="text-align:justify">Pero el servidor no necesita la cosa. S&oacute;lo necesita&nbsp;<em>hacer algo</em>, y para que algo se haga, no necesitas cosas para nada, s&oacute;lo necesitas&nbsp;<em>acciones</em>. No necesitas<em>sustantivos</em>, sino que necesitas&nbsp;<em>verbos</em>.</p>\n\n<p style="text-align:justify">Entender este cambio de mentalidad fundamental que est&aacute; en el n&uacute;cleo de esta idea es lo que realmente me hizo entender la programaci&oacute;n funcional.</p>\n\n<p style="text-align:justify">Y lo entend&iacute; mientras le&iacute;a la obra maestra de Steve Yegge (en Ingl&eacute;s)&nbsp;<a href="http://steve-yegge.blogspot.com/2006/03/execution-in-kingdom-of-nouns.html">Ejecuci&oacute;n en el Reino de los Sustantivos</a>. Anda, l&eacute;ela, por favor. Es uno de los mejores art&iacute;culos relacionados con el software que haya tenido el placer de encontrar.</p>\n\n<h3>Ruteando a los verdaderos manipuladores de peticiones</h3>\n\n<p style="text-align:justify">Volviendo al tema. Nuestro servidor HTTP y nuestro router de peticiones son ahora los mejores amigos y conversan entre ellos, tal y como pretendimos.</p>\n\n<p style="text-align:justify">Por supuesto, esto no es suficiente, &quot;Rutear&quot; significa que nosotros queremos manipular las peticiones a distintas URLs de manera, diferente. Nos gustar&iacute;a tener la &quot;l&oacute;gicas de negocios&quot; para peticiones de&nbsp;<em>/inicio</em>&nbsp;manejadas en otra funci&oacute;n, distinta a la que maneja las peticiones para&nbsp;<em>/subir</em>.</p>\n\n<p style="text-align:justify">Por ahora, el ruteo &quot;termina&quot; en el router, y el router no es el lugar donde se est&aacute; &quot;haciendo algo&quot; con las peticiones, ya que esto no escalar&iacute;a bien una vez que nuestra aplicaci&oacute;n se haga m&aacute;s compleja.</p>\n\n<p style="text-align:justify">Llamemos a estas funciones, donde las peticiones est&aacute;n siendo ruteadas,<em>manipuladores de peticiones</em>&nbsp;(&oacute; request handlers). Y procedamos con &eacute;stos ahora, porque, a menos que no los tengamos en su lugar, no hay tiene mucho sentido en hacer nada con el router por ahora.</p>\n\n<p style="text-align:justify">Nueva parte de la aplicaci&oacute;n, significa nuevo m&oacute;dulo - no creo que haya sorpresa ac&aacute;. Creemos un m&oacute;dulo llamado requestHandlers (por manipuladores de petici&oacute;n), agreguemos un funci&oacute;n de ubicaci&oacute;n para cada manipulador de petici&oacute;n, y exportemos estos como m&eacute;todos para el m&oacute;dulo:</p>\n\n<pre><code>\nfunction iniciar() {\n  console.log(&quot;Manipulador de petici&oacute;n &#39;iniciar&#39; ha sido llamado.&quot;);\n}\n\nfunction subir() {\n  console.log(&quot;Manipulador de petici&oacute;n &#39;subir&#39; ha sido llamado.&quot;);\n}\n\nexports.iniciar = iniciar;\nexports.subir = subir;\n</code></pre>\n\n<p style="text-align:justify">Esto nos permitir&aacute; atar los manipuladores de petici&oacute;n al router, d&aacute;ndole a nuestro router algo que rutear.</p>\n\n<p style="text-align:justify">Llegado a este punto, necesitamos tomar una decisi&oacute;n: &iquest;Ingresaremos las rutas del m&oacute;dulo requestHandlers dentro del c&oacute;digo del router (hard-coding), o queremos algo m&aacute;s de dependencia por inyecci&oacute;n? Aunque en la dependencia por inyecci&oacute;n, como cualquier otro patr&oacute;n, no deber&iacute;a ser usada simplemente por usarla, en este caso tiene sentido acoplar el router d&eacute;bilmente a sus manipuladores de petici&oacute;n, as&iacute;, de esta manera hacemos que el router sea reutilizable.</p>\n\n<p style="text-align:justify">Esto significa que necesitamos pasar los manipuladores de petici&oacute;n desde nuestro server al router, pero esto se siente equivocado, dado que, &iquest;Por Qu&eacute; tenemos que hacer el camino largo y entregar los manipuladores desde el archivo principal al servidor y de ah&iacute; al router?</p>\n\n<p style="text-align:justify">&iquest;C&oacute;mo vamos a pasarlos? Ahora tenemos s&oacute;lo dos manipuladores, pero en una aplicaci&oacute;n real, este n&uacute;mero se va a incrementar y variar, y nosotros no queremos estar a cada momento mapeando peticiones a manipuladores cada vez que una nueva URL o manipulador de petici&oacute;n sea agregado. Y si tenemos un c&oacute;digo del tipo&nbsp;<em>if peticion == x then llama manipulador y</em>&nbsp;en el router, esto se pondr&iacute;a cada vez m&aacute;s feo.</p>\n\n<p style="text-align:justify">&iquest;Un n&uacute;mero variable de &iacute;tems, cada uno de ellos mapeados a un string? (en este caso la URL requerida) Bueno, esto suena como que un array asociativo har&iacute;a el truco.</p>\n\n<p style="text-align:justify">Bueno, este descubrimiento es obscurecido por el hecho que JavaScript no provee arrays asociativos - &iquest;o s&iacute;? !Resulta que lo que necesitamos usar son objetos si necesitamos un array asociativo!</p>\n\n<p style="text-align:justify">Una buena introducci&oacute;n a esto est&aacute; (en Ingl&eacute;s) en<a href="http://msdn.microsoft.com/en-us/magazine/cc163419.aspx">http://msdn.microsoft.com/en-us/magazine/cc163419.aspx</a>, D&eacute;jame citarte la parte relevante:</p>\n\n<blockquote>\n<p style="text-align:justify">En C++ o C#, cuando hablamos acerca de objetos, nos estamos refiriendo a instancias de clases de estructuras. Los objetos tienen distintas propiedades y m&eacute;todos, dependiendo en las plantillas (esto es, las clases) desde donde &eacute;stos sean instanciados. Este no es el caso con los objetos de JavaScript. En JavaScript, los objetos son s&oacute;lo colecciones de pares nombre/valor - piensa en un objeto JavaScript como en un diccionario con llaves de string.</p>\n</blockquote>\n\n<p style="text-align:justify">Si los objetos JavaScript son s&oacute;lo colecciones de pares nombre/valor, &iquest;C&oacute;mo pueden entonces tener m&eacute;todos? Bueno, los valores pueden ser strings, n&uacute;meros, etc... &iexcl;O Funciones!</p>\n\n<p style="text-align:justify">OK, Ahora, volviendo finalmente al c&oacute;digo. Hemos decidido que queremos pasar la lista de requestHandlers (manipuladores de petici&oacute;n) como un objeto, y para lograr este acoplamiento d&eacute;bil, necesitamos usar la t&eacute;cnica de inyectar este objeto en la&nbsp;<em>route()</em>&nbsp;(ruta).</p>\n\n<p style="text-align:justify">Empecemos con poner el objeto en nuestro archivo principal&nbsp;<em>index.js</em>:</p>\n\n<pre><code>\nvar server = require(&quot;./server&quot;);\nvar router = require(&quot;./router&quot;);\nvar requestHandlers = require(&quot;./requestHandlers&quot;);\n\nvar handle = {}\nhandle[&quot;/&quot;] = requestHandlers.iniciar;\nhandle[&quot;/iniciar&quot;] = requestHandlers.iniciar;\nhandle[&quot;/subir&quot;] = requestHandlers.subir;\n\nserver.iniciar(router.route, handle);\n</code></pre>\n\n<p style="text-align:justify">(N. del T.: Se Opta por dejar los verbos en Ingl&eacute;s &#39;route&#39; para rutear y &#39;handle&#39; para manipular).</p>\n\n<p style="text-align:justify">Aunque&nbsp;<em>handle</em>&nbsp;es m&aacute;s una &quot;cosa&quot; (una colecci&oacute;n de manipuladores de petici&oacute;n), Propongo que lo nombremos como un verbo, ya que esto resultar&aacute; en una expresi&oacute;n fluida en nuestro router, como veremos a continuaci&oacute;n:</p>\n\n<p style="text-align:justify">Como puedez ver, es realmente simple mapear diferentes URLs al mismo manipulador de peticiones: Mediante la adici&oacute;n de un par llave/valor de&nbsp;<em>&quot;/&quot;</em>&nbsp;y<em>requestHandlers.iniciar</em>, podemos expresar en una forma agradable y limpia que no s&oacute;lo peticiones a&nbsp;<em>/start</em>, sino que tambi&eacute;n peticiones a&nbsp;<em>/</em>&nbsp;pueden ser manejadas por el manipulador&nbsp;<em>inicio</em>.</p>\n\n<p style="text-align:justify">Despu&eacute;s de definir nuestro objeto, se lo pasamos al servidor como un par&aacute;metro adicional. Modifiquemos nuestro&nbsp;<em>server.js</em>&nbsp;para hacer uso de este:</p>\n\n<pre><code>\nvar http = require(&quot;http&quot;);\nvar url = require(&quot;url&quot;);\n\nfunction iniciar(route, handle) {\n  function onRequest(request, response) {\n    var pathname = url.parse(request.url).pathname;\n    console.log(&quot;Peticion para &quot; + pathname + &quot; recibida.&quot;);\n\n    route(handle, pathname);\n\n    response.writeHead(200, {&quot;Content-Type&quot;: &quot;text/html&quot;});\n    response.write(&quot;Hola Mundo&quot;);\n    response.end();\n  }\n\n  http.createServer(onRequest).listen(8888);\n  console.log(&quot;Servidor Iniciar.&quot;);\n}\n\nexports.iniciar = iniciar;\n</code></pre>\n\n<p style="text-align:justify">Lo que hacemos aqu&iacute;, es chequear si un manipulador de peticiones para una ruta dada existe, y si es as&iacute;, simplemente llamamos a la funci&oacute;n adecuada. Dado que podemos acceder a nuestras funciones manipuladoras de petici&oacute;n desde nuestro objeto de la misma manera que hubi&eacute;semos podido acceder a un elemento de un array asociativo, es que tenemos la expresi&oacute;n fluida<em>handle[pathname]();</em>&nbsp;de la que habl&eacute; antes, que en otras palabras es: &quot;Por favor,<em>handle</em>&nbsp;(maneja) este(a)&nbsp;<em>pathname</em>&nbsp;(ruta)&quot;.</p>\n\n<p style="text-align:justify">Bien, &iexcl;Esto es todo lo que necesitamos para atar servidor, router y manipuladores de peticiones juntos! Una vez que arranquemos nuestra aplicaci&oacute;n y hagamos una petici&oacute;n en nuestro browser de<a href="http://localhost:8888/iniciar" rel="nofollow">http://localhost:8888/iniciar</a>, vamos a probar que el manipulador de petici&oacute;n correcto fue, de hecho, llamado:</p>\n\n<pre><code>\nServidor Iniciado.\nPeticion para /iniciar recibida.\n\nA punto de rutear una petici&oacute;n para /iniciar\nManipulador de peticion &#39;iniciar&#39; ha sido llamado.\n</code></pre>\n\n<h4>Haciendo que los Manipuladores de Peticiones respondan</h4>\n\n<p style="text-align:justify">Muy bien. Ahora, si tan solo los manipuladores de petici&oacute;n pudieran enviar algo de vuelta al browser, esto ser&iacute;a mucho mejor, &iquest;cierto?</p>\n\n<p style="text-align:justify">Recuerda, que el &quot;Hola Mundo&quot; que tu browser despliega ante una petici&oacute;n de una p&aacute;gina, a&uacute;n viene desde la funci&oacute;n&nbsp;<em>onRequest</em>&nbsp;en nuestro archivo&nbsp;<em>server.js</em>.</p>\n\n<p style="text-align:justify">&quot;Manipular Peticiones&quot; no significa otra cosa que &quot;Responder a las Peticiones&quot; despu&eacute;s de todo, as&iacute; que necesitamos empoderar a nuestros manipuladores de peticiones para hablar con el browser de la misma manera que la funci&oacute;n<em>onRequest</em>&nbsp;lo hace.</p>\n\n<h4>&iquest;C&oacute;mo no se debe hacer esto?</h4>\n\n<p style="text-align:justify">La aproximaci&oacute;n directa que nosotros - desarrolladores con un trasfondo en PHP o Ruby - quisieramos seguir es de hecho conducente a errores: Trabaja de manera espectacular al principio y parece tener mucho sentido, y de pronto, las cosas se arruinan en el momento menos esperado.</p>\n\n<p style="text-align:justify">A lo que me refiero con &quot;aproximaci&oacute;n directa&quot; es esto: hacer que los manipuladores de petici&oacute;n retornen -&nbsp;<em>return()</em>&nbsp;- el contenido que ellos quieran desplegar al usuario, y luego, enviar esta data de respuesta en la funci&oacute;n<em>onRequest</em>&nbsp;de vuelta al usuario.</p>\n\n<p style="text-align:justify">Tan s&oacute;lo hagamos esto, y luego, veamos por qu&eacute; esto no es tan buena idea.</p>\n\n<p style="text-align:justify">Empecemos con los manipuladores de petici&oacute;n y hag&aacute;moslos retornar, lo que nosotros queremos desplegar en el browser. Necesitamos modificar<em>requestHandlers.js</em>&nbsp;a lo siguiente:</p>\n\n<pre><code>\nfunction iniciar() {\n  console.log(&quot;Manipulador de peticion &#39;iniciar&#39; fue llamado.&quot;);\n  return &quot;Hola Iniciar&quot;;\n}\n\nfunction subir() {\n  console.log(&quot;Manipulador de peticion &#39;subir&#39; fue llamado.&quot;);\n  return &quot;Hola Subir&quot;;\n}\n\nexports.iniciar = iniciar;\nexports.subir = subir;\n</code></pre>\n\n<p style="text-align:justify">Bien. De todas maneras, el router necesita retornar al servidor lo que los manipuladores de petici&oacute;n le retornaron a &eacute;l. Necesitamos entonces editar<em>router.js</em>&nbsp;de esta manera:</p>\n\n<pre><code>\nfunction route(handle, pathname) {\n  console.log(&quot;A punto de rutear una peticion para &quot; + pathname);\n  if (typeof handle[pathname] === &#39;function&#39;) {\n    return handle[pathname]();\n  } else {\n    console.log(&quot;No se encontro manipulador para &quot; + pathname);\n    return &quot;404 No Encontrado&quot;;\n  }\n}\n\nexports.route = route;\n</code></pre>\n\n<p style="text-align:justify">Como puedes ver, nosotros tambi&eacute;n retornaremos alg&uacute;n texto si la petici&oacute;n no es ruteada.</p>\n\n<p style="text-align:justify">Por &uacute;ltimo, pero no menos importante, necesitamos refactorizar nuestro servidor para hacerlo responder al browser con el contenido que los manipuladores de petici&oacute;n le retornaron via el router, transformando de esta manera a&nbsp;<em>server.js</em>&nbsp;en:</p>\n\n<pre><code>\nvar http = require(&quot;http&quot;);\nvar url = require(&quot;url&quot;);\n\nfunction iniciar(route, handle) {\n  function onRequest(request, response) {\n    var pathname = url.parse(request.url).pathname;\n    console.log(&quot;Peticion para &quot; + pathname + &quot; recibida.&quot;);\n\n    response.writeHead(200, {&quot;Content-Type&quot;: &quot;text/html&quot;});\n    var content = route(handle, pathname)\n    response.write(content);\n    response.end();\n  }\n\n  http.createServer(onRequest).listen(8888);\n  console.log(&quot;Servidor Iniciado.&quot;);\n}\n\nexports.iniciar = iniciar;\n</code></pre>\n\n<p style="text-align:justify">Si nosotros arrancamos nuestra aplicaci&oacute;n re-escrita, todo va a funcionar a las mil maravillas: Hacerle una petici&oacute;n a&nbsp;<a href="http://localhost:8888/iniciar" rel="nofollow">http://localhost:8888/iniciar</a>&nbsp;resulta en &quot;Hola Iniciar&quot; siendo desplegado en el browser, hacerle una petici&oacute;n a<a href="http://localhost:8888/subir" rel="nofollow">http://localhost:8888/subir</a>&nbsp;nos da &quot;Hola Subir&quot;, y la petici&oacute;n a<a href="http://localhost:8888/foo" rel="nofollow">http://localhost:8888/foo</a>&nbsp;produce &quot;404 No Encontrado&quot;.</p>\n\n<p style="text-align:justify">OK, entonces &iquest;Por Qu&eacute; esto es un problema? La respuesta corta es: debido a que si uno de los manipuladores de petici&oacute;n quisiera hacer uso de una operaci&oacute;n&nbsp;<em>no-bloqueante</em>&nbsp;(non-blocking) en el futuro, entonces esta configuraci&oacute;n, como la tenemos, ser&iacute;a problem&aacute;tica.</p>\n\n<p style="text-align:justify">Tom&eacute;mosnos alg&uacute;n tiempo para la respuesta larga.</p>\n\n<h4>Bloqueante y No-Bloqueante</h4>\n\n<p style="text-align:justify">Como se dijo, los problemas van a surgir cuando nosotros incluyamos operaciones no-bloqueantes en los manipuladores de petici&oacute;n. Pero hablemos acerca de las operaciones bloqueantes primero, luego, acerca de las operaciones no-bloqueantes.</p>\n\n<p style="text-align:justify">Y, en vez de intentar explicar que es lo que significa &quot;bloqueante&quot; y &quot;no bloqueante&quot;, demostremos nosotros mismo que es lo que sucede su agregamos una operaci&oacute;n bloqueante a nuestros manipuladores de petici&oacute;n.</p>\n\n<p style="text-align:justify">Para hacer esto, modificaremos nuestro manipulador de petici&oacute;n&nbsp;<em>iniciar</em>&nbsp;para hacer una espera de 10 segundos antes de retornar su string &quot;Hola Iniciar&quot;. Ya que no existe tal cosa como&nbsp;<em>sleep()</em>&nbsp;en JavaScript, usaremos un hack ingenioso para ello.</p>\n\n<p style="text-align:justify">Por favor, modifica&nbsp;<em>requestHandlers.js</em>&nbsp;como sigue:</p>\n\n<pre><code>\nfunction iniciar() {\n  console.log(&quot;Manipulador de peticion &#39;iniciar&#39; fue llamado.&quot;);\n\n  function sleep(milliSeconds) {  \n    // obten la hora actual\n    var startTime = new Date().getTime();\n    // atasca la cpu\n    while (new Date().getTime() &lt; startTime + milliSeconds); \n  }\n\n  sleep(10000);\n  return &quot;Hola Iniciar&quot;;\n}\n\nfunction subir() {\n  console.log(&quot;Manipulador de peticion &#39;subir&#39; fue llamado.&quot;);\n  return &quot;Hola Subir&quot;;\n}\n\nexports.iniciar = iniciar;\nexports.subir = subir;\n</code></pre>\n\n<p style="text-align:justify">Dejemos claros que es lo que esto hace: Cuando la funci&oacute;n&nbsp;<em>iniciar()</em>&nbsp;es llamada, Node.js espera 10 segundos y s&oacute;lo ah&iacute; retorna &quot;Hola Iniciar&quot;. Cuando est&aacute; llamando a&nbsp;<em>subir()</em>, retorna inmediatamente, la misma manera que antes.</p>\n\n<p style="text-align:justify">(Por supuesto la idea es que te imagines que, en vez de dormir por 10 segundos, exista una operaci&oacute;n bloqueante verdadera en&nbsp;<em>iniciar()</em>, como alg&uacute;n tipo de calculo de largo aliento.)</p>\n\n<p style="text-align:justify">Ve&aacute;mos qu{e es lo que este cambio hace.</p>\n\n<p style="text-align:justify">Como siempre, necesitamos reiniciar nuestro servidor. Esta vez, te pido sigas un &quot;protocolo&quot; un poco m&aacute;s complejo de manera de ver que sucede: Primero, abre dos ventanas de browser o tablas. En la primera ventana, por favor ingresa<a href="http://localhost:8888/iniciar" rel="nofollow">http://localhost:8888/iniciar</a>&nbsp;en la barra de direcciones, pero no abras a&uacute;n esta url!</p>\n\n<p style="text-align:justify">En la barra de direcciones de la segunda ventana de browser, ingresa<a href="http://localhost:8888/subir" rel="nofollow">http://localhost:8888/subir</a>&nbsp;y, nuevamente, no presiones enter todav&iacute;a.</p>\n\n<p style="text-align:justify">Ahora, haz lo siguiente: presiona enter en la primera ventana (&quot;/iniciar&quot;), luego, r&aacute;pidamente cambia a la segunda ventana (&quot;/subir&quot;) y presiona enter, tambi&eacute;n.</p>\n\n<p style="text-align:justify">Lo que veremos ser&aacute; lo siguiente: La URL /inicio toma 10 segundos en cargar, tal cual esperamos. pero la URL /subir&nbsp;<em>tambi&eacute;n</em>&nbsp;toma 10 segundos para cargar, &iexcl;Aunque no hay definido un&nbsp;<em>sleep()</em>&nbsp;en el manipulador de peticiones correspondiente!</p>\n\n<p style="text-align:justify">&iquest;Por Qu&eacute;? simple, porque&nbsp;<em>inicio()</em>&nbsp;contiene una operaci&oacute;n bloqueante. En otras palabras &quot;Est&aacute; bloqueando el trabajo de cualquier otra cosa&quot;.</p>\n\n<p style="text-align:justify">He ah&iacute; el problema, porque, el dicho es:&nbsp;<em>&quot;En Node.js, todo corre en paralelo, excepto tu c&oacute;digo&quot;</em>.</p>\n\n<p style="text-align:justify">Lo que eso significa es que Node.js puede manejar un mont&oacute;n de temas concurrentes, pero no lo hace dividiendo todo en hilos (threads) - de hecho, Node.js corre en un s&oacute;lo hilo. En vez de eso, lo hace ejecutando un loop de eventos, y nosotros, los desarrolladores podemos hacer uso de esto - Nosotros debemos evitar operaciones bloqueantes donde sea posible, y utilizar operaciones no-bloqueantes en su lugar.</p>\n\n<p style="text-align:justify">Lo que&nbsp;<em>exec()</em>&nbsp;hace, es que, ejecuta un commando de shell desde dentro de Node.js. En este ejemplo, vamos a usarlo para obtener una lista de todos los archivos del directorio en que nos encontramos (&quot;ls -lah&quot;), permiti&eacute;ndonos desplegar esta lista en el browser de un usuario que este peticionando la URL<em>/inicio</em>.</p>\n\n<p style="text-align:justify">Lo que el c&oacute;digo hace es claro: Crea una nueva variable&nbsp;<em>content()</em>&nbsp;(con el valor incial de &quot;vacio&quot;), ejecuta &quot;ls -lah&quot;, llena la variable con el resultado, y lo retorna.</p>\n\n<p style="text-align:justify">Como siempre, arrancaremos nuestra aplicaci&oacute;n y visitaremos<a href="http://localhost:8888/iniciar" rel="nofollow">http://localhost:8888/iniciar</a>.</p>\n\n<p style="text-align:justify">Lo que carga una bella p&aacute;gina que despliega el string &quot;vacio&quot;. &iquest;Qu&eacute; es lo que est&aacute; incorrecto ac&aacute;?</p>\n\n<p style="text-align:justify">Bueno, como ya habr&aacute;n adivinado,&nbsp;<em>exec()</em>&nbsp;hace su magia de una manera no-bloqueante. Buena cosa esto, porque de esta manera podemos ejecutar operaciones de shell muy caras en ejecuci&oacute;n (como, por ejemplo, copiar archivos enormes o cosas similares) sin tener que forzar a nuestra aplicaci&oacute;n a detenerse como lo hizo la operaci&oacute;n&nbsp;<em>sleep</em>.</p>\n\n<p style="text-align:justify">(Si quieres probar esto, reemplaza &quot;ls -lah&quot; con una operaci&oacute;n m&aacute;s cara como &quot;find /&quot;).</p>\n\n<p style="text-align:justify">Pero no estar&iacute;amos muy felices si nuestra elegante aplicaci&oacute;n no bloqueante no desplegara alg&uacute;n resultado, &iquest;cierto?.</p>\n\n<p style="text-align:justify">Bueno, entonces, arregl&eacute;mosla. Y mientras estamos en eso, tratemos de entender por qu&eacute; la arquitectura actual no funciona.</p>\n\n<p style="text-align:justify">El problema es que&nbsp;<em>exec()</em>, para poder trabajar de manera no-bloqueante, hace uso de una funci&oacute;n de callback.</p>\n\n<p style="text-align:justify">En nuestro ejemplo, es una funci&oacute;n an&oacute;nima, la cual es pasada como el segundo par&aacute;metro de la llamada a la funci&oacute;n&nbsp;<em>exec()</em>:</p>\n\n<pre><code>\nfunction (error, stdout, stderr) {\n  content = stdout;\n}\n</code></pre>\n\n<p style="text-align:justify">Y aqu&iacute; yace la ra&iacute;z de nuestro problema: Nuestro c&oacute;digo es ejecutado de manera sincr&oacute;nica, lo que significa que inmediatamente despu&eacute;s de llamar a&nbsp;<em>exec()</em>, Node.js contin&uacute;a ejecutando&nbsp;<em>return content;</em>. En este punto,&nbsp;<em>content</em>&nbsp;todav&iacute;a est&aacute; vac&iacute;o, dado el hecho que la funci&oacute;n de callback pasada a&nbsp;<em>exec()</em>&nbsp;no ha sido a&uacute;n llamada - porque&nbsp;<em>exec()</em>&nbsp;opera de manera asincr&oacute;nica.</p>\n\n<p style="text-align:justify">Ahora, &quot;ls -lah&quot; es una operaci&oacute;n sencilla y r&aacute;pida (a menos, claro, que hayan millones de archivos en el directorio). Por lo que es relativamente exped&iacute;to llamar al callback - pero de todas maneras esto sucede de manera asincr&oacute;nica.</p>\n\n<p style="text-align:justify">Esto se hace m&aacute;s obvio al tratar con un comando m&aacute;s costoso: &quot;find /&quot; se toma un minuto en mi maquina, pero si reemplazo &quot;ls -lah&quot; con &quot;find /&quot; en el manipulador de peticiones, yo recibo inmediatamente una respuesta HTTP cuando abro la URL /inicio - est&aacute; claro que&nbsp;<em>exec()</em>&nbsp;hace algo en el trasfondo, mientras que Node.js mismo contin&uacute;a con el flujo de la aplicaci&oacute;n, y podemos asumir que la funci&oacute;n de callback que le entregamos a&nbsp;<em>exec()</em>&nbsp;ser&aacute; llamada s&oacute;solo cuando el comando &quot;find /&quot; haya terminado de correr.</p>\n\n<p style="text-align:justify">Pero, &iquest;C&oacute;mo podemos alcanzar nuestra meta, la de mostrarle al usuario una lista de archivos del directorio actual?</p>\n\n<p style="text-align:justify">Bueno, despu&eacute;s de aprender como&nbsp;<em>no</em>&nbsp;hacerlo, discutamos c&oacute;mo hacer que nuestros manipuladores de petici&oacute;n respondan a los requirimientos del browser de la manera correcta.</p>\n\n<h4>Respondiendo a los Manipuladores de Petici&oacute;n con Operaciones No Bloqueantes</h4>\n\n<p style="text-align:justify">Acabo de usar la frase &quot;la manera correcta&quot;. Cosa Peligrosa. Frecuentemente, no existe una &uacute;nica &quot;manera correcta&quot;.</p>\n\n<p style="text-align:justify">Pero una posible soluci&oacute;n para esto, frecuente con Node.js es pasar funciones alrededor. Examinemos esto.</p>\n\n<p style="text-align:justify">Ahora mismo, nuestra aplicaci&oacute;n es capaz de transportar el contenido desde los manipuladores de petici&oacute;n al servidor HTTP retorn&aacute;ndolo hacia arriba a trav&eacute;s de las capas de la aplicaci&oacute;n (manipulador de petici&oacute;n -&gt; router -&gt; servidor).</p>\n\n<p style="text-align:justify">Nuestro nuevo enfoque es como sigue: en vez de llevar el contenido al servidor, llevaremos el servidor al contenido. Para ser m&aacute;s precisos, inyectaremos el objeto&nbsp;<em>response</em>&nbsp;(respuesta) (desde nuestra funci&oacute;n de callback de servidor<em>onRequest()</em>) a trav&eacute;s de nuestro router a los manipuladores de petici&oacute;n. Los manipuladores ser&aacute;n capaces de usar las funciones de este objeto para responder a las peticiones ellos mismos.</p>\n\n<p style="text-align:justify">Suficientes explicaciones, aqu&iacute; hay una receta paso a paso de como cambiar nuestra aplicaci&oacute;n.</p>\n\n<p style="text-align:justify">Empecemos con nuestro servidor,&nbsp;<em>server.js</em>:</p>\n\n<pre><code>\nvar http = require(&quot;http&quot;);\nvar url = require(&quot;url&quot;);\n\nfunction iniciar(route, handle) {\n  function onRequest(request, response) {\n    var pathname = url.parse(request.url).pathname;\n    console.log(&quot;Request for &quot; + pathname + &quot; received.&quot;);\n\n    route(handle, pathname, response);\n  }\n\n  http.createServer(onRequest).listen(8888);\n  console.log(&quot;Servidor Iniciado.&quot;);\n}\n\nexports.iniciar = iniciar;\n</code></pre>\n\n<p style="text-align:justify">En vez de esperar un valor de respuesta desde la funci&oacute;n&nbsp;<em>route()</em>, pas&eacute;mosle un tercer par&aacute;metro: nuestro objeto&nbsp;<em>response</em>. Es m&aacute;s, removamos cualquier llamada a&nbsp;<em>response</em>&nbsp;desde el manipulador&nbsp;<em>onRequest()</em>, ya que ahora esperamos que&nbsp;<em>route</em>&nbsp;se haga cargo de esto.</p>\n\n<p style="text-align:justify">Ahora viene&nbsp;<em>router.js</em>:</p>\n\n<pre><code>\nfunction route(handle, pathname, response) {\n  console.log(&quot;About to route a request for &quot; + pathname);\n  if (typeof handle[pathname] === &#39;function&#39;) {\n    handle[pathname](response);\n  } else {\n    console.log(&quot;No request handler found for &quot; + pathname);\n    response.writeHead(404, {&quot;Content-Type&quot;: &quot;text/html&quot;});\n    response.write(&quot;404 Not found&quot;);\n    response.end();\n  }\n}\n\nexports.route = route;\n</code></pre>\n\n<p style="text-align:justify">Mismo patr&oacute;n: En vez de esperar que retorne un valor desde nuestros manipuladores de petici&oacute;n, nosotros traspasamos el objeto&nbsp;<em>response</em>.</p>\n\n<p style="text-align:justify">Si no hay manipulador de petici&oacute;n para utilizar, ahora nos hacemos cargo de responder con adecuados encabezado y cuerpo &quot;404&quot;.</p>\n\n<p style="text-align:justify">Y por &uacute;ltimo, pero no menos importante, modificamos a&nbsp;<em>requestHandlers.js</em>&nbsp;(el archivo de manipuladores de petici&oacute;n).</p>\n\n<pre><code>\nvar exec = require(&quot;child_process&quot;).exec;\n\nfunction iniciar(response) {\n  console.log(&quot;Manipulador de petici&oacute;n &#39;iniciar&#39; fue llamado.&quot;);\n\n  exec(&quot;ls -lah&quot;, function (error, stdout, stderr) {\n    response.writeHead(200, {&quot;Content-Type&quot;: &quot;text/html&quot;});\n    response.write(stdout);\n    response.end();\n  });\n}\n\nfunction upload(response) {\n  console.log(&quot;Manipulador de petici&oacute;n &#39;subir&#39; fue llamado.&quot;);\n  response.writeHead(200, {&quot;Content-Type&quot;: &quot;text/html&quot;});\n  response.write(&quot;Hola Subir&quot;);\n  response.end();\n}\n\nexports.iniciar = iniciar;\nexports.subir = subir;\n</code></pre>\n\n<p style="text-align:justify">Nuestras funciones manipuladoras necesitan aceptar el par&aacute;metro de respuesta<em>response</em>, y de esta manera, hacer uso de &eacute;l de manera de responder a la petici&oacute;n directamente.</p>\n\n<p style="text-align:justify">El manipulador&nbsp;<em>iniciar</em>&nbsp;responder&aacute; con el callback an&oacute;nimo&nbsp;<em>exec()</em>, y el manipulador&nbsp;<em>subir</em>&nbsp;replicar&aacute; simplemente con &quot;Hola Subir&quot;, pero esta vez, haciendo uso del objeto&nbsp;<em>response</em>.</p>\n\n<p style="text-align:justify">Si arrancamos nuestra aplicaci&oacute;n de nuevo (<em>node index.js</em>), esto deber&iacute;a funcionar de acuerdo a lo esperado.</p>\n\n<p style="text-align:justify">Si quieres probar que la operaci&oacute;n cara dentro de&nbsp;<em>/iniciar</em>&nbsp;no bloquear&aacute; m&aacute;s las peticiones para&nbsp;<em>/subir</em>&nbsp;que sean respondidas inmediatamente, entonces modifica tu archivo&nbsp;<em>requestHandlers.js</em>&nbsp;como sigue:</p>\n\n<p style="text-align:justify">&nbsp;</p>\n\n<pre><code>\nvar exec = require(&quot;child_process&quot;).exec;\n\nfunction iniciar(response) {\n  console.log(&quot;Manipulador de petici&oacute;n &#39;iniciar&#39; fue llamado.&quot;);\n\n  exec(&quot;find /&quot;,\n    { timeout: 10000, maxBuffer: 20000*1024 },\n    function (error, stdout, stderr) {\n      response.writeHead(200, {&quot;Content-Type&quot;: &quot;text/html&quot;});\n      response.write(stdout);\n      response.end();\n    });\n}\n\nfunction subir(response) {\n  console.log(&quot;Manipulador de petici&oacute;n &#39;subir&#39; fue llamado.&quot;);\n  response.writeHead(200, {&quot;Content-Type&quot;: &quot;text/html&quot;});\n  response.write(&quot;Hola Subir&quot;);\n  response.end();\n}\n\nexports.iniciar = iniciar;\nexports.subir = subir;\n</code></pre>\n\n<p style="text-align:justify">Esto har&aacute; que las peticiones HTTP a&nbsp;<a href="http://localhost:8888/iniciar" rel="nofollow">http://localhost:8888/iniciar</a>&nbsp;tomen al menos 10 segundos, pero, las peticiones a&nbsp;<a href="http://localhost:8888/subir" rel="nofollow">http://localhost:8888/subir</a>&nbsp;sean respondidas inmediatamente, incluso si&nbsp;<em>/iniciar</em>&nbsp;todav&iacute;a est&aacute; en proceso.</p>\n\n<h4>Sirviendo algo &uacute;til</h4>\n\n<p style="text-align:justify">Hasta ahora, lo que hemos hecho es todo simp&aacute;tico y bonito, pero no hemos creado a&uacute;n valor para los clientes de nuestro sitio web ganador de premios.</p>\n\n<p style="text-align:justify">Nuestro servidor, router y manipuladores de petici&oacute;n est&aacute;n en su lugar, as&iacute; que ahora podemos empezar a agregar contenido a nuestro sitio que permitir&aacute; a nuestros usuarios interactuar y andar a trav&eacute;s de los casos de uso de elegir un archivo, subir este archivo, y ver el archivo subido en el browser. Por simplicidad asumiremos que s&ograve;lo los archivos de imagen van a ser subidos y desplegados a trav&eacute;s de la aplicaci&oacute;n.</p>\n\n<p style="text-align:justify">OK, ve&aacute;moslo paso a paso, pero ahora, con la mayor&iacute;a de las t&eacute;cnicas y principios de JavaScript explicadas, aceler&eacute;moslo un poco al mismo tiempo.</p>\n\n<p style="text-align:justify">Aqu&iacute;, paso a paso significa a grandes razgos dos pasos: Vamos a ver primero como manejar peticiones POST entrantes (pero no subidas de archivos), y en un segundo paso, haremos uso de un modulo externo de Node.js para la manipulaci&oacute;n de subida de archivos. He escogido este alcance por dos razones:</p>\n\n<p style="text-align:justify">Primero, manejar peticiones POST b&aacute;sicas es relativamente simple con Node.js, pero a&uacute;n nos ense&ntilde;a lo suficiente para que valga la pena ejercitarlo.&nbsp;<br />\nSegundo, manejar las subidas de archivos (i.e. peticiones POST multiparte)&nbsp;<em>no es</em>simple con Node.js, consecuentemente est&aacute; m&aacute;s all&aacute; del alcance de este tutorial, pero el aprender a usar un modulo externo es una lecci&oacute;n en s&iacute; misma que tiene sentido de ser inclu&iacute;da en un tutorial de principiantes.</p>\n\n<h4>Manejando Peticiones POST</h4>\n\n<p style="text-align:justify">Mantengamos esto rid&iacute;culamente simple: Presentaremos un &aacute;rea de texto que pueda ser llenada por el usuario y luego enviada al servidor en una petici&oacute;n POST. Una vez recibida y manipulada esta petici&oacute;n, despliegaremos el contenido del &aacute;rea de texto.</p>\n\n<p style="text-align:justify">El HTML para el formulario de esta &aacute;rea de texto necesita ser servida por nuestro manipulador de petici&oacute;n&nbsp;<em>/iniciar</em>, as&iacute; que agregu&eacute;moslo de inmediato. En el archivo&nbsp;<em>requestHandlers.js</em>:</p>\n\n<pre><code>\nfunction iniciar(response) {\n  console.log(&quot;Manipulador de peticiones &#39;iniciar&#39; fue llamado.&quot;);\n\n  var body = &#39;&lt;html&gt;&#39;+\n    &#39;&lt;head&gt;&#39;+\n    &#39;&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; \n        charset=UTF-8&quot; /&gt;&#39;+\n    &#39;&lt;/head&gt;&#39;+\n    &#39;&lt;body&gt;&#39;+\n    &#39;&lt;form action=&quot;/subir&quot; method=&quot;post&quot;&gt;&#39;+\n    &#39;&lt;textarea name=&quot;text&quot; rows=&quot;20&quot; cols=&quot;60&quot;&gt;&lt;/textarea&gt;&#39;+\n    &#39;&lt;input type=&quot;submit&quot; value=&quot;Submit text&quot; /&gt;&#39;+\n    &#39;&lt;/form&gt;&#39;+\n    &#39;&lt;/body&gt;&#39;+\n    &#39;&lt;/html&gt;&#39;;\n\n    response.writeHead(200, {&quot;Content-Type&quot;: &quot;text/html&quot;});\n    response.write(body);\n    response.end();\n}\n\nfunction upload(response) {\n  console.log(&quot;Manipulador de peticiones &#39;subir&#39; fue llamado.&quot;);\n  response.writeHead(200, {&quot;Content-Type&quot;: &quot;text/html&quot;});\n  response.write(&quot;Hola Subir&quot;);\n  response.end();\n}\n\nexports.iniciar = iniciar;\nexports.subir = subir;\n</code></pre>\n\n<p style="text-align:justify">Ahora, si esto no va a ganar los Webby Awards, entonces no se que podr&iacute;a. Haciendo la petici&oacute;n&nbsp;<a href="http://localhost:8888/iniciar" rel="nofollow">http://localhost:8888/iniciar</a>&nbsp;en tu browser, deber&iacute;as ver un formulario muy simple. Si no, entonces probablemente no has reiniciado la aplicaci&oacute;n.</p>\n\n<p style="text-align:justify">Te estoy escuchando: Tener contenido de vista justo en el manipulador de petici&oacute;n es feo. Sin embargo, he decidido no incluir ese nivel extra de abstracci&oacute;n (esto es, separar la l&oacute;gica de vista y controlador) en este tutorial, ya que pienso que es no nos ense&ntilde;a nada que valga la pena saber en el contexto de JavaScript o Node.js.</p>\n\n<p style="text-align:justify">Mejor usemos el espacio que queda en pantalla para un problema m&aacute;s interesante, esto es, manipular la petici&oacute;n POST que dar&aacute; con nuestro manipulador de petici&oacute;n&nbsp;<em>/subir</em>&nbsp;cuando el usuario env&iacute;e este formulario.</p>\n\n<p style="text-align:justify">Ahora que nos estamos convirtiendo en &quot;novicios expertos&quot;, ya no nos sorprende el hecho que manipular informaci&oacute;n de POST este hecho de una manera no bloqueante, mediante el uso de llamadas asincr&oacute;nicas.</p>\n\n<p style="text-align:justify">Lo que tiene sentido, ya que las peticiones POST pueden ser potencialmente muy grandes - nada detiene al usuario de introducir texto que tenga muchos megabytes de tama&ntilde;o. Manipular este gran volumen de informaci&oacute;n de una vez puede resultar en una operaci&oacute;n bloqueante.</p>\n\n<p style="text-align:justify">Para hacer el proceso completo no bloqueante. Node.js le entrega a nuestro c&oacute;digo la informaci&oacute;n POST en peque&ntilde;os trozos con callbacks que son llamadas ante determinados eventos. Estos eventos son&nbsp;<em>data</em>&nbsp;(un nuevo trozo de informaci&oacute;n POST ha llegado) y&nbsp;<em>end</em>&nbsp;(todos los trozos han sido recibidos).</p>\n\n<p style="text-align:justify">Necesitamos decirle a Node.js que funciones llamar de vuelta cuando estos eventos ocurran. Esto es hecho agregando&nbsp;<em>listeners</em>&nbsp;(N. del T.: Del verbo&nbsp;<em>listen</em>&nbsp;- escuchar) al objeto de petici&oacute;n (<em>request</em>) que es pasado a nuestro callback<em>onRequest</em>&nbsp;cada vez que una petici&oacute;n HTTP es recibida.</p>\n\n<p style="text-align:justify">Esto b&aacute;sicamente luce as&iacute;:</p>\n\n<pre><code>\nrequest.addListener(&quot;data&quot;, function(chunk) {\n    // funcion llamada cuando un nuevo trozo (chunk) \n    // de informacion (data) es recibido.\n});\n\nrequest.addListener(&quot;end&quot;, function() {\n    // funcion llamada cuando todos los trozos (chunks) \n    // de informacion (data) han sido recibidos.\n});    \n</code></pre>\n\n<p style="text-align:justify">La pregunta que surge es d&oacute;nde implementar &eacute;sta l&oacute;gica. Nosotros s&oacute;lo podemos acceder al objeto&nbsp;<em>request</em>&nbsp;en nuestro servidor - no se lo estamos pasando al router o a los manipuladores de petici&oacute;n, como lo hicimos con el objeto&nbsp;<em>response</em>.</p>\n\n<p style="text-align:justify">En mi opini&oacute;n, es un trabajo del servidor HTTP de darle a la aplicaci&oacute;n toda la informaci&oacute;n de una petici&oacute;n que necesite para hacer su trabajo. Luego, sugiero que manejemos el procesamiento de la petici&oacute;n de POST en el servidor mismo y pasemos la informaci&oacute;n final al router y a los manipuladores de petici&oacute;n, los que luego decidir&aacute;n que hacer con &eacute;sta.</p>\n\n<p style="text-align:justify">Entonces, la idea es poner los callbacks&nbsp;<em>data</em>&nbsp;y&nbsp;<em>end</em>&nbsp;en el servidor, recogiendo todo los trozos de informaci&oacute;n POST en el callback&nbsp;<em>data</em>, y llamando al router una vez recibido el evento&nbsp;<em>end</em>, mientras le entregamos los trozos de informaci&oacute;n recogidos al router, el que a su vez se los pasa a los manipuladores de petici&oacute;n.</p>\n\n<p style="text-align:justify">Aqu&iacute; vamos, empezando con&nbsp;<em>server.js</em>:</p>\n\n<pre><code>\nvar http = require(&quot;http&quot;);\nvar url = require(&quot;url&quot;);\n\nfunction iniciar(route, handle) {\n  function onRequest(request, response) {\n        var dataPosteada = &quot;&quot;;\n        var pathname = url.parse(request.url).pathname;\n        console.log(&quot;Peticion para &quot; + pathname + &quot; recibida.&quot;);\n\n        request.setEncoding(&quot;utf8&quot;);\n\n        request.addListener(&quot;data&quot;, function(trozoPosteado) {\n          dataPosteada += trozoPosteado;\n          console.log(&quot;Recibido trozo POST &#39;&quot; + trozoPosteado + &quot;&#39;.&quot;);\n    });\n\n    request.addListener(&quot;end&quot;, function() {\n      route(handle, pathname, response, dataPosteada);\n    });\n\n  }\n\n  http.createServer(onRequest).listen(8888);\n  console.log(&quot;Servidor Iniciado&quot;);\n}\n\nexports.iniciar = iniciar;\n</code></pre>\n\n<p style="text-align:justify">B&aacute;sicamente hicimos tres cosas aqu&iacute;: Primero, definimos que esperamos que la codificaci&oacute;n de la informaci&oacute;n recibida sea UTF-8, agregamos un listener de eventos para el evento &quot;data&quot; el cual llena paso a paso nuestra variable<em>dataPosteada</em>&nbsp;cada vez que un nuevo trozo de informaci&oacute;n POST llega, y movemos la llamada desde nuestro router al callback del evento&nbsp;<em>end</em>&nbsp;de manera de asegurarnos que s&oacute;lo sea llamado cuando toda la informaci&oacute;n POST sea reunida. Adem&aacute;s, pasamos la informaci&oacute;n POST al router, ya que la vamos a necesitar en nuestros manipuladores de eventos.</p>\n\n<p style="text-align:justify">Agregar un loggueo de consola cada vez que un trozo es recibido es una mala idea para c&oacute;digo de producci&oacute;n (megabytes de informaci&oacute;n POST, &iquest;recuerdan?, pero tiene sentido para que veamos que pasa.</p>\n\n<p style="text-align:justify">Mejoremos nuestra aplicaci&oacute;n. En la p&aacute;gina&nbsp;<em>/subir</em>, desplegaremos el contenido recibido. Para hacer esto posible, necesitamos pasar la&nbsp;<em>dataPosteada</em>&nbsp;a los manipuladores de petici&oacute;n, en&nbsp;<em>router.js</em>.</p>\n\n<pre><code>\nfunction route(handle, pathname, response, postData) {\n  console.log(&quot;A punto de rutear una peticion para &quot; + pathname);\n  if (typeof handle[pathname] === &#39;function&#39;) {\n    handle[pathname](response, postData);\n  } else {\n    console.log(&quot;No se ha encontrado manipulador para &quot; + pathname);\n    response.writeHead(404, {&quot;Content-Type&quot;: &quot;text/html&quot;});\n    response.write(&quot;404 No encontrado&quot;);\n    response.end();\n  }\n}\n\nexports.route = route;\n</code></pre>\n\n<p style="text-align:justify">Y en&nbsp;<em>requestHandlers.js</em>, inclu&iacute;mos la informaci&oacute;n de nuestro manipulador de petici&oacute;n&nbsp;<em>subir</em>:</p>\n\n<pre><code>\nfunction iniciar(response, postData) {\n  console.log(&quot;Manipulador de Peticion &#39;iniciar&#39; fue llamado.&quot;);\n\n  var body = &#39;&lt;html&gt;&#39;+\n    &#39;&lt;head&gt;&#39;+\n    &#39;&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; \n        charset=UTF-8&quot; /&gt;&#39;+\n    &#39;&lt;/head&gt;&#39;+\n    &#39;&lt;body&gt;&#39;+\n    &#39;&lt;form action=&quot;/subir&quot; method=&quot;post&quot;&gt;&#39;+\n    &#39;&lt;textarea name=&quot;text&quot; rows=&quot;20&quot; cols=&quot;60&quot;&gt;&lt;/textarea&gt;&#39;+\n    &#39;&lt;input type=&quot;submit&quot; value=&quot;Submit text&quot; /&gt;&#39;+\n    &#39;&lt;/form&gt;&#39;+\n    &#39;&lt;/body&gt;&#39;+\n    &#39;&lt;/html&gt;&#39;;\n  \n    response.writeHead(200, {&quot;Content-Type&quot;: &quot;text/html&quot;});\n    response.write(body);\n    response.end();\n}\n\nfunction subir(response, dataPosteada) {\n  console.log(&quot;Manipulador de Peticion &#39;subir&#39; fue llamado.&quot;);\n  response.writeHead(200, {&quot;Content-Type&quot;: &quot;text/html&quot;});\n  response.write(&quot;Tu enviaste: &quot; + dataPosteada);\n  response.end();\n}\n\nexports.start = start;\nexports.upload = upload;\n</code></pre>\n\n<p style="text-align:justify">Eso es, ahora somos capaces de recibir informaci&oacute;n POST y usarla en nuestros manipuladores de petici&oacute;n.</p>\n\n<p style="text-align:justify">Una &uacute;ltima cosa para este tema: Lo que le estamos pasando al router y los manipuladores de petici&oacute;n es el cuerpo (<em>body</em>) de nuestra petici&oacute;n POST. Probablemente necesitemos consumir los campos individuales que conforman la informaci&oacute;n POST, en este caso, el valor del campo&nbsp;<em>text</em>.</p>\n\n<p style="text-align:justify">&nbsp;</p>\n\n<p style="text-align:justify">Nosotros ya hemos le&iacute;do acerca del m&oacute;dulo&nbsp;<em>querystring</em>, el que nos ayuda con esto:</p>\n\n<pre><code><code>\nvar querystring = require(&quot;querystring&quot;);\n\nfunction iniciar(response, postData) {\n  console.log(&quot;Manipulador de peticion &#39;inicio&#39; fue llamado.&quot;);\n\n  var body = &#39;&lt;html&gt;&#39;+\n    &#39;&lt;head&gt;&#39;+\n    &#39;&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; \n        charset=UTF-8&quot; /&gt;&#39;+\n    &#39;&lt;/head&gt;&#39;+\n    &#39;&lt;body&gt;&#39;+\n    &#39;&lt;form action=&quot;/subir&quot; method=&quot;post&quot;&gt;&#39;+\n    &#39;&lt;textarea name=&quot;text&quot; rows=&quot;20&quot; cols=&quot;60&quot;&gt;&lt;/textarea&gt;&#39;+\n    &#39;&lt;input type=&quot;submit&quot; value=&quot;Submit text&quot; /&gt;&#39;+\n    &#39;&lt;/form&gt;&#39;+\n    &#39;&lt;/body&gt;&#39;+\n    &#39;&lt;/html&gt;&#39;;\n\n    response.writeHead(200, {&quot;Content-Type&quot;: &quot;text/html&quot;});\n        response.write(body);\n        response.end();\n    }\n\n    function subir(response, dataPosteada) {\n          console.log(&quot;Manipulador de peticion &#39;subir&#39; fue llamado.&quot;);\n          response.writeHead(200, {&quot;Content-Type&quot;: &quot;text/html&quot;});\n        response.write(&quot;Tu enviaste el texto: : &quot; + \n            querystring.parse(dataPosteada)[&quot;text&quot;]);\n          response.end();\n        }\n\nexports.iniciar = iniciar;\nexports.subir = subir;\n</code></code></pre>\n\n<p style="text-align:justify">Bueno, para un tutorial de principiantes, esto es todo lo que diremos acerca de la informaci&oacute;n POST.</p>\n\n<p style="text-align:justify">La pr&oacute;xima vez, hablaremos sobre como usar el excelente m&oacute;dulo&nbsp;<em>node-formidable</em>&nbsp;para permitirnos lograr nuestro caso de uso final: subir y desplegar im&aacute;genes.</p>\n', 'alexander', 'Programacion', 34, 0, '2014-10-28 22:56:06', 0);
INSERT INTO `noticias` (`id`, `titulo`, `foto`, `contenido`, `user`, `categoria`, `visitas`, `id_comentario`, `publicado`, `comentarios`) VALUES
(21, 'rest usando php y curl', 'imagenes/RestLiClientServerFlow.png', '<h1>REST usando PHP y&nbsp;cURL</h1>\n\n<p>REST es una t&eacute;cnica para construir sistemas distribuidos usando como base la web. En un resumen burdo, lo que se plantea es la utilizaci&oacute;n de los cuatro m&eacute;todos HTTP: POST, PUT, GET, DELETE de manera an&aacute;loga a los m&eacute;todos ABML (Alta, Baja, Modificaci&oacute;n, y Listado; CRUD en ingl&eacute;s) usados frecuentemente en el manejo de datos. De esta manera, usando REST para proporcionar alg&uacute;n servicio web, nos estamos ahorrando de la creaci&oacute;n de toda la definici&oacute;n de los m&eacute;todos con sus respectivos par&aacute;metros. Y si eso nos parece poco, desde el lado de los servidores y la tasa de transferencia tambi&eacute;n podemos ver ventajas, ya que nos estaremos absteniendo del env&iacute;o de cantidades de metadatos (principalmente con SOAP). No es&nbsp;sorprendente que muchos sitios importantes, como Yahoo!, Amazon o eBay ofrezcan interfaces sobre REST.</p>\n\n<p>Googleando un poco sobre c&oacute;mo implementar esto sobre PHP, llegu&eacute; a una p&aacute;gina en donde se presentaba un<em>switch</em>&nbsp;(tambi&eacute;n conocido como&nbsp;<em>case</em>) bastante sencillo en donde se detecta el m&eacute;todo del pedido HTTP, &nbsp;en funci&oacute;n de esto se extraen los par&aacute;metros y se realiza el procesamiento.</p>\n\n<div>\n<h5>C&oacute;digo Base para REST con PHP</h5>\n\n<p><br />\n<pre><code>\nCódigo Base para REST con PHP\n\n$method = $_SERVER[''REQUEST_METHOD''];\n// tendremos que tratar esta variable para obtener el recurso adecuado de nuestro modelo.\n$resource = $_SERVER[''REQUEST_URI''];\n// Dependiendo del método de la petición ejecutaremos la acción correspondiente.\nswitch ($method) {\n    case ''GET'':\n        // código para método GET\n        break;\n    case ''POST'':\n        $arguments = $_POST;\n        // código para método POST\n        break;\n    case ''PUT'':\n        parse_str(file_get_contents(''php://input''), $arguments);\n        // código para método PUT\n        break;\n    case ''DELETE'':\n        // código para método DELETE\n        break;\n}\necho json_encode($response, true); // $response será un array con los datos de nuestra respuesta.\n</code></pre></p>\n</div>\n\n<p>Lo que hice en mi caso fue trabajar con una tabla ficticia llamada&nbsp;<em>users</em>&nbsp;con dos campos:&nbsp;<em>username</em>&nbsp;y&nbsp;<em>email</em>. Dependiendo del m&eacute;todo con el que se env&iacute;e el pedido, se toman las acciones pertinentes:</p>\n\n<ol>\n	<li>POST: Se agrega un nuevo usuario con los datos del POST.</li>\n	<li>PUT: Se actualiza un usuario con los datos proporcionados. EL ID del usuario se recibe en la URL, por ejemplo<a href="http://localhost/usuarios/78" rel="nofollow" style="color: rgb(0, 141, 207); text-decoration: none;">http://localhost/usuarios/78</a>.</li>\n	<li>DELETE: Elimina un usuario. El ID se recibe de la misma manera que en la actualizaci&oacute;n.</li>\n	<li>GET: Se recupera un usuario de un ID recibido. El ID debe aparecer en la URL de la misma manera que en la actualizaci&oacute;n.</li>\n</ol>\n\n<p>Algunas consideraciones a tener en cuenta sobre el ejemplo:</p>\n\n<ul>\n	<li>No se hacen validaciones considerables en los datos de entrada. Son filtros m&iacute;nimos y s&oacute;lo hechos a los fines de prueba. Esto es evidente en la actualizaci&oacute;n principalmente.</li>\n	<li>Los datos devueltos son en JSON (medio obvio, pero nunca est&aacute; de m&aacute;s aclarar las cosas).</li>\n	<li>La clase&nbsp;<em>Database</em>&nbsp;utilizada es una clase que sirve para conectarse, desconectarse y realizar consultas sobre una base de datos. Creo que los nombres de los m&eacute;todos hablan por s&iacute; mismo sobre su funcionalidad.</li>\n	<li>Las constantes definidas al principio son usadas para la conexi&oacute;n a la base de datos, no tienen mucho que ver con REST en s&iacute;.</li>\n</ul>\n\n<div>\n<h5>C&oacute;digo AMBL de usuarios con REST</h5>\n\n<p><br />\n<pre><code>\nCódigo AMBL de usuarios con REST\n\n// Constantes para el acceso a datos...\nDEFINE("_HOST_", "localhost");\nDEFINE("_PORT_", "3306");\nDEFINE("_USERNAME_", "*******");\nDEFINE("_DATABASE_", "*******");\nDEFINE("_PASSWORD_", "*******");\nrequire_once ''../database.php'';\n$method = $_SERVER[''REQUEST_METHOD''];\n$resource = $_SERVER[''REQUEST_URI''];\ntry {\n    $cnx = Database::Conectar();\n    switch ($method) {\n        case ''GET'':\n            $result = null;\n            $arguments = $_GET;\n            $pattern = "/usuarios\\/(\\d+)/";\n            preg_match($pattern, $resource, $matches);\n            if (count($matches) > 0) {\n                $id = intval($matches[1]);\n                $sql = "SELECT * FROM users WHERE id = $id;";\n                $data = Database::EjecutarConsulta($cnx, $sql);\n                if (count($data) > 0) {\n                    $result = $data[0];\n                } else {\n                    $result = array();\n                }\n            } else {\n                $result = array();\n            }\n            echo json_encode($result);\n            break;\n        case ''POST'':\n            $arguments = $_POST;\n            $result = 0;\n            $username = Database::Limpiar($cnx, $arguments[''username'']);\n            $email = Database::Limpiar($cnx, $arguments[''email'']);\n            $sql = "INSERT INTO users (username, email) VALUES (''$username'', ''$email''); ";\n            Database::EjecutarNoConsulta($cnx, $sql);\n            $result = Database::LastInsertId($cnx);\n            echo json_encode(array(''insertedId'' => $result));\n            break;\n        case ''PUT'':\n            parse_str(file_get_contents(''php://input''), $arguments);\n            $result = 0;\n            $pattern = "/usuarios\\/(\\d+)/";\n            preg_match($pattern, $resource, $matches);\n            if (count($matches) > 0) {\n                $id = intval($matches[1]);\n                $sql = "UPDATE users SET ";\n                $explodedArgs = array();\n                foreach ($arguments as $k => $v) {\n                    $k = Database::Limpiar($cnx, $k);\n                    $v = Database::Limpiar($cnx, $v);\n                    $explodedArgs[] = "$k = ''$v''";\n                }\n                $sql .= implode('', '', $explodedArgs);\n                $sql .= " WHERE id = $id;";\n                $result = Database::EjecutarNoConsulta($cnx, $sql);\n            } else {\n                $result = 0;\n            }\n            echo json_encode(array(''affectedRows'' => $result));\n            break;\n        case ''DELETE'':\n            $arguments = array();\n            $pattern = "/usuarios\\/(\\d+)/";\n            preg_match($pattern, $resource, $matches);\n            if (count($matches) > 0) {\n                $id = intval($matches[1]);\n                $sql = "DELETE FROM users WHERE id = $id;";\n                $result = Database::EjecutarNoConsulta($cnx, $sql);\n            } else {\n                $result = 0;\n            }\n            echo json_encode(array(''affectedRows'' => $result));\n            break;\n    }\n    Database::Desconectar($cnx);\n} catch (Exception $ex) {\n    header(''HTTP/1.0 400 Bad Request'');\n}\n\n}</code></pre></p>\n</div>\n\n<p>Para probar este c&oacute;digo, en vez de usar AJAX con jQuery como lo hacen en el post donde aparece el c&oacute;digo base de REST, hago uso de cURL para poder hacer los pedidos y ver los resultados. En otro sitio (que tambi&eacute;n aparece en las fuentes) encontr&eacute; algo sobre c&oacute;mo hacer esto desde un shell Bash; Cygwin en mi caso.</p>\n\n<p>Para hacer un alta con POST, se hace lo siguiente:</p>\n\n<div><br />\n<pre><code>\n	$ curl -i -H "Accept: application/json" -X POST -d "username=Ricardo&email=rmiranda@tempuri.com" http://localhost/usuarios\n</code></pre></div>\n\n<p>Una actualizaci&oacute;n con PUT:</p>\n\n<div><br />\n<pre><code>\n	\ncurl -i -H "Accept: application/json" -X PUT -d "email=ricardo@tempuri.com" http://localhost/usuario/4\n</code></pre></div>\n\n<p>Una eliminaci&oacute;n con DELETE se hace de la siguiente manera:</p>\n\n<div><br />\n<pre><code>\ncurl -i -H "Accept: application/json" -X DELETE http://localhost/usuario/4</code></pre></div>\n\n<p>Y para recuperar un usuario:</p>\n\n<div><br />\n<pre><code>curl -i -H "Accept: application/json" http://localhost/usuarios/4</code></pre></div>\n\n<p>Pueden probarlo si quieren. Es bastante sencillo en verdad. Una opci&oacute;n al uso de mi clase&nbsp;<em>Database</em>&nbsp;es el uso directo de los m&eacute;todos&nbsp;<em>mysql</em>&nbsp;de PHP para hacerlo. El foco de esto no era el uso de la base de datos, sino el uso de REST en s&iacute;. De momento estamos aqu&iacute; con este paradigma; vamos a ver hasta donde podemos ir avanzando.</p>\n\n<p>Igualmente, tambi&eacute;n les dejo el c&oacute;digo completo para que lo vean. Tambi&eacute;n va el SQL de la base de datos si quieren probarlo, junto con el HTACCESS para el Apache. Eso es a los fines de manejar la URL como puse en el c&oacute;digo.</p>\n\n<p>Espero que les sirva.</p>\n\n<p>C&oacute;digo Fuente:<br />\n<a href="https://skydrive.live.com/redir.aspx?cid=8073657c373f699e&amp;resid=8073657C373F699E!411&amp;parid=8073657C373F699E!315&amp;authkey=!AL-cA_GWf6YX628" style="color: rgb(0, 141, 207); text-decoration: none;" target="_blank" title="Código fuente de ejemplo">Ver los archivos</a></p>\n', 'alexander', 'Programacion', 19, 0, '2014-10-28 22:49:59', 0),
(22, 'api rest', 'imagenes/restful_api.jpg', '<h2>creaci&oacute;n de una API REST con PHP</h2>\n\n<h3>En primer lugar, algunos antecedentes<a name="toc_1"></a></h3>\n\n<h4>&iquest;Qu&eacute; es REST?<a name="toc_2"></a></h4>\n\n<p>REST, o en forma completa, de transferencia de estado representacional se ha convertido en la arquitectura de dise&ntilde;o est&aacute;ndar para el desarrollo de APIs web.&nbsp;En su RESTO coraz&oacute;n es una relaci&oacute;n de cliente-servidor sin estado;&nbsp;esto significa que a diferencia de muchos otros enfoques no hay contexto de cliente que se almacena en el servidor (no hay<a href="http://php.net/manual/en/features.sessions.php" style="color: rgb(107, 108, 114);">sesiones</a>&nbsp;).&nbsp;Para contrarrestar esto, cada solicitud contiene toda la informaci&oacute;n necesaria para el servidor para autenticar el usuario, y todos los datos del estado de sesi&oacute;n que se deben enviar tambi&eacute;n.</p>\n\n<p>RESTO toma ventaja de los m&eacute;todos de solicitud HTTP a la capa en s&iacute; en la arquitectura existente de HTTP.&nbsp;Estas operaciones consisten en lo siguiente:</p>\n\n<ul>\n    <li>GET - Se utiliza para las solicitudes de lectura b&aacute;sicos en el servidor</li>\n    <li>PUT-Se usa para modificar un objeto existente en el servidor</li>\n    <li>POSTE Usado-para crear un nuevo objeto en el servidor</li>\n    <li>DELETE - Se utiliza para eliminar un objeto en el servidor</li>\n</ul>\n\n<p>Mediante la creaci&oacute;n de puntos finales de URI que utilizan estas operaciones, una API REST se monta r&aacute;pidamente.</p>\n\n<h4>&iquest;Qu&eacute; es una API<a name="toc_3"></a></h4>\n\n<p>En este sentido, una API - que significa Application Programming Interface - permite m&eacute;todos expuestos p&uacute;blicamente de una solicitud para ser accedido y manipulado fuera del programa en s&iacute;.&nbsp;Un uso com&uacute;n de una API es cuando se desea obtener los datos de una aplicaci&oacute;n (como una receta de pastel), sin la necesidad de visitar la propia aplicaci&oacute;n (comprobaci&oacute;n GreatRecipies.com).&nbsp;Para permitir esta acci&oacute;n se lleve a cabo, la aplicaci&oacute;n ha publicado una API que permite espec&iacute;ficamente para aplicaciones extranjeras para hacer llamadas a sus datos y la devoluci&oacute;n de dichos datos para el usuario desde el interior de la aplicaci&oacute;n externa.&nbsp;En la web, esto se hace a menudo a trav&eacute;s del uso de REST URI.&nbsp;En nuestro ejemplo, la torta de la API podr&iacute;a contener el URI</p>\n\n<pre>\n<code>greatrecipies.com/api/v1/recipe/cake\n</code></pre>\n\n<p>Lo anterior es un extremo RESTful.&nbsp;Si se va a enviar una solicitud GET a la URI de la respuesta podr&iacute;a ser una lista de los m&aacute;s recientes recetas de pastel que la aplicaci&oacute;n dispone de una solicitud PUT podr&iacute;a agregar una nueva receta a la base de datos.&nbsp;Si por el contrario se va a solicitar / cake/141 usted probablemente recibe una receta detallada para un pastel &uacute;nico.&nbsp;Estos son ejemplos de puntos finales sensibles que crean una manera predecible de interactuar con la aplicaci&oacute;n.</p>\n\n<h3>Making Our Own API REST<a name="toc_4"></a></h3>\n\n<p>La API que vamos a construir aqu&iacute; consistir&aacute; en dos clases.&nbsp;Una clase abstracta que controlar&aacute; el an&aacute;lisis de la URI y devolver la respuesta, y una clase concreta que constar&aacute; de s&oacute;lo los puntos finales para nuestra API.&nbsp;Al separar cosas como estas, conseguimos un Resumen de clase reutilizable que puede convertirse en la base de cualquier otro API REST y hemos aislado todo el c&oacute;digo &uacute;nico para la misma aplicaci&oacute;n en un solo lugar.</p>\n\n<p>Sin embargo, antes de poder escribir una de esas clases hay una tercera parte de este que debe ser atendido.</p>\n\n<h4>Escribir un. Htaccess archivo<a name="toc_5"></a></h4>\n\n<p>Un archivo htaccess. Proporciona una configuraci&oacute;n de nivel de directorio en la forma de un servidor web se encargar&aacute; de las solicitudes a los recursos en el directorio del propio archivo htaccess. Vive pulg Puesto que no desea tener que crear nuevos archivos PHP con todos los par&aacute;metros que nuestra API contendr&aacute; ( por varias razones uno de los cuales es que crea problemas con la capacidad de mantenimiento);&nbsp;en cambio queremos tener todas las peticiones que vienen a nuestra API encaminarse al controlador que luego determinar d&oacute;nde pretende la solicitud para ir, y lo remitir&aacute; a un c&oacute;digo para manejar ese punto final espec&iacute;fico.&nbsp;Con esto en mente, vamos a crear un archivo htacccess.:</p>\n\n<pre>\n<code>&lt;IfModule Mod_rewrite.c&gt;\nRewriteEngine On\nRewriteCond% {} REQUEST_FILENAME!-F\nRewriteCond% {} REQUEST_FILENAME!-D\nSolicitud RewriteRule api/v1 / (. *) $ Api/v1/MyAPI.php? = $ 1 [QSA, NC, L]\n&lt;/ IfModule&gt;\n</code></pre>\n\n<h5>Lo que hizo eso?<a name="toc_6"></a></h5>\n\n<p>Vamos a caminar a trav&eacute;s de este archivo.&nbsp;La primera cosa que hacemos aqu&iacute; es envolver todo en un cheque por la existencia de mod_rewrite.c;&nbsp;si ese m&oacute;dulo Apache est&aacute; presente, podemos seguir.&nbsp;Pasamos luego al RewriteEngine On y la preparamos para trabajar, d&aacute;ndole dos reglas.&nbsp;Estas reglas dicen realizar una reescritura si el URI solicitado no coincide con un nombre de archivo o directorio existente.</p>\n\n<p>En la siguiente l&iacute;nea declara el RewriteRule real.&nbsp;Esto nos dice que cualquier solicitud para api/v1 /eso no es un archivo o directorio existente en lugar debe ser enviada a api/v1/index.php.&nbsp;El (. *) Marca una captura de llamada, que se env&iacute;a a lo largo de la secuencia de comandos MyAPI.php as&iacute; en la variable de petici&oacute;n a trav&eacute;s del uso de la $ 1 delimitador.&nbsp;Al final de esa l&iacute;nea son algunas de las banderas que configurar el modo en que se realiza el reescritura.&nbsp;En primer lugar, [QSA] significa que la captura con nombre se agregar&aacute; a la URI de nueva creaci&oacute;n.&nbsp;Segundo [NC] significa que nuestros URI no distinguen entre may&uacute;sculas y min&uacute;sculas.&nbsp;Por &uacute;ltimo, el indicador [L] indica que mod_rewrite no debe procesar cualquier regla adicional si esta regla coincide.</p>\n\n<h4>La construcci&oacute;n de la clase abstracta<a name="toc_7"></a></h4>\n\n<p>Con nuestro htaccess. En su lugar, ahora es el momento de crear nuestra clase abstracta.&nbsp;Como se mencion&oacute; anteriormente, esta clase actuar&aacute; como un contenedor para todos los puntos finales personalizados que nuestro API va a utilizar.&nbsp;En esa medida, debe ser capaz de tomar nuestro pedido, agarra el punto final de la cadena de URI, detectar el m&eacute;todo HTTP (GET, POST, PUT, DELETE) y ensamblar los datos adicionales proporcionados en el encabezado o en el URI.&nbsp;Una vez hecho esto, la clase abstracta pasar&aacute; la informaci&oacute;n de la solicitud a un m&eacute;todo en la clase concreta para llevar a cabo realmente el trabajo.&nbsp;Volvemos entonces a la clase abstracta que se encargar&aacute; de la formaci&oacute;n de una respuesta HTTP de vuelta al cliente.</p>\n\n<p>En primer lugar vamos a declarar nuestra clase, sus propiedades, y el constructor:</p>\n\n<pre>\n<code>API clase abstracta\n{\n    / **\n     * Propiedad: m&eacute;todo\n     * El m&eacute;todo HTTP, esta solicitud se haya realizado, ya sea GET, POST, PUT o DELETE\n     * /\n    m&eacute;todo protected $ =&#39;&#39;;\n    / **\n     * Propiedad: punto final\n     * Solicita a la modelo en el URI. por ejemplo: / archivos\n     * /\n    protected $ variable =&#39;&#39;;\n    / **\n     * Propiedad: verbo\n     * Un descriptor opcional adicional sobre el punto final, que se utiliza para las cosas que pueden\n     * No ser manipulados por los m&eacute;todos b&aacute;sicos. por ejemplo: / archivos / procesos\n     * /\n    protected $ verbo =&#39;&#39;;\n    / **\n     * Propiedad: args\n     * Cualquier componente URI adicionales despu&eacute;s del punto final y el verbo se han eliminado, en nuestra\n     * Caso, un identificador de n&uacute;mero entero para el recurso. por ejemplo: / &lt;endpoint&gt; / &lt;verb&gt; / &lt;arg0&gt; / &lt;arg1&gt;\n     * O / &lt;endpoint&gt; / &lt;arg0&gt;\n     * /\n    protected $ args = array ();\n    / **\n     * Propiedad: archivo\n     * Almacena la entrada de la solicitud PUT\n     * /\n     protected $ archivo = null;\n\n    / **\n     * Constructor: __ construct\n     * Permitir la CORS, montar y pre-proceso de los datos\n     * /\n    public function __ construct ($ peticion) {\n        header (&quot;Access-Control-Allow-origen: *&quot;);\n        header (&quot;Access-Control-Allow-M&eacute;todos: *&quot;);\n        header (&quot;Content-Type: application / json&quot;);\n\n        $ This-&gt; args = explode (&#39;/&#39;, rtrim ($ peticion, &#39;/&#39;));\n        $ This-&gt; endpoint = array_shift ($ this-&gt; args);\n        if (array_key_exists (0, $ this-&gt; args) &amp;&amp;! is_numeric ($ this-&gt; args [0])) {\n            $ This-&gt; verb = array_shift ($ this-&gt; args);\n        }\n\n        $ This-&gt; method = $ _SERVER [&#39;REQUEST_METHOD&#39;];\n        if ($ this-&gt; m&eacute;todo == &#39;Post&#39; &amp;&amp; array_key_exists (&#39;HTTP_X_HTTP_METHOD&#39;, $ _SERVER)) {\n            if ($ _SERVER [&#39;HTTP_X_HTTP_METHOD&#39;] == &#39;Eliminar&#39;) {\n                $ This-&gt; method = &#39;Eliminar&#39;;\n            } Else if ($ _SERVER [&#39;HTTP_X_HTTP_METHOD&#39;] == &#39;PUT&#39;) {\n                $ This-&gt; method = &#39;PUT&#39;;\n            } Else {\n                throw new Exception (&quot;Unexpected Header&quot;);\n            }\n        }\n\n        switch ($ this-&gt; method) {\n        case &#39;BORRAR&#39;:\n        caso &quot;post&quot;:\n            $ This-&gt; request = $ this-&gt; _cleanInputs ($ _POST);\n            romper;\n        case &#39;GET&#39;:\n            $ This-&gt; request = $ this-&gt; _cleanInputs ($ _GET);\n            romper;\n        caso &quot;PUT&quot;:\n            $ This-&gt; request = $ this-&gt; _cleanInputs ($ _GET);\n            $ This-&gt; file = file_get_contents (&quot;php :/ / input&quot;);\n            romper;\n        por defecto:\n            $ This-&gt; _response (&#39;M&eacute;todo no v&aacute;lido&#39;, 405);\n            romper;\n        }\n    }\n}\n</code></pre>\n\n<p>Al declarar esto una clase abstracta que estamos prohibido por PHP desde la creaci&oacute;n de una instancia concreta de esta clase.&nbsp;A partir de ah&iacute; podemos crear algunos miembros de la clase protegidas.&nbsp;Un miembro protegido s&oacute;lo se puede acceder en la clase en s&iacute; y los hijos de los mismos, a diferencia de una variable privada que s&oacute;lo se puede acceder en la clase que define el miembro.</p>\n\n<h5>Hablemos de CORS<a name="toc_8"></a></h5>\n\n<p>Una de las premisas b&aacute;sicas de una API es que los clientes de diferentes &aacute;mbitos que la que la API se encuentra alojado en al que conectar&aacute;n a la API para enviar y recibir datos.Existe un riesgo de seguridad heredan aqu&iacute;, ya que esto puede permitir a un atacante crear una p&aacute;gina de imitaci&oacute;n y robar datos enviados de ida y vuelta.&nbsp;Por lo tanto, esta capacidad debe habilitarse expl&iacute;citamente en las p&aacute;ginas que deseen permitir lo que se llama Cross-Origin Resource Sharing, alias CORS.&nbsp;Un recurso excelente para aprender m&aacute;s sobre CORS es el sitio web&nbsp;<a href="http://enable-cors.org/" style="color: rgb(107, 108, 114);">Habilitar CORS</a>&nbsp;- fue bastante &uacute;til para m&iacute; como yo estaba tratando de entender las cosas.</p>\n\n<p>Para nuestro API tenemos que asegurarnos de que esto es posible, por lo que la primera cosa que se hace en el m&eacute;todo __ construct es establecer algunas cabeceras personalizadas.&nbsp;Los dos primeros son la magia;&nbsp;en primer lugar nos permitimos solicitudes de cualquier origen que deben tratarse en esta p&aacute;gina, al lado permitimos que para cualquier m&eacute;todo HTTP para ser aceptado.</p>\n\n<p>Una vez que el paso sorprendentemente simple pero completamente crucial de lo que permite CORS peticiones se ha completado, se convierte en tiempo para nuestro script para entender lo que el cliente ha pedido de &eacute;l.&nbsp;Para ello vamos a tomar los $ variable de petici&oacute;n que ser&aacute; enviada a nuestra secuencia de comandos desde el archivo htaccess. (&iquest;Recuerdas? Contiene la URI original que el cliente solicit&oacute;) y destrozarlo en los componentes que necesitamos.&nbsp;Una vez que ha sido explot&oacute; alrededor de la barra, tirando fuera el primer elemento que podemos agarramos el punto final, si es aplicable la siguiente ranura de la matriz es el verbo, y los elementos restantes se utilizan como $ args.</p>\n\n<p>El m&eacute;todo HTTP describir&aacute; el prop&oacute;sito de esta solicitud.&nbsp;Peticiones GET son f&aacute;ciles de detectar, pero eliminar y peticiones PUT se ocultan dentro de una petici&oacute;n POST a trav&eacute;s del uso de la cabecera HTTP_X_HTTP_METHOD.&nbsp;Una vez que el m&eacute;todo ha sido recogido, la fuente de datos adecuada se analiza y limpia de seguridad antes de ser ejecutado.</p>\n\n<h4>Finalizaci&oacute;n de la clase abstracta<a name="toc_9"></a></h4>\n\n<p>El resto de la clase abstracta que viene a continuaci&oacute;n.&nbsp;En estos momentos nos falta una funci&oacute;n que llame a los m&eacute;todos en la clase de concreto, y luego uno que se encargar&aacute; de devolver la respuesta.&nbsp;Aqu&iacute; est&aacute; el resto de la clase abstracta:</p>\n\n<pre>\n<code>API clase abstracta\n{\n    ...\n\n    funci&oacute;n p&uacute;blica processAPI () {\n        if ((int) method_exists ($ this, $ this-&gt; punto final)&gt; 0) {\n            return $ this-&gt; _response ($ this-&gt; {$ this-&gt; punto final} ($ this-&gt; args));\n        }\n        return $ this-&gt; _response (&quot;No Punto final: $ this-&gt; punto final, 404);\n    }\n\n    funci&oacute;n _response privada (datos $, $ status = 200) {\n        header (&quot;HTTP/1.1&quot; $ status &quot;&quot; $ this-&gt; _requestStatus ($ estado)...);\n        volver json_encode ($ data);\n    }\n\n    _cleanInputs private function ($ data) {\n        $ Clean_input = Array ();\n        if (is_array ($ data)) {\n            foreach ($ datos as $ k =&gt; $ v) {\n                $ Clean_input [$ k] = $ this-&gt; _cleanInputs ($ v);\n            }\n        } Else {\n            $ Clean_input = trim (strip_tags ($ datos));\n        }\n        return $ clean_input;\n    }\n\n    funci&oacute;n privada _requestStatus ($ code) {\n        $ Status = array (  \n            200 =&gt; &#39;OK&#39;,\n            404 =&gt; &#39;No encontrado&#39;,   \n            405 =&gt; &#39;M&eacute;todo no permitido&#39;,\n            500 =&gt; &#39;Error interno del servidor &quot;,\n        ); \n        ? return ($ estado [$ code]) $ estado [$ code]: $ Estado [500]; \n    }\n</code></pre>\n\n<p>La &uacute;nica funci&oacute;n de la pena mencionar aqu&iacute; es el m&eacute;todo processAPI ().&nbsp;Este es el m&eacute;todo expuesto p&uacute;blicamente en la API, y su trabajo consiste en determinar si la clase concreta implementa un m&eacute;todo para el objetivo de que el cliente solicite.&nbsp;Si lo hace, entonces llama a ese m&eacute;todo, de lo contrario se devuelve una respuesta 404.&nbsp;El resto del nuevo c&oacute;digo es simplemente una matriz de mapa de todos los posibles c&oacute;digos de HTTP y un desinfectante de entrada.</p>\n\n<p>Eso es todo lo que hay para la clase abstracta.&nbsp;Ahora, por fin el momento de poner en pr&aacute;ctica un ejemplo concreto.</p>\n\n<h3>Creaci&oacute;n de un API en concreto<a name="toc_10"></a></h3>\n\n<p>Piense de nuevo a nuestra conversaci&oacute;n anterior acerca de intercambio de recursos Cross-Origin (CORS).&nbsp;Recuerde c&oacute;mo se introduce una vulnerabilidad de la seguridad?&nbsp;Vamos a trabajar para cerrar que lo m&aacute;s fuerte posible aqu&iacute; mediante la vinculaci&oacute;n de un origen a un API Key &uacute;nica.&nbsp;Esto significa que s&oacute;lo los servidores externos conocidos y autorizados podr&aacute;n conectarse a nuestro servicio de API a trav&eacute;s de una vinculaci&oacute;n de su nombre de dominio y una clave de API generada de forma exclusiva.&nbsp;A los efectos de este ejemplo voy a dejar una parte del c&oacute;digo para verificar la API Key abstra&iacute;do fuera.&nbsp;Adem&aacute;s nuestra API requerir&aacute; una muestra &uacute;nica en cada solicitud para verificar el usuario.</p>\n\n<pre>\n<code>require_once &#39;API.class.php&#39;;\nclase MyApi extiende API\n{\n    protected $ usuario;\n\n    public function __ construct ($ peticion, $ origen) {\n        parent :: __construct ($ peticion);\n\n        / / Resumido por ejemplo\n        $ Apikey = new Models \\ apikey ();\n        $ Usuario = nuevos modelos \\ Usuario ();\n\n        if (! array_key_exists (&#39;apikey&#39;, $ this-&gt; petici&oacute;n)) {\n            throw new Exception (&#39;No API Key proporcionado&#39;);\n        } Else if (! $ Apikey-&gt; verifyKey ($ this-&gt; solicitud [&#39;apikey&#39;], $ origen)) {\n            throw new Exception (&#39;clave de API no v&aacute;lida &quot;);\n        } Else if (array_key_exists (&#39;tokens&#39;, $ this-&gt; petici&oacute;n) &amp;&amp;\n             ! $ Usuario-&gt; get (&#39;simb&oacute;lico&#39;, $ this-&gt; solicitud [&#39;s&iacute;mbolo&#39;]))\n\n            throw new Exception (&#39;Invalid Token de usuario&#39;);\n        }\n\n        $ This-&gt; User = $ usuario;\n    }\n\n    / **\n     * Ejemplo de un punto final\n     * /\n     Ejemplo de funci&oacute;n protegida () {\n        if ($ this-&gt; m&eacute;todo == &#39;GET&#39;) {\n            volver &quot;Tu nombre es&quot;. $ This-&gt; User-&gt; nombre;\n        } Else {\n            retorno &quot;S&oacute;lo acepta peticiones GET&quot;;\n        }\n     }\n }\n</code></pre>\n\n<h3>Uso de la API<a name="toc_11"></a></h3>\n\n<p>Creaci&oacute;n de la clase concreta es tan simple como eso.&nbsp;Para cada criterio de valoraci&oacute;n adicional que usted desea tener en su API, s&oacute;lo tiene que a&ntilde;adir nuevas funciones a la clase MyApi cuyo nombre coincida con el punto final.&nbsp;A continuaci&oacute;n, puede utilizar el m&eacute;todo $ y $ verbo y $ args para crear trayectorias de flujo dentro de los criterios de valoraci&oacute;n.</p>\n\n<p>Para aplicar en la pr&aacute;ctica la API a crear un archivo con el siguiente en &eacute;l:</p>\n\n<pre>\n<code>/ / Pedidos del mismo servidor no tienen una cabecera HTTP_ORIGIN\nif (! array_key_exists (&#39;HTTP_ORIGIN&#39;, $ _SERVER)) {\n    $ _SERVER [&#39;HTTP_ORIGIN&#39;] = $ _SERVER [&#39;SERVER_NAME&#39;];\n}\n\ntry {\n    $ API = new MyApi ($ _REQUEST [&#39;petici&oacute;n&#39;], $ _SERVER [&#39;HTTP_ORIGIN&#39;]);\n    $ echo API-&gt; processAPI ();\n} Catch (Exception $ e) {\n    echo json_encode (Array (&#39;error&#39; =&gt; $ e-&gt; getMessage ()));\n}\n</code></pre>\n\n<h4>Eso es un abrigo<a name="toc_12"></a></h4>\n\n<p>Eso es todo lo que hay que hacer ... que es, bueno, realmente mucho en realidad.</p>\n', 'alexander', 'Programacion', 81, 0, '2014-10-28 21:47:39', 0),
(23, 'servidor rest y php con peticiones mediante jquery con ajax', 'imagenes/rest_diagram.jpg', '<p>Un servidor&nbsp;<strong>REST</strong>&nbsp;(Representational State Transfer) puede ser muy &uacute;til para la creaci&oacute;n de aplicaciones HTML5. Utilizar&iacute;amos el servidor para el m&oacute;delo de datos y el cliente (navegador) para la l&oacute;gica de la aplicaci&oacute;n, realizando llamadas ajax al servidor que devolver&iacute;a los datos en formato JSON, por ejemplo. En un sistema REST, cada recurso es direccionable &uacute;nicamente a trav&eacute;s de su URI, y disponemos de un conjunto de aplicaciones (<strong>POST</strong>,&nbsp;<strong>GET</strong>,&nbsp;<strong>PUT</strong>&nbsp;y&nbsp;<strong>DELETE</strong>), propias del protocolo HTTP, para trabajar con esos recursos.</p>\n\n<p>Por ejemplo, si disponemos de una base de datos de clientes y queremos objetener una lista con ellos, tendr&iacute;amos que acceder a la URL del recurso &quot;clientes&quot;, http://servidor.com/clientes. Una petici&oacute;n GET a este recurso nos devolver&iacute;a un array con todos los clientes que tenemos en nuestra BB.DD. Si lo que queremos es obtener la informaci&oacute;n de un cliente en particular, por ejemplo el cliente con identificador igual a 00001, har&iacute;amos una petici&oacute;n GET a la url http://servidor.com/clientes/00001. Para crear un cliente nuevo tendr&iacute;amos que enviar por POST una petici&oacute;n a http://servidor.com/clientes con los datos del nuevo cliente. Para modificar alg&uacute;n dato del cliente 00001 usar&iacute;amos una petici&oacute;n PUT con los nuevos datos a http://servidor.com/clientes/00001. Si la petici&oacute;n es DELETE a esa misma url, borrar&iacute;amos ese registro de la BB.DD. Normalmente los datos que devuelve el servidor estar&aacute;n en formato JSON o XML. Para nuestro ejemplo utilizaremos JSON, ideal para trabajar con aplicaciones javascript.</p>\n\n<p>Para tratar mediante PHP las peticiones en nuestro servidor utilizaremos un c&oacute;digo parecido a este:</p>\n\n<pre>\n<code>\n$method = $_SERVER[''REQUEST_METHOD''];\n\n// tendremos que tratar esta variable para obtener el recurso adecuado de nuestro modelo.\n$resource = $_SERVER[''REQUEST_URI''];\n\n// Dependiendo del método de la petición ejecutaremos la acción correspondiente.\nswitch ($method) {\n    case ''GET'':\n        // código para método GET\n        break;\n    case ''POST'':\n        $arguments = $_POST;\n        // código para método POST\n        break;\n    case ''PUT'':\n        parse_str(file_get_contents(''php://input''), $arguments);\n        // código para método PUT\n        break;\n    case ''DELETE'':\n        // código para método DELETE\n        break;\n}\necho json_encode($response,true); // $response será un array con los datos de nuestra respuesta.\n</code></pre>\n\n<p>Utilizando jquery es muy sencillo realizar peticiones a nuestro servidor con la funci&oacute;n $.ajax:</p>\n\n<pre><code>\n$.ajax({\n    url: ''http://servidor.com/recurso'', // url del recurso\n    type: "get", // podría ser get, post, put o delete.\n    data: {}, // datos a pasar al servidor, en caso de necesitarlo\n    success: function (r) {\n        // aquí trataríamos la respuesta del servidor\n    }\n});\n</code></pre>\n\n<p>&nbsp;</p>\n\n<p>Con estas simples indicaciones ya tenemos las bases para la construcci&oacute;n de una aplicaci&oacute;n. Si dise&ntilde;amos bien nuestro modelo de datos tendremos la oportunidad de crear gran variedad de aplicaciones para distintos tipos de clientes (navegadores web, m&oacute;viles, aplicaciones de escritorio ...), sin tener que modificar nuestro servidor, utilizando un m&eacute;todo estandar, sencillo e intuitivo.</p>', 'alexander', 'Programacion', 202, 0, '2014-10-01 17:26:27', 0);
INSERT INTO `noticias` (`id`, `titulo`, `foto`, `contenido`, `user`, `categoria`, `visitas`, `id_comentario`, `publicado`, `comentarios`) VALUES
(24, 'Rewriteengine', 'imagenes/mod_rewrite_logo.gif', '<h3>Reglas de reescritura - Parte 2: Directivas</h3>\n\n\n<strong>RewriteEngine</strong><br />\n<br />\nLo primero que tenemos que hacer para empezar a escribir reglas de reescritura es indicar a Apache que vamos a utilizar el m&oacute;dulo mod_rewrite . Y para ello utilizaremos la siguiente directiva en el archivo .htaccess&nbsp;<br />\n&nbsp;\n<pre>\n<code> RewriteEngine on   \n</code></pre>\n<br />\nPara desactivarlo, y as&iacute; el servidor ignore el resto de la configuraci&oacute;n, s&oacute;lo tendr&iacute;amos que poner<br />\n&nbsp;\n<pre>\n<code>  RewriteEngine off  \n</code></pre>\n<br />\n<strong>RewriteBase&nbsp;</strong><br />\n<br />\nEsta directiva se utiliza para indicar la URL base para la reescritura.<br />\n&nbsp;\n<pre>\n<code> RewriteBase /    \n</code></pre>\n<br />\nEsta directiva no es obligatoria pero si que es &uacute;til. Por defecto la ruta al contenido que usamos para la reescritura es relativa al directorio ra&iacute;z &nbsp;del host (por ejemplo public_html/). Por lo que con esta directiva podemos especificar el directorio (ruta) base para las reglas.<br />\n<br />\n<a name="more"></a>Por ejemplo queremos que cuando se introduzca la URL dominio.com/index.php seamos redireccionados&nbsp;autom&aacute;ticamente&nbsp;a dominio.com/directorio/index2.php. As&iacute; que si no especificamos una RewriteBase, la regla de reescritura (se ver&aacute;n a continuaci&oacute;n) tendr&aacute; que especificarse como:<br />\n&nbsp;\n<pre>\n<code> RewriteRule ^index\\.php$ <strong>/directorio/index2.php</strong> [R,L].  \n</code></pre>\n<br />\nSin embargo utilizando la base correcta podremos prescindir del /folder en la regla reescritura.<br />\n&nbsp;\n<pre>\n<code> RewriteEngine On  \n RewriteBase <strong>/directorio/  </strong>\n RewriteCond %{HTTP_REFERER} dominio\\.com   \n RewriteRule ^index\\.php$ <strong>index2.php</strong> [R,L]  \n</code></pre>\n<br />\n<strong>RewriteCond</strong><br />\n<br />\nLa directiva RewriteCond nos permite especificar una condici&oacute;n que si se cumple se ejecuta la regla RewriteRule posterior. Se pueden poner varias condiciones con RewriteCond. En este caso, cuando se cumplen todas las condiciones (a no ser que se indique otra cosa) se ejecuta la directiva RewriteRule posterior.<br />\n<br />\nLa sintaxis es:&nbsp;<br />\n&nbsp;\n<pre>\n<code> RewriteCond variable_apache expresi&oacute;n_regular banderas       \n</code></pre>\n<br />\nAqu&iacute; tenemos una lista de las&nbsp;principales&nbsp;variables que utiliza el m&oacute;dulo para crear condiciones. Como vemos la&nbsp;mayor&iacute;a&nbsp;de estas condiciones tienen su equivalencia en PHP\n<table cellpadding="2" cellspacing="0" style="width:549px">\n  <tbody>\n    <tr>\n      <th>\n      <span style="font-family:times new roman,serif">Cabeceras HTTP</span>\n      </th>\n      <th>\n      <span style="font-family:times new roman,serif">Conexi&oacute;n y petici&oacute;n</span>\n      </th>\n      <th><br />\n      &nbsp;</th>\n    </tr>\n    <tr>\n      <td>\n      <span style="font-family:times new roman,serif">HTTP_USER_AGENT<br />\n      HTTP_REFERER<br />\n      HTTP_COOKIE<br />\n      HTTP_FORWARDED<br />\n      HTTP_HOST<br />\n      HTTP_PROXY_CONNECTION<br />\n      HTTP_ACCEPT</span>\n      </td>\n      <td>\n      <span style="font-family:times new roman,serif">REMOTE_ADDR<br />\n      REMOTE_HOST<br />\n      REMOTE_PORT<br />\n      REMOTE_USER<br />\n      REMOTE_IDENT<br />\n      REQUEST_METHOD<br />\n      SCRIPT_FILENAME<br />\n      PATH_INFO<br />\n      QUERY_STRING<br />\n      AUTH_TYPE</span>\n      </td>\n      <td><br />\n      &nbsp;</td>\n    </tr>\n    <tr>\n      <th>\n      <span style="font-family:times new roman,serif">Informaci&oacute;n servidor</span>\n      </th>\n      <th>\n      <span style="font-family:times new roman,serif">Fecha y hora</span>\n      </th>\n      <th>\n      <span style="font-family:times new roman,serif">Especiales</span>\n      </th>\n    </tr>\n    <tr>\n      <td>\n      <span style="font-family:times new roman,serif">DOCUMENT_ROOT<br />\n      SERVER_ADMIN<br />\n      SERVER_NAME<br />\n      SERVER_ADDR<br />\n      SERVER_PORT<br />\n      SERVER_PROTOCOL<br />\n      SERVER_SOFTWARE</span>\n      </td>\n      <td>\n      <span style="font-family:times new roman,serif">TIME_YEAR<br />\n      TIME_MON<br />\n      TIME_DAY<br />\n      TIME_HOUR<br />\n      TIME_MIN<br />\n      TIME_SEC<br />\n      TIME_WDAY<br />\n      TIME</span>\n      </td>\n      <td>\n      <span style="font-family:times new roman,serif">API_VERSION<br />\n      THE_REQUEST<br />\n      REQUEST_URI<br />\n      REQUEST_FILENAME<br />\n      IS_SUBREQ<br />\n      HTTPS<br />\n      REQUEST_SCHEME</span>\n      </td>\n    </tr>\n  </tbody>\n</table>\n<br />\n<br />\nA continuaci&oacute;n se presenta la lista de las banderas disponibles. Estas servir&aacute;n para controlar el comportamiento de la directiva en la que sea utilizada.\n<ul>\n  <li>R: (redirect) para forzar una redirecci&oacute;n HTTP.</li>\n  <li>F: (forbidden) para prohibir el acceso.</li>\n  <li>G: (gone) para eliminar la URL.</li>\n  <li>P: (proxy) para pasar la URL a mod_proxy.</li>\n  <li>L: (last) para detener el procesamiento. No se ejecuta nada que haya&nbsp;detr&aacute;s.</li>\n  <li>N: (next) para continuar.</li>\n  <li>C: (chain) para encadenar la regla activa con la siguiente.</li>\n  <li>F: (forbbiden) devuelve una respuesta de error 403 y para el proceso.</li>\n  <li>NS: (nosubreq) para segurarse que la regla s&oacute;lo se aplica si no se realizan subpeticiones internas.</li>\n  <li>NC: (nocase) para que la URL no distinga may&uacute;sculas de min&uacute;sculas.</li>\n  <li>QSA: (qsappend) para a&ntilde;adir una nueva cadena de consulta (query string) en lugar de sustituirla.</li>\n  <li>PT: (passthrough) para asar la URL modificada a otro m&oacute;dulo apache.</li>\n  <li>S: (skip) para saltar la siguiente regla.</li>\n  <li>E: (env) para asignar una variable de entorno.</li>\n  <li>OR: para indicar que para ejecutar la regla de reescritura se tiene que cumplir la condici&oacute;n actual o la siguiente.</li>\n</ul>\nVamos con un ejemplo:<br />\n&nbsp;\n<pre>\n<code> RewriteCond %{HTTP_USER_AGENT} ^ejemplo    [OR,NC]  \n RewriteCond %{HTTP_USER_AGENT} ^google     [NC]     \n</code></pre>\n<br />\n- La variable_apache es una variable conocida por el servidor, por ejemplo el nombre del navegador ser&iacute;a %{HTTP_USER_AGENT}.<br />\n- La expresi&oacute;n regular se utiliza para determinar cual es el valor de la variable que estamos analizando, por ejemplo si ponemos ^ejemplo estar&iacute;amos indicando que el nombre del navegador comienza por ejemplo.<br />\n- Para las banderas, el valor NC indica (no case) que no distinga may&uacute;sculas de min&uacute;sculas.<br />\n<br />\nEs importante conocer que un signo de exclamaci&oacute;n a principio de una expresi&oacute;n regular significa que negamos dicha expresi&oacute;n.<br />\n<br />\nFinalmente vamos a presentar los diferentes &quot;tests&quot; que se pueden hacer con directorios o ficheros. Dichos tests se pueden utilizar en las directivas de condici&oacute;n en el lugar que hasta ahora&nbsp;coloc&aacute;bamos&nbsp;una expresi&oacute;n regular.\n<ul>\n  <li>&#39;-d&#39;: Trata la cadena como un ruta y comprueba si existe o no y si es un directorio.&nbsp;</li>\n  <li>&#39;-f&#39;: Trata la cadena como una ruta y comprueba si existe o no y si es un fichero regular.&nbsp;</li>\n  <li>&#39;-F&#39;: Comprueba si la cadena es una fichero v&aacute;lido accesible v&iacute;a todos los mecanismo de control (actualmente configurados) de acceso para esa ruta. Hace uso de una subpetici&oacute;n para la comprobaci&oacute;n, lo q puede afectar al rendimiento.</li>\n  <li>&#39;-H&#39; , -L: Mirar -l.&nbsp;</li>\n  <li>&#39;-l&#39;: Trata la cadena como una ruta y comprueba si existe o no y si es un enlace simb&oacute;lico. Se puede usar tambi&eacute;n la convenci&oacute;n Bash -L or -h.&nbsp;</li>\n  <li>&#39;-s&#39;: Trata la cadena como una ruta y comprueba si existe o no y si es un fichero regular con un tama&ntilde;o mayor que cero.&nbsp;</li>\n  <li>&#39;-U&#39;: Comprueba si la cadena es una URL v&aacute;lida accesible v&iacute;a todos los mecanismo de control (actualmente configurados) de acceso para esa ruta. Hace uso de una subpetici&oacute;n para la comprobaci&oacute;n, lo q puede afectar al rendimiento.&nbsp;</li>\n  <li>&#39;-x&#39;: Trata la cadena como una ruta y comprueba si existe o y si tiene los permisos de ejecuci&oacute;n.</li>\n</ul>\nEn la siguiente secci&oacute;n veremos un ejemplo completo.<br />\n&nbsp;\n<strong>RewriteRule</strong><br />\n<br />\n<span style="background-color:rgb(255, 255, 255); color:rgb(34, 34, 34); font-family:arial,tahoma,helvetica,freesans,sans-serif">Finalmente tenemos la directiva que efectuar&aacute; la redirecci&oacute;n (reescritura) correspondiente.</span><br />\n<br />\n<span style="background-color:rgb(255, 255, 255); color:rgb(34, 34, 34); font-family:arial,tahoma,helvetica,freesans,sans-serif">La sintaxis es la siguiente</span><br />\n&nbsp;\n<pre>\n<code> RewriteRule expresi&oacute;n_regular redirecci&oacute;n banderas     \n</code></pre>\n<br />\n<span style="background-color:rgb(255, 255, 255); color:rgb(34, 34, 34); font-family:arial,tahoma,helvetica,freesans,sans-serif">Mediante el&nbsp;car&aacute;cter&nbsp;&quot;-&quot; indicamos que no queremos ninguna p&aacute;gina de redirecci&oacute;n.</span><br />\n<br />\n<span style="background-color:rgb(255, 255, 255); color:rgb(34, 34, 34); font-family:arial,tahoma,helvetica,freesans,sans-serif">Un tema importante dentro de las reglas de reescritura son las referencias. Esto significa que podemos&nbsp;asignar&nbsp;contenido que se encuentre entre&nbsp;par&eacute;ntesis&nbsp;en una expresi&oacute;n regular. Este&nbsp;contenido lo&nbsp;asignaremos &nbsp;a &#39;variables&#39; del tipo $1, $2... si la expresi&oacute;n regular se encuentra en la directiva RewriteRule o a &#39;varibles&#39; %1,%2... si estamos en una directiva de tipo RewriteCond.</span><br />\n<br />\n<span style="background-color:rgb(255, 255, 255); color:rgb(34, 34, 34); font-family:arial,tahoma,helvetica,freesans,sans-serif">Nota: Aunque no haya ning&uacute;n&nbsp;par&eacute;ntesis&nbsp;en la expresi&oacute;n regular, mediante $1 o &nbsp;%1 (dependiendo de la directiva) nos&nbsp;referir&iacute;amos&nbsp;a todo el conjunto que se corresponda con dicha expresi&oacute;n.</span><br />\n<br />\n<span style="background-color:rgb(255, 255, 255); color:rgb(34, 34, 34); font-family:arial,tahoma,helvetica,freesans,sans-serif">Y para comprender dicha directiva vamos a ver unos cuantos ejemplos de utilizaci&oacute;n:</span>\n\n - Ejemplo 1: Si queremos que todas las p&aacute;ginas terminadas en .bak no se&nbsp;redirijan y se muestre la p&aacute;gina de error 403 (prohibido el acceso).\n&nbsp;\n\n<pre>\n<code> RewriteEngine On  \n RewriteRule ^.*\\.bak$ - [F]   \n</code></pre>\n<br />\n<span style="background-color:rgb(255, 255, 255); color:rgb(34, 34, 34); font-family:arial,tahoma,helvetica,freesans,sans-serif">- Ejemplo 2: Si&nbsp;tenemos&nbsp;un script llamado operacion.php y queremos que&nbsp;exteriormente&nbsp;sea accedido como operacion.html.</span><br />\n&nbsp;\n<pre>\n<code> RewriteEngine On  \n RewriteRule ^operacion\\.html$ operacion.php  \n</code></pre>\n<br />\n<span style="background-color:rgb(255, 255, 255); color:rgb(34, 34, 34); font-family:arial,tahoma,helvetica,freesans,sans-serif">Ahora se podr&aacute; acceder a http://localhost/operacion.html?op=suma&amp;op1=6&nbsp;y gracias a la regla de reescritura el servidor la interpretar&aacute;&nbsp;como&nbsp;</span><span style="background-color:rgb(255, 255, 255); color:rgb(34, 34, 34); font-family:times new roman,serif"><span style="font-size:small">http://localhost/operacion.php?op=suma&amp;op1=6.</span></span><br />\n<br />\n<span style="background-color:rgb(255, 255, 255); color:rgb(34, 34, 34); font-family:arial,tahoma,helvetica,freesans,sans-serif">- Ejemplo 3: Si queremos usar extensi&oacute;n do, para las p&aacute;ginas del servidor, en lugar de html podr&iacute;amos utilizar la siguiente regla.</span><br />\n&nbsp;\n<pre>\n<code> RewriteEngine On  \n RewriteRule ^(.+)\\.do$ $1.html&nbsp;[NC]  \n</code></pre>\n<br />\n<span style="background-color:rgb(255, 255, 255); color:rgb(34, 34, 34); font-family:arial,tahoma,helvetica,freesans,sans-serif">Recuerda que podemos usar referencias. Por lo tanto tomamos todo lo que va delante de .do (&uacute;nico&nbsp;par&eacute;ntesis) y lo utilizaremos ($1) junto a la terminaci&oacute;n .html para la redirecci&oacute;n. As&iacute; el servidor transformar&aacute; internamente www.loquesea.com/pagina.do a &nbsp;www.loquesea.com/pagina.html. Que ser&aacute; lo que entender&aacute; y&nbsp;procesar&aacute;.</span><br />\n<br />\n<span style="background-color:rgb(255, 255, 255); color:rgb(34, 34, 34); font-family:arial,tahoma,helvetica,freesans,sans-serif">Sin embargo existe un problema con esta regla y es que tal como est&aacute; tendremos un problema SEO ya que &uacute;nicamente estamos haciendo una redirecci&oacute;n interna y no de URL (HTTP). Por lo que tenemos dos URL&#39;s para acceder al mismo recurso (www.loquesea.com/pagina.do y www.loquesea.com/pagina.html). Lo que puede ser penalizado por los motores de b&uacute;squeda.</span><br />\n<br />\n<span style="background-color:rgb(255, 255, 255); color:rgb(34, 34, 34); font-family:arial,tahoma,helvetica,freesans,sans-serif">La soluci&oacute;n es simple. A&ntilde;adir la bandera [R] para obligar el redireccionamiento.</span><br />\n&nbsp;\n<pre>\n<code> RewriteEngine On  \n  RewriteRule ^(.+)\\.do$ $1.html [R,NC]   \n</code></pre>\n<br />\n<span style="background-color:rgb(255, 255, 255); color:rgb(34, 34, 34); font-family:arial,tahoma,helvetica,freesans,sans-serif">Ahora si escribimos en el navegador &nbsp;www.loquesea.com/pagina.do, este nos redireccionar&aacute; a la URL www.loquesea.com/pagina.html.</span><br />\n<br />\n<span style="background-color:rgb(255, 255, 255); color:rgb(34, 34, 34); font-family:times new roman,serif">-</span><span style="background-color:rgb(255, 255, 255); color:rgb(34, 34, 34); font-family:arial,tahoma,helvetica,freesans,sans-serif">&nbsp;Ejemplo 4: Supongamos que hemos cambiado el nombre de un directorio en el servidor pero sin embargo queremos que sigan funcionando las peticiones que llegan sin que se produzca en mensaje 404 no encontrado.</span><br />\n&nbsp;\n<pre>\n<code> RewriteEngine On  \n RewriteRule ^(.*)/antiguo/(.*)$ /nuevo/$2/$1 [R,L]   \n</code></pre>\n<br />\n<span style="background-color:rgb(255, 255, 255); color:rgb(34, 34, 34); font-family:arial,tahoma,helvetica,freesans,sans-serif">Las banderas, expuestas en la tabla anterior, indican un forzado de redirecci&oacute;n [R] y que no se ejecutar&aacute; ninguna regla de reescritura posterior a la actual [L].</span><br />\n<br />\n<span style="background-color:rgb(255, 255, 255); color:rgb(34, 34, 34); font-family:arial,tahoma,helvetica,freesans,sans-serif">- Ejemplo 5:&nbsp;Supongamos que dentro de nuestro directorio ra&iacute;z tenemos una carpeta /busqueda con un fichero buscar.php. Este fichero me permite obtener la p&aacute;gina de b&uacute;squeda de Google con el par&aacute;metro dado, de esta forma:&nbsp;http://localhost/busqueda/buscar.php?id=hola.&nbsp;Sin embargo nos gustar&iacute;a poder crear una URL m&aacute;s corta que haga lo mismo:</span><br />\n&nbsp;\n<pre>\n<code> RewriteEngine On  \n RewriteRule ^buscar busqueda/buscar.php   [NC]\n</code></pre>\n<br />\n<span style="background-color:rgb(255, 255, 255); color:rgb(34, 34, 34); font-family:arial,tahoma,helvetica,freesans,sans-serif">De esta forma acceder&iacute;amos por medio de la URL http://localhost/buscar?id=hola. En este caso no necesitamos una redirecci&oacute;n HTTP ( bandera [R]).</span><br />\n<br />\n<span style="background-color:rgb(255, 255, 255); color:rgb(34, 34, 34); font-family:arial,tahoma,helvetica,freesans,sans-serif">-Ejemplo 6: Vamos a ver un ejemplo en el que usemos los anteriores tests. Queremos cachear miniaturas de im&aacute;genes y si no existen (las miniaturas) las crearemos autom&aacute;ticamente. Imaginemos que para esto &uacute;ltimo tenemos el script thumb.php.</span><br />\n&nbsp;\n<pre>\n<code>  RewriteEngine On   \n  RewriteCond %{REQUEST_FILENAME} !-f   \n  RewriteCond %{REQUEST_FILENAME} -([0-9]+)x([0-9]+)\\.(jpe?g|gif|png)$ [NC]   \n  RewriteRule ^(.*)-(.+)x(.+)\\.(.{3,4})$ /thumb.php?file=$1.$4&amp;ancho=$2&amp;alto=$3   \n</code></pre>\n<br />\n<span style="background-color:rgb(255, 255, 255); color:rgb(34, 34, 34); font-family:arial,tahoma,helvetica,freesans,sans-serif">La primera directiva comprueba si el fichero no existe, si no es as&iacute; contin&uacute;a.</span><br />\n<span style="background-color:rgb(255, 255, 255); color:rgb(34, 34, 34); font-family:arial,tahoma,helvetica,freesans,sans-serif">La segunda directiva comprueba si el final del nombre del fichero pedido termina en gui&oacute;n, seguido por dimensiones y una extensi&oacute;n. Por ejemplo podr&iacute;a ser ejemplo-256x128.jpg. Aceptar&iacute;a la condici&oacute;n y pasar&iacute;amos a la regla de reescritura.</span><br />\n<span style="background-color:rgb(255, 255, 255); color:rgb(34, 34, 34); font-family:arial,tahoma,helvetica,freesans,sans-serif">Como podemos ver, el patr&oacute;n de la regla de reescritura tiene 4 par&eacute;ntesis por lo que utilizaremos 4 referencias. Redireccionaremos al script thumb.php pasando las referencias anteriores:</span>\n\n - $1 ser&aacute; la cadena anterior al gui&oacute;n. El nombre de la imagen (ejemplo).&nbsp;\n\n - $2 ser&aacute; el valor que utilizaremos para el ancho de la miniatura (256).\n\n - $3 ser&aacute; el valor que utilizaremos para el alto de la miniatura (128).\n\n- $4 ser&aacute; el valor que utilizaremos para el tipo de imagen que generaremos (jpg).\n\n\n&nbsp;\n\n\n<h3>Reglas de reescritura - Parte 3: Ejemplos completos</h3>\n\nVamos a ver varios ejemplos que combinan las distintas directivas vistas:<br />\n<br />\n- Ejemplo 1: Permitir el acceso al area de administraci&oacute;n solo desde la red local.<br />\n&nbsp;\n<pre>\n<code> RewriteEngine On  \n RewriteCond %{REMOTE_ADDR} !^192\\.168\\.1\\.[0-9]+$  \n RewriteRule /admin - [F]  \n</code></pre>\n<br />\nDe esta manera si la direcci&oacute;n que hace la petici&oacute;n al servidor, no coincide con el patr&oacute;n, y la URI a la que intentamos acceder es /admin (&aacute;rea&nbsp;de administraci&oacute;n) no redireccionaremos y mostraremos la p&aacute;gina de error 403 (acceso&nbsp;prohibido).<br />\n<br />\n- Ejemplo 2: Mostrar una p&aacute;gina distinta dependiendo del navegador que estemos usando para realizar las peticiones al servidor.<br />\n&nbsp;\n<pre>\n<code> RewriteEngine On  \n RewriteCond %{HTTP_USER_AGENT} ^Mozilla  \n RewriteRule ^/$ /index.max.html [L]  \n RewriteCond %{HTTP_USER_AGENT} ^Lynx  \n RewriteRule ^/$ /index.min.html [L]  \n RewriteRule ^/$ /index.html [L]  \n</code></pre>\n<br />\n<a name="more"></a>- Ejemplo 3: &nbsp;Ten&iacute;amos un fichero index.php que recib&iacute;a un par&aacute;metro lang, para traducir el mensaje de bienvenida. &nbsp;http://localhost/index.php?lang=es. &nbsp;Pero actualmente se ha cambiado la forma de traducir del sitio web, y se han creado distintos directorios para cada idioma y dentro un index.php con el mensaje traducido. Por ejemplo http://localhost/es/index.php<br />\n<br />\nSin embargo se quiere seguir utilizando la misma forma de traducir.<br />\n&nbsp;\n<pre>\n<code> RewriteEngine On  \n RewriteCond %{QUERY_STRING} lang=(.*)  \n RewriteRule ^index\\.php$ /%1/$1  \n</code></pre>\n<br />\nCon la&nbsp;variable&nbsp;de Apache {QUERY_STRING} guardamos la cadena de par&aacute;metros de una URL din&aacute;mica (query string). O dicho de otra manera lo que sigue al&nbsp;car&aacute;cter&nbsp;&quot;?&quot;. La variable %1 se refiere al contenido entre&nbsp;par&eacute;ntesis&nbsp;de la directiva RewriteCond. Siguiendo el ejemplo ser&iacute;a &quot;es&quot;. Y finalmente $1 &nbsp;se referir&aacute; a todo el conjunto que se corresponda con dicha expresi&oacute;n (index.php).<br />\n<br />\n- Ejemplo 4: A&ntilde;adir &quot;www.&quot;, si es necesario, delante de una URL.<br />\n&nbsp;\n<pre>\n<code> RewriteEngine on  \n RewriteCond %{HTTP_HOST} !^www\\. [NC]  \n RewriteCond %{HTTP_HOST} ^([a-z.]+)$ [NC]  \n RewriteRule ^/(.*)$ http://www.%1/$1 [R=301,L]  \n</code></pre>\n<br />\nSi la URL que introducimos no lleva www (primera RewriteCond) antes del host y el nombre de dicho host entra dentro del patr&oacute;n (segunda RewriteCond) efectuaremos la reescritura. Con lo que si introducimos en el navegador la URL dominio.com/prueba se nos rediriguir&aacute; a www.dominio.com/prueba.<br />\nLa variable %1 es el nombre del host. Capturado en la segunda RewriteCond y $1 es el contenido de la URL posterior al dominio. Capturado de RewriteRule<br />\n<br />\n- Ejemplo 5:&nbsp;Queremos&nbsp;denegar el acceso a determinada hora del d&iacute;a (acceso prohibido).<br />\n&nbsp;\n<pre>\n<code> RewriteEngine On  \n RewriteBase /  \n # si hora es 16 (4 PM) denegar el acceso  \n RewriteCond %{TIME_HOUR} ^16$  \n RewriteRule ^.*$ - [F,L]  \n</code></pre>\n<br />\n- Ejemplo 6: Queremos evitar el uso de recursos sin permiso de tu servidor desde otra web (hot linking). Como podr&iacute;a ser el caso en que tengamos fotos alojadas en nuestro servidor y alguien, sin permiso, las publica en un sitio web ajeno. Por lo que vamos a denegar todas las peticiones de&nbsp;im&aacute;genes&nbsp;que sean de un dominio ajeno al tuyo (www.tudominio.com)<br />\n&nbsp;\n<pre>\n<code> RewriteEngine On  \n RewriteCond %{HTTP_REFERER} !^$  \n RewriteCond %{HTTP_REFERER} !^http://(www\\.)?tudominio\\.com/ [NC]  \n RewriteCond %{REQUEST_URI} !nohotlink\\.(gif|png) [NC]  \n RewriteRule .*\\.(gif|jpg|png|flv)$ http://www.tudominio.com/image/nohotlink.png [NC]  \n</code></pre>\n<br />\nCon la primera condici&oacute;n verificamos que el &quot;http referer&quot; no este&nbsp;vaci&oacute;. la variable HTTP_REFERER identifica la direcci&oacute;n de donde proviene la petici&oacute;n.<br />\nCon la segunda condici&oacute;n verificamos si la direcci&oacute;n de la petici&oacute;n no pertenece a nuestro dominio (www.tudominio.com).<br />\nCon la tercera condici&oacute;n verificamos si en la URI solicitada no se encuentra el nombre de la imagen a la que queremos redireccionar. Esta condici&oacute;n es necesaria para que no se produzca la redirecci&oacute;n al intentar acceder a esta imagen.<br />\nLa regla de reescritura&nbsp;indica&nbsp;que cualquier&nbsp;solicitud, cumpliendo las condiciones anteriores,&nbsp;de una imagen &nbsp;ser&aacute; redirigida a una imagen en particular. Esta ser&aacute; la imagen que queremos que se muestre en las peticiones que intentan coger&nbsp;im&aacute;genes&nbsp;sin permiso.<br />\n<br />\n- Ejemplo 7: Despu&eacute;s de esta peque&ntilde;a introducci&oacute;n ya seremos capaces de crear las reglas necesarias para nuestro objetivo inicial, reescribir URLs para que sean amigables.<br />\n&nbsp;\n<pre>\n<code> &lt;IfModule mod_rewrite.c&gt;  \n      # Activar RewriteEngine  \n      RewriteEngine on  \n      RewriteBase /   \n      RewriteCond %{SCRIPT_FILENAME} !-d  \n      RewriteCond %{SCRIPT_FILENAME} !-f  \n      # Reescribir la URL solicitada por el usuario  \n      #  Entrada: ID  \n      #  Salida: app.php?id=ID  \n      RewriteRule ^([0-9]+)$ app.php?id=$1  \n &lt;/IfModule&gt;  \n</code></pre>\n<br />\nEl siguiente condicional sirve para comprobar que el m&oacute;dulo est&aacute; cargado en la configuraci&oacute;n de Apache&nbsp;antes de hacer nada.&nbsp;<br />\n&nbsp;\n<pre>\n<code> &lt;IfModule mod_rewrite.c&gt;   \n &lt;/IfModule&gt;   \n</code></pre>\n<br />\nLuego hemos a&ntilde;adido &ldquo;RewriteBase /&rdquo; que indica que el directorio base es el ra&iacute;z de host virtual.&nbsp;<br />\nAdem&aacute;s hemos a&ntilde;adido dos condiciones para restringir la reescritura s&oacute;lo a rutas que no existan previamente. Es decir, que no valdr&iacute;a realizar reescritura, por ejemplo, para www.dominio.com/img/img.png (suponemos que esta ruta y recurso existe). La primera condici&oacute;n previene los directorios que ya existan con la bandera !-d y la segunda hace que se ignoren ficheros que ya existan con la bandera !-f.&nbsp;<br />\nLuego, en la regla de reescritura, tenemos una entrada compuesta por n&uacute;meros. La salida que ya conoce nuestro c&oacute;digo PHP (aunque esto est&aacute; oculto al usuario) es app.php?id=$1, siendo $1 el valor que ente los par&eacute;ntesis.<br />\n<br />\n- Ejemplo 8: En este ejemplo muy similar al anterior. Utilizamos cualquier car&aacute;cter (no solo n&uacute;meros) para redireccionar. Por lo tanto http://localhost/mvc/acl/permisos sera transformado internamente a&nbsp;http://localhost/index.php?url=acl/permisos para que lo entienda el servidor<br />\n&nbsp;\n<pre>\n<code>  RewriteEngine on   \n  RewriteBase /mvc/   \n  RewriteCond %{REQUEST_FILENAME} !-d   \n  RewriteCond %{REQUEST_FILENAME} !-f   \n  RewriteCond %{REQUEST_FILENAME} !-l   \n  RewriteRule ^(.+)$ index.php?url=$1 [QSA,L]   \n</code></pre>\n\n', 'alexander', 'Programacion', 162, 0, '2014-10-28 03:02:50', 0);
INSERT INTO `noticias` (`id`, `titulo`, `foto`, `contenido`, `user`, `categoria`, `visitas`, `id_comentario`, `publicado`, `comentarios`) VALUES
(25, 'workers', 'imagenes/workers-feature.png', '<h2>El problema de la simultaneidad en JavaScript</h2>\n\n<p>Existen varios obst&aacute;culos que evitan que las aplicaciones interesantes se extrapolen (es decir, de implementaciones principalmente de servidor) a JavaScript del cliente. Algunas de estas aplicaciones incluyen compatibilidad de navegadores, escritura est&aacute;tica, accesibilidad y rendimiento. Afortunadamente, el rendimiento se est&aacute; convirtiendo r&aacute;pidamente en algo del pasado, pues los desarrolladores de navegadores mejoran con gran rapidez la velocidad de los motores JavaScript de estos.</p>\n\n<p>De hecho, uno de los obst&aacute;culos que a&uacute;n se mantienen en JavaScript es el lenguaje en s&iacute;. JavaScript es un entorno de subproceso &uacute;nico, es decir, que no se pueden ejecutar varias secuencias de comandos al mismo tiempo. Por ejemplo, imagina un sitio que necesite gestionar eventos de interfaz de usuario, solicitar y procesar grandes cantidades de datos de API y manipular los DOM. Algo muy com&uacute;n, &iquest;verdad? Desafortunadamente, todo esto no puede realizarse de forma simult&aacute;nea debido a las limitaciones en el tiempo de ejecuci&oacute;n de los navegadores de JavaScript. La ejecuci&oacute;n de secuencias de comandos se realiza en un &uacute;nico subproceso.</p>\n\n<p>Los desarrolladores imitan la &quot;simultaneidad&quot; utilizando t&eacute;cnicas como<code>setTimeout()</code>,&nbsp;<code>setInterval()</code>&nbsp;y&nbsp;<code>XMLHttpRequest</code>, as&iacute; como gestores de eventos. S&iacute;, todas estas funciones se ejecutan de forma as&iacute;ncrona; sin embargo, que no se bloqueen unas a otras no significa necesariamente que tengan lugar de forma simult&aacute;nea. Los eventos as&iacute;ncronos se procesan despu&eacute;s de haber generado la secuencia de comandos que se est&eacute; ejecutando en ese momento. La buena noticia es que HTML5 nos ofrece algo mejor que este tipo de trucos de hacker.</p>\n\n<h2>Introducci&oacute;n a los Web Workers: implementar subprocesos en JavaScript</h2>\n\n<p>La especificaci&oacute;n de&nbsp;<a href="http://www.whatwg.org/specs/web-workers/current-work/" style="color: rgb(80, 139, 136);">Web Workers</a>&nbsp;recomienda un API para generar secuencias de comandos en segundo plano en tu aplicaci&oacute;n web. Los Web Workers te permiten realizar acciones como activar secuencias de comandos con tiempos de ejecuci&oacute;n largos para gestionar tareas intensivas de computaci&oacute;n, pero sin bloquear la interfaz de usuario u otras secuencias de comandos para gestionar las interacciones del usuario. Nos ayudar&aacute;n a acabar con esos molestos cuadros de di&aacute;logo, a los que todos hemos cogido cari&ntilde;o, que informan de que la secuencia de comandos no responde.</p>\n\n<p><img alt="Cuadro de diálogo que informa de que la secuencia de comandos no responde" src="http://www.html5rocks.com/static/images/screenshots/workers/unresponsive_script.gif" style="border:0px; box-sizing:border-box; height:100px; max-width:100%; vertical-align:middle; width:450px" title="La secuencia de comandos no responde" />Cuadro de di&aacute;logo habitual para informar de que la secuencia de comandos no responde</p>\n\n<p>Los Web Workers utilizan una transferencia de mensajes similar a los subprocesos para alcanzar el paralelismo. Son perfectos para mantener tu interfaz actualizada, eficiente y receptiva para los usuarios.</p>\n\n<h3>Tipos de Web Workers</h3>\n\n<p>Es importante destacar que en la&nbsp;<a href="http://www.whatwg.org/specs/web-workers/current-work/" style="color: rgb(80, 139, 136);">especificaci&oacute;n</a>&nbsp;se debaten dos tipos de Web Workers:&nbsp;<a href="http://www.whatwg.org/specs/web-workers/current-work/#dedicated-workers-and-the-worker-interface" style="color: rgb(80, 139, 136);">los Workers dedicados</a>&nbsp;y los&nbsp;<a href="http://www.whatwg.org/specs/web-workers/current-work/#sharedworker" style="color: rgb(80, 139, 136);">Workers compartidos</a>. En este art&iacute;culo solo se ofrecer&aacute; informaci&oacute;n sobre los Workers dedicados y, a lo largo del mismo, se har&aacute; referencia a ellos como &quot;Web Workers&quot; o &quot;Workers&quot;.</p>\n\n<h2>Introducci&oacute;n</h2>\n\n<p>Los Web Workers se ejecutan en un subproceso aislado. Como resultado, es necesario que el c&oacute;digo que ejecutan se encuentre en un archivo independiente. Sin embargo, antes de hacer esto, lo primero que tienes que hacer es crear un nuevo objeto&nbsp;<code>Worker</code>&nbsp;en tu p&aacute;gina principal. El constructor toma el nombre de la secuencia de comandos del Worker.</p>\n\n<pre><code>\nvar worker = new Worker</code></pre>\n\n<p>Si el archivo especificado existe, el navegador generar&aacute; un nuevo subproceso de Worker que lo descargar&aacute; de forma as&iacute;ncrona. El Worker no empezar&aacute; hasta que el archivo se haya descargado completamente y se haya ejecutado. Si la ruta a tu Worker devuelve un error 404, el Worker fallar&aacute; autom&aacute;ticamente.</p>\n\n<p>Despu&eacute;s de crear el Worker, comienza ejecutando el m&eacute;todo&nbsp;<code>postMessage()</code>.</p>\n\n<pre><code>\nworker.postMessage(); // Start the worker.</code></pre>\n\n<h3>C&oacute;mo establecer comunicaci&oacute;n con un Worker mediante transferencia de mensajes</h3>\n\n<p>La comunicaci&oacute;n entre un Worker y su p&aacute;gina principal se realiza mediante un modelo de evento y el m&eacute;todo&nbsp;<code>postMessage()</code>. En funci&oacute;n del navegador o de la versi&oacute;n,&nbsp;<code>postMessage()</code>&nbsp;puede aceptar una cadena o un objeto JSON como argumento &uacute;nico. Las &uacute;ltimas versiones de los navegadores modernos son compatibles con la transferencia de objetos JSON.</p>\n\n<p>A continuaci&oacute;n, se muestra un ejemplo sobre c&oacute;mo utilizar una cadena para transferir &quot;Hello World&quot; a un Worker en doWork.js. El Worker simplemente devuelve el mensaje que se le transfiere.</p>\n\n<p>Secuencia de comandos principal:</p>\n\n<pre>\n<code>var worker = new Worker(''doWork.js'');\n\nworker.addEventListener(''message'',function(e) {\n  console.log(''Worker said:'', e.data);\n},false);\n\nworker.postMessage(''Hello World''); // Send data to our worker.\n</code></pre>\n<p>doWork.js (el Worker):</p>\n<pre><code>\nself.addEventListener(''message'',function(e) {\n  self.postMessage(e.data);\n}, false);</code></pre>\n\n<p>Cuando se ejecuta&nbsp;<code>postMessage()</code>&nbsp;desde la p&aacute;gina principal, nuestro Worker gestiona este mensaje definiendo un gestor&nbsp;<code>onmessage</code>&nbsp;para el evento<code>message</code>. Se puede acceder a la carga del mensaje (en este caso &quot;Hello World&quot;) en&nbsp;<code>Event.data</code>. Aunque este ejemplo concreto no es demasiado emocionante, demuestra que&nbsp;<code>postMessage()</code>&nbsp;tambi&eacute;n sirve para transferir datos de vuelta al subproceso principal. Algo que resulta conveniente.</p>\n\n<p>Los mensajes que se transfieren entre la p&aacute;gina principal y los Workers se copian, no se comparten. Por ejemplo, en el siguiente ejemplo, a la propiedad &quot;msg&quot; del mensaje JSON se accede en las dos ubicaciones. Parece que el objeto se transfiere directamente al Worker aunque se est&eacute; ejecutando en un espacio espec&iacute;fico e independiente. En realidad, lo que ocurre es que el objeto se serializa mientras se transfiere al Worker y, posteriormente, se anula la serializaci&oacute;n en la otra fase del proceso. La p&aacute;gina y el Worker no comparten la misma instancia, por lo que el resultado final es la creaci&oacute;n de un duplicado en cada transferencia. La mayor&iacute;a de los navegadores implementan esta funci&oacute;n mediante la codificaci&oacute;n/descodificaci&oacute;n JSON autom&aacute;tica del valor en la otra fase del proceso.</p>\n\n<p>En el siguiente ejemplo, que es m&aacute;s complejo, se transfieren mensajes utilizando objetos JSON.</p>\n\n\n\n<pre><code>\n&lt;button onclick="sayHI()">Say HI&lt;/button>\n&lt;button onclick="unknownCmd()">Send unknown command&lt;/button>\n&lt;button onclick="stop()">Stop worker&lt;/button>\n&lt;output id="result">&lt;/output>\n\n&lt;script>\n  function sayHI() {\n    worker.postMessage({''cmd'': ''start'', ''msg'': ''Hi''});\n  }\n\n  function stop() {\n    // Calling worker.terminate() from this script would also stop the worker.\n    worker.postMessage({''cmd'': ''stop'', ''msg'': ''Bye''});\n  }\n\n  function unknownCmd() {\n    worker.postMessage({''cmd'': ''foobard'', ''msg'': ''???''});\n  }\n\n  var worker = new Worker(''doWork2.js'');\n\n  worker.addEventListener(''message'', function(e) {\n    document.getElementById(''result'').textContent = e.data;\n  }, false);\n&lt;/script>\n</code></pre>\n\n<p>doWork2.js:</p>\n\n<pre><code>\nself.addEventListener(''message'', function(e) {\n  var data = e.data;\n  switch (data.cmd) {\n    case ''start'':\n      self.postMessage(''WORKER STARTED: '' + data.msg);\n      break;\n    case ''stop'':\n      self.postMessage(''WORKER STOPPED: '' + data.msg + ''. (buttons will no longer work)'');\n      self.close(); // Terminates the worker.\n      break;\n    default:\n      self.postMessage(''Unknown command: '' + data.msg);\n  };\n}, false);</code></pre>\n\n<p><strong>Nota:</strong>&nbsp;existen dos formas de detener un Worker: ejecutando<code>worker.terminate()</code>&nbsp;desde la p&aacute;gina principal o ejecutando&nbsp;<code>self.close()</code>dentro del propio Worker.</p>\n\n<p><strong>Ejemplo:</strong>&nbsp;&iexcl;ejecuta este Worker!</p>\n\n<div class="example" style="padding: 10px; border: 1px solid rgb(204, 204, 204); color: rgb(85, 85, 85); font-family: ''Helvetica Neue'', Helvetica, Arial, sans-serif; font-size: 17px; line-height: 12.75px; background-color: rgb(255, 255, 255);">Decir &quot;Hola&quot;&nbsp;Enviar comando desconocido&nbsp;Detener WorkerWORKER STOPPED: Bye. (buttons will no longer work)</div>\n\n<h2>El entorno del Worker</h2>\n\n<h3>Alcance del Worker</h3>\n\n<p>En el contexto de un Worker, tanto&nbsp;<code>self</code>&nbsp;como&nbsp;<code>this</code>&nbsp;hacen referencia al alcance global del Worker. Por tanto, el ejemplo anterior tambi&eacute;n se podr&iacute;a haber escrito de la siguiente forma:</p>\n\n<pre>\n<code>\n  addEventListener(''message'', function(e) {\n  var data = e.data;\n  switch (data.cmd) {\n    case ''start'':\n      postMessage(''WORKER STARTED: '' + data.msg);\n      break;\n    case ''stop'':\n  ...\n}, false);\n</code></pre>\n\n<p>De forma alternativa, tambi&eacute;n podr&iacute;as configurar el gestor de eventos<code>onmessage</code>&nbsp;directamente (aunque los expertos en JavaScript siempre recomiendan&nbsp;<code>addEventListener</code>).</p>\n\n<pre><code>\nonmessage = function</span>(e) {\n  var data = e.data;\n  ...\n};</code></pre>\n\n<h3>Funciones disponibles para Workers</h3>\n\n<p>Debido al comportamiento con m&uacute;ltiples subprocesos caracter&iacute;stico de los Web Workers, estos solo pueden acceder al siguiente conjunto de funciones de JavaScript:</p>\n\n<ul>\n  <li>Objeto&nbsp;<code>navigator</code></li>\n  <li>Objeto&nbsp;<code>location</code>&nbsp;(de solo lectura)</li>\n  <li><code>XMLHttpRequest</code></li>\n  <li><code>setTimeout()/clearTimeout()</code>&nbsp;y<code>setInterval()/clearInterval()</code></li>\n  <li><a href="http://www.html5rocks.com/tutorials/appcache/beginner/" style="color: rgb(80, 139, 136);">Cach&eacute; de la aplicaci&oacute;n</a></li>\n  <li>Importaci&oacute;n de secuencias de comandos externas a trav&eacute;s del m&eacute;todo<code>importScripts()</code></li>\n  <li><a href="http://www.html5rocks.com/es/tutorials/workers/basics/#toc-enviornment-subworkers" style="color: rgb(80, 139, 136);">Generaci&oacute;n de otros Web Workers</a></li>\n</ul>\n\n<p>Los Workers NO pueden acceder a las siguientes funciones:</p>\n\n<ul>\n  <li>DOM (no es seguro para el subproceso)</li>\n  <li>Objeto&nbsp;<code>window</code></li>\n  <li>Objeto&nbsp;<code>document</code></li>\n  <li>Objeto&nbsp;<code>parent</code></li>\n</ul>\n\n<h3>C&oacute;mo cargar secuencias de comandos externas</h3>\n\n<p>Puedes cargar bibliotecas o archivos de secuencias de comandos externas en un Worker con la funci&oacute;n&nbsp;<code>importScripts()</code>. El m&eacute;todo utiliza cero o m&aacute;s cadenas que representan los nombres de archivo de los recursos que se van a importar.</p>\n\n<p>En este ejemplo se carga&nbsp;<code>script1.js</code>&nbsp;y&nbsp;<code>script2.js</code>&nbsp;en el Worker:</p>\n\n<p>worker.js:</p>\n\n<pre><code>\nimportScripts(''script1.js'');\nimportScripts(''script2.js'');</code></pre>\n\n<p>Que tambi&eacute;n se puede escribir como una &uacute;nica instrucci&oacute;n de importaci&oacute;n:</p>\n\n<pre><code>\nimportScripts(''script1.js'',''script2.js'');</code></pre>\n\n<h3>Subworkers</h3>\n\n<p>Los Workers tienen la capacidad de generar Workers secundarios. Esto es algo fant&aacute;stico para dividir a&uacute;n m&aacute;s las tareas intensivas en el tiempo de ejecuci&oacute;n. Sin embargo, a la hora de utilizar los Subworkers es necesario tener en cuenta los siguientes aspectos:</p>\n\n<ul>\n  <li>Los Subworkers deben estar alojados en el mismo origen que la p&aacute;gina principal.</li>\n  <li>La resoluci&oacute;n de las URI de los Subworkers est&aacute; relacionada con la ubicaci&oacute;n de su Worker principal (en oposici&oacute;n a la p&aacute;gina principal).</li>\n</ul>\n\n<p>Ten en cuenta que la mayor&iacute;a de los navegadores generan procesos independientes para cada Worker. Antes de que generes un conjunto de Workers, debes tener cuidado para no utilizar demasiados recursos del sistema del usuario. Una de las razones de esta advertencia se debe a que los mensajes transferidos entre las p&aacute;ginas principales y los Workers se copian, no se comparten. Consulta la secci&oacute;n&nbsp;<a href="http://www.html5rocks.com/es/tutorials/workers/basics/#toc-gettingstarted-workercomm" style="color: rgb(80, 139, 136);">C&oacute;mo establecer comunicaci&oacute;n con un Worker mediante transferencia de mensajes</a>.</p>\n\n<p>Para obtener m&aacute;s informaci&oacute;n sobre c&oacute;mo generar un Subworker, consulta el<a href="http://www.whatwg.org/specs/web-workers/current-work/#delegation" style="color: rgb(80, 139, 136);">ejemplo</a>&nbsp;que aparece en la especificaci&oacute;n.</p>\n\n<h2>Workers integrados</h2>\n\n<p>&iquest;Y qu&eacute; ocurre si quieres crear sobre la marcha una secuencia de comandos para tu Worker o si quieres crear una p&aacute;gina autosuficiente sin tener que crear archivos de Worker independientes? Con la nueva interfaz&nbsp;<a href="http://dev.w3.org/2009/dap/file-system/file-writer.html#the-blobbuilder-interface" style="color: rgb(80, 139, 136);"><code>BlobBuilder</code></a>, puedes &quot;integrar&quot; tu Worker en el mismo archivo HTML como l&oacute;gica principal creando un&nbsp;<code>BlobBuilder</code>&nbsp;y a&ntilde;adiendo el c&oacute;digo del Worker como una cadena.</p>\n\n<pre>\n<code>\n  // Prefixed in Webkit, Chrome 12, and FF6: window.WebKitBlobBuilder, window.MozBlobBuilder\nvar bb = new BlobBuilder();\nbb.append("onmessage = function(e) { postMessage(''msg from worker''); }");\n\n// Obtain a blob URL reference to our worker ''file''.\n// Note: window.webkitURL.createObjectURL() in Chrome 10+.\nvar blobURL = window.URL.createObjectURL(bb.getBlob());\n\nvar worker = new Worker(blobURL);\nworker.onmessage = function(e) {\n  // e.data == ''msg from worker''\n};\nworker.postMessage(); // Start the worker.\n</code></pre>\n\n<h3>URL Blob</h3>\n\n<p>Lo incre&iacute;ble comienza con la ejecuci&oacute;n de&nbsp;<a href="http://dev.w3.org/2006/webapi/FileAPI/#dfn-createObjectURL" style="color: rgb(80, 139, 136);"><code>window.URL.createObjectURL()</code></a>. Este m&eacute;todo crea una cadena de URL sencilla que se puede utilizar para hacer referencia a datos almacenados en un archivo&nbsp;<code>File</code>&nbsp;DOM o en un objeto&nbsp;<code>Blob</code>. A continuaci&oacute;n se indica un ejemplo:</p>\n\n<pre>\nblob:http:<em>//localhost/c745ef73-ece9-46da-8f66-ebes574789b1</em></pre>\n\n<p>Las URL Blob son &uacute;nicas y su duraci&oacute;n es la misma que la de tu aplicaci&oacute;n (por ejemplo, hasta que&nbsp;<code>document</code>&nbsp;se descargue). Si est&aacute;s creando muchas URL Blob, ser&iacute;a buena idea liberar referencias que ya no sean necesarias. Para liberar una URL Blob de forma expl&iacute;cita, transfi&eacute;rela a<a href="http://dev.w3.org/2006/webapi/FileAPI/#dfn-revokeObjectURL" style="color: rgb(80, 139, 136);"><code>window.URL.revokeObjectURL()</code></a>, tal y como se muestra a continuaci&oacute;n.</p>\n\n<pre>\nwindow.URL.revokeObjectURL(blobURL); <em>// window.webkitURL.createObjectURL() in Chrome 10+.</em></pre>\n\n<p>En Chrome, existe una p&aacute;gina estupenda para visualizar todas las URL Blob que has creado:&nbsp;<code>chrome://blob-internals/</code>.</p>\n\n<h3>Ejemplo completo</h3>\n\n<p>Para ampliar este paso, podemos profundizar m&aacute;s sobre c&oacute;mo se integra el c&oacute;digo JS del Worker en tu p&aacute;gina. Esta t&eacute;cnica utiliza una etiqueta&nbsp;<code>&lt;script&gt;</code>para definir el Worker:</p>\n\n<pre><code>\n<span style="color:rgb(51, 135, 204)">&lt;!DOCTYPE html&gt;</span>\n<span style="color:rgb(137, 189, 255)">&lt;html&gt;</span>\n<span style="color:rgb(137, 189, 255)">&lt;head&gt;</span>\n  <span style="color:rgb(137, 189, 255)">&lt;meta</span> <span style="color:rgb(189, 183, 107)">charset</span>=<span style="color:rgb(101, 176, 66)">&quot;utf-8&quot;</span> <span style="color:rgb(137, 189, 255)">/&gt;</span>\n<span style="color:rgb(137, 189, 255)">&lt;/head&gt;</span>\n<span style="color:rgb(137, 189, 255)">&lt;body&gt;</span>\n\n  <span style="color:rgb(137, 189, 255)">&lt;div</span> <span style="color:rgb(189, 183, 107)">id</span>=<span style="color:rgb(101, 176, 66)">&quot;log&quot;</span><span style="color:rgb(137, 189, 255)">&gt;&lt;/div&gt;</span>\n\n  <span style="color:rgb(137, 189, 255)">&lt;script</span> <span style="color:rgb(189, 183, 107)">id</span>=<span style="color:rgb(101, 176, 66)">&quot;worker1&quot;</span> <span style="color:rgb(189, 183, 107)">type</span>=<span style="color:rgb(101, 176, 66)">&quot;javascript/worker&quot;</span><span style="color:rgb(137, 189, 255)">&gt;</span>\n    <em>// This script won&#39;t be parsed by JS engines because its type is javascript/worker.</em>\n    self.onmessage = <span style="color:rgb(226, 137, 100)">function</span>(e) {\n      self.postMessage(<span style="color:rgb(101, 176, 66)">&#39;msg from worker&#39;</span>);\n    };\n    <em>// Rest of your worker code goes here.</em>\n  <span style="color:rgb(137, 189, 255)">&lt;/script&gt;</span>\n\n  <span style="color:rgb(137, 189, 255)">&lt;script&gt;</span>\n    <span style="color:rgb(226, 137, 100)">function</span> log(msg) {\n      <em>// Use a fragment: browser will only render/reflow once.</em>\n      <span style="color:rgb(226, 137, 100)">var</span> fragment = document.createDocumentFragment();\n      fragment.appendChild(document.createTextNode(msg));\n      fragment.appendChild(document.createElement(<span style="color:rgb(101, 176, 66)">&#39;br&#39;</span>));\n\n      document.querySelector(<span style="color:rgb(101, 176, 66)">&quot;#log&quot;</span>).appendChild(fragment);\n    }\n\n    <span style="color:rgb(226, 137, 100)">var</span> bb = <span style="color:rgb(226, 137, 100)">new</span> <span style="color:rgb(137, 189, 255)">BlobBuilder</span>();\n    bb.append(document.querySelector(<span style="color:rgb(101, 176, 66)">&#39;#worker1&#39;</span>).textContent);\n\n    <em>// Note: window.webkitURL.createObjectURL() in Chrome 10+.</em>\n    <span style="color:rgb(226, 137, 100)">var</span> worker = <span style="color:rgb(226, 137, 100)">new</span> <span style="color:rgb(137, 189, 255)">Worker</span>(window.URL.createObjectURL(bb.getBlob()));\n    worker.onmessage = <span style="color:rgb(226, 137, 100)">function</span>(e) {\n      log(<span style="color:rgb(101, 176, 66)">&quot;Received: &quot;</span> + e.data);\n    }\n    worker.postMessage(); <em>// Start the worker.</em>\n  <span style="color:rgb(137, 189, 255)">&lt;/script&gt;</span>\n<span style="color:rgb(137, 189, 255)">&lt;/body&gt;</span>\n<span style="color:rgb(137, 189, 255)">&lt;/html&gt;</span></code></pre>\n\n<p>En mi opini&oacute;n, este nuevo enfoque es un poco m&aacute;s claro y m&aacute;s legible. Define una etiqueta de secuencia de comandos con&nbsp;<var>id=&quot;worker1&quot;</var>&nbsp;y<var>type=&#39;javascript/worker&#39;</var>&nbsp;(por lo que el navegador no analiza el JS). Este c&oacute;digo se extrae en forma de cadena mediante<code>document.querySelector(&#39;#worker1&#39;).textContent</code>&nbsp;y se transfiere a<code>BlobBuilder.append()</code>.</p>\n\n<h3>C&oacute;mo cargar secuencias de comandos externas</h3>\n\n<p>Al utilizar estas t&eacute;cnicas para integrar tu c&oacute;digo de Worker,&nbsp;<code>importScripts()</code>solo funcionar&aacute; si proporcionas una URI absoluta. Si intentas transferir una URI relativa, el navegador devolver&aacute; un error de seguridad. El motivo de esto es que el Worker (ahora creado desde una URL Blob) se resolver&aacute; con un prefijo<code>blob:</code>, mientras que tu aplicaci&oacute;n se estar&aacute; ejecutando desde un esquema diferente (probablemente&nbsp;<code>http://</code>). Por lo tanto, el error se deber&aacute; a restricciones de or&iacute;genes cruzados.</p>\n\n<p>Una forma de utilizar&nbsp;<code>importScripts()</code>&nbsp;en un Worker integrado es &quot;inyectar&quot; la URL actual desde la que se est&aacute; ejecutando tu secuencia de comandos principal. Para ello, transfi&eacute;rela al Worker integrado y crea la URL absoluta de forma manual. De esta forma, te asegurar&aacute;s de que la secuencia de comandos externa se ha importado desde el mismo origen. Suponiendo que tu aplicaci&oacute;n principal se ejecute desde http://example.com/index.html:</p>\n\n<pre><code>\n...\n&lt;script id=<span style="color:rgb(101, 176, 66)">&quot;worker2&quot;</span> type=<span style="color:rgb(101, 176, 66)">&quot;javascript/worker&quot;</span>&gt;\n<span style="color:rgb(226, 137, 100)">self</span>.onmessage = <span style="color:rgb(226, 137, 100)">function</span>(e) {\n  <span style="color:rgb(226, 137, 100)">var</span> data = e.data;\n\n  <span style="color:rgb(226, 137, 100)">if</span> (data.url) {\n    <span style="color:rgb(226, 137, 100)">var</span> url = data.url.href;\n    <span style="color:rgb(226, 137, 100)">var</span> index = url.indexOf(<span style="color:rgb(101, 176, 66)">&#39;index.html&#39;</span>);\n    <span style="color:rgb(226, 137, 100)">if</span> (index != -<span style="color:rgb(51, 135, 204)">1</span>) {\n      url = url.substring(<span style="color:rgb(51, 135, 204)">0</span>, index);\n    }\n    importScripts(url + <span style="color:rgb(101, 176, 66)">&#39;engine.js&#39;</span>);\n  }\n  ...\n};\n&lt;<span style="color:rgb(101, 176, 66)">/script&gt;\n&lt;script&gt;\n  var worker = new Worker(window.URL.createObjectURL(bb.getBlob()));\n  worker.postMessage(</span><strong><span style="color:rgb(101, 176, 66)">{url: document.location}</span></strong><span style="color:rgb(101, 176, 66)">);\n&lt;/</span>script&gt;</code></pre>\n\n<h2>C&oacute;mo gestionar errores</h2>\n\n<p>Como con cualquier l&oacute;gica de JavaScript, es posible que quieras gestionar todos los errores que se producen en tus Web Workers. Si se produce un error mientras se ejecuta un Worker, se activa un evento&nbsp;<code>ErrorEvent</code>. La interfaz incluye tres propiedades &uacute;tiles para descubrir la causa del error:&nbsp;<code>filename</code>&nbsp;(el nombre de la secuencia de comandos del Worker que caus&oacute; el error),&nbsp;<code>lineno</code>(el n&uacute;mero de l&iacute;nea donde se produjo el error) y&nbsp;<code>message</code>&nbsp;(una descripci&oacute;n significativa del error). A continuaci&oacute;n, se muestra un ejemplo sobre c&oacute;mo configurar un gestor de eventos&nbsp;<code>onerror</code>&nbsp;para reproducir las propiedades del error.</p>\n\n<pre><code>\n<span style="color:rgb(137, 189, 255)">&lt;output</span> <span style="color:rgb(189, 183, 107)">id</span>=<span style="color:rgb(101, 176, 66)">&quot;error&quot;</span> <span style="color:rgb(189, 183, 107)">style</span>=<span style="color:rgb(101, 176, 66)">&quot;</span><span style="color:rgb(226, 137, 100)">color</span>: red;<span style="color:rgb(101, 176, 66)">&quot;</span><span style="color:rgb(137, 189, 255)">&gt;&lt;/output&gt;</span>\n<span style="color:rgb(137, 189, 255)">&lt;output</span> <span style="color:rgb(189, 183, 107)">id</span>=<span style="color:rgb(101, 176, 66)">&quot;result&quot;</span><span style="color:rgb(137, 189, 255)">&gt;&lt;/output&gt;</span>\n\n<span style="color:rgb(137, 189, 255)">&lt;script&gt;</span>\n  <span style="color:rgb(226, 137, 100)">function</span> onError(e) {\n    document.getElementById(<span style="color:rgb(101, 176, 66)">&#39;error&#39;</span>).textContent = [\n      <span style="color:rgb(101, 176, 66)">&#39;ERROR: Line &#39;</span>, e.lineno, <span style="color:rgb(101, 176, 66)">&#39; in &#39;</span>, e.filename, <span style="color:rgb(101, 176, 66)">&#39;: &#39;</span>, e.message].join(<span style="color:rgb(101, 176, 66)">&#39;&#39;</span>);\n  }\n\n  <span style="color:rgb(226, 137, 100)">function</span> onMsg(e) {\n    document.getElementById(<span style="color:rgb(101, 176, 66)">&#39;result&#39;</span>).textContent = e.data;\n  }\n\n  <span style="color:rgb(226, 137, 100)">var</span> worker = <span style="color:rgb(226, 137, 100)">new</span> <span style="color:rgb(137, 189, 255)">Worker</span>(<span style="color:rgb(101, 176, 66)">&#39;workerWithError.js&#39;</span>);\n  worker.addEventListener(<span style="color:rgb(101, 176, 66)">&#39;message&#39;</span>, onMsg, <span style="color:rgb(226, 137, 100)">false</span>);\n  worker.addEventListener(<span style="color:rgb(101, 176, 66)">&#39;error&#39;</span>, onError, <span style="color:rgb(226, 137, 100)">false</span>);\n  worker.postMessage(); <em>// Start worker without a message.</em>\n<span style="color:rgb(137, 189, 255)">&lt;/script&gt;</span></code></pre>\n\n<p><strong>Ejemplo:</strong>&nbsp;workerWithError.js intenta ejecutar 1/x, donde el valor de &quot;x&quot; no se ha definido.</p>\n\n<div class="example" style="padding: 10px; border: 1px solid rgb(204, 204, 204); color: rgb(85, 85, 85); font-family: ''Helvetica Neue'', Helvetica, Arial, sans-serif; font-size: 17px; line-height: 12.75px; background-color: rgb(255, 255, 255);">Ejecutar</div>\n\n<p>workerWithError.js:</p>\n\n<pre><code>\n<span style="color:rgb(226, 137, 100)">self</span>.addEventListener(<span style="color:rgb(101, 176, 66)">&#39;message&#39;</span>, <span style="color:rgb(226, 137, 100)">function</span>(e) {\n  postMessage(<span style="color:rgb(51, 135, 204)">1</span>/x); <em>// Intentional error.</em>\n};</code></pre>\n\n<h2>Seguridad</h2>\n\n<h3>Restricciones con acceso local</h3>\n\n<p>Debido a las restricciones de seguridad de Google Chrome, los Workers no se ejecutar&aacute;n de forma local (por ejemplo, desde&nbsp;<code>file://</code>) en las &uacute;ltimas versiones del navegador. En su lugar, fallan de forma autom&aacute;tica. Para ejecutar tu aplicaci&oacute;n desde el esquema&nbsp;<code>file://</code>, ejecuta Chrome con el conjunto de marcadores&nbsp;<code>--allow-file-access-from-files</code>.&nbsp;<strong>NOTA:</strong>&nbsp;no es recomendable ejecutar tu navegador principal con este conjunto de marcadores, pues solo se debe utilizar para realizar pruebas y no para navegar con normalidad.</p>\n\n<p>Otros navegadores no aplican esta restricci&oacute;n.</p>\n\n<h3>Consideraciones sobre un mismo origen</h3>\n\n<p>Las secuencias de comandos del Worker deben ser archivos externos con el mismo esquema que su p&aacute;gina de llamada. Por ello, no puedes cargar una secuencia de comandos desde una URL&nbsp;<code>data:</code>&nbsp;o una URL&nbsp;<code>javascript:</code>. Asimismo, una p&aacute;gina&nbsp;<code>https:</code>&nbsp;no puede iniciar secuencias de comandos de Worker que comiencen con una URL&nbsp;<code>http:</code>.</p>\n\n<h2>Casos pr&aacute;cticos</h2>\n\n<p>Entonces, &iquest;qu&eacute; tipo de aplicaci&oacute;n deben utilizar los Web Workers? Desafortunadamente, los Web Workers a&uacute;n son tecnolog&iacute;as relativamente nuevas y la mayor&iacute;a de los ejemplos y tutoriales que existen est&aacute;n relacionados con la computaci&oacute;n de n&uacute;meros primos. Aunque no resulta demasiado interesante, es &uacute;til para entender los conceptos b&aacute;sicos de los Web Workers. A continuaci&oacute;n se indican algunas ideas para que mantener tu cerebro despierto.</p>\n\n<ul>\n  <li>Obtenci&oacute;n previa y/o almacenamiento en cach&eacute; de datos para un uso futuro</li>\n  <li>M&eacute;todos para destacar la sintaxis de c&oacute;digo u otros formatos de texto en tiempo real</li>\n  <li>Corrector ortogr&aacute;fico</li>\n  <li>An&aacute;lisis de datos de v&iacute;deo o audio</li>\n  <li>Entrada y salida en segundo plano o solicitud de servicios web</li>\n  <li>Procesamiento de conjuntos o respuestas JSON de gran tama&ntilde;o</li>\n  <li>Filtrado de im&aacute;genes en &lt;canvas&gt;</li>\n  <li>Actualizaci&oacute;n de varias filas de una base de datos web local</li>\n</ul>\n\n<h2>Demos</h2>\n\n<ul>\n  <li>Ejemplo extra&iacute;do de las&nbsp;<a href="http://slides.html5rocks.com/#web-workers" style="color: rgb(80, 139, 136);">diapositivas de HTML5Rocks</a></li>\n  <li><a href="http://htmlfive.appspot.com/static/tracker1.html" style="color: rgb(80, 139, 136);">Herramienta de seguimiento del movimiento</a></li>\n  <li><a href="http://people.mozilla.com/~prouget/demos/worker_and_simulatedannealing/index.xhtml" style="color: rgb(80, 139, 136);">Combinaci&oacute;n simulada</a></li>\n  <li><a href="http://html5demos.com/worker" style="color: rgb(80, 139, 136);">Ejemplo de HTML5demos</a></li>\n</ul>\n\n<h2>Referencias</h2>\n\n<ul>\n  <li>Especificaci&oacute;n de&nbsp;<a href="http://www.whatwg.org/specs/web-workers/current-work/" style="color: rgb(80, 139, 136);">Web Workers</a></li>\n  <li><a href="http://developer.mozilla.org/en/Using_web_workers" style="color: rgb(80, 139, 136);">&quot;Using web workers&quot;</a>&nbsp;(C&oacute;mo utilizar Web Workers) de Mozilla Developer Network</li>\n  <li><a href="http://dev.opera.com/articles/view/web-workers-rise-up/" style="color: rgb(80, 139, 136);">&quot;Web Workers rise up!&quot; (La revoluci&oacute;n de los Web Workers)</a>&nbsp;de Dev.Opera</li>\n</ul>\n', 'alexander', 'Programacion', 79, 0, '2014-10-28 23:30:46', 0);
INSERT INTO `noticias` (`id`, `titulo`, `foto`, `contenido`, `user`, `categoria`, `visitas`, `id_comentario`, `publicado`, `comentarios`) VALUES
(26, 'Enrutamiento de URLs con PHP', 'imagenes/bootstrapping.png', '<h1>Enrutamiento de URLs con PHP</h1>\n\n<p>Algunos de los Frameworks m&aacute;s comunes nos ofrecen como caracter&iacute;stica un enrutamiento de URLs caracter&iacute;stico, ya que no se muestra ninguna extensi&oacute;n de archivo y las URLs apuntan directamente a una interfaz POO. Ve&aacute;mos como podemos hacer un peque&ntilde;o script para simular este efecto.</p>\n\n<h2>La teor&iacute;a</h2>\n\n<p>Para lograr nuestro objetivo tan solo necesitaremos dos archivos (aunque despu&eacute;s siempre se pueden utilizar m&aacute;s, como en todo):&nbsp;<code>.htaccess</code>&nbsp;y&nbsp;<code>index.php</code>. El primero, para quien no lo sepa, es, por as&iacute; decirlo, un archivo de configuraci&oacute;n para un directorio. Toda petici&oacute;n pasar&aacute; por &eacute;l. Si realizamos una petici&oacute;n al directorio ra&iacute;z se ejecutar&aacute; el&nbsp;<code>.htaccess</code>&nbsp;que se encuentre ah&iacute;, mientras que si la petici&oacute;n es a la carpeta&nbsp;<code>/app</code>, el archivo que se ejecutar&aacute; ser&aacute;&nbsp;<code>/app/.htaccess</code>.</p>\n\n<p>Llegados a este punto, si se realiza una petici&oacute;n a una ruta que no exista en el servidor, se ejecutar&aacute; el&nbsp;<code>.htaccess</code>&nbsp;del directorio ra&iacute;z. En nuestro script haremos que este redirija a&nbsp;<code>index.php</code>, con el que despu&eacute;s interpretaremos la URL y mostraremos el contenido deseado.</p>\n\n<h3><small>Paso 1:</small><code>.htaccess</code></h3>\n\n<p>El contenido del archivo ser&aacute; el siguiente:</p>\n\n<pre><code>\nRewriteEngine On\n\nRewriteBase /\n\nRewriteCond %{REQUEST_FILENAME} !-f\nRewriteRule ^ index.php [QSA,L]</code></pre>\n\n<p>As&iacute; todas las URL apuntar&aacute;n a&nbsp;<code>index.php</code>.</p>\n\n<h3><small>Paso 2:</small><code>index.php</code></h3>\n\n<p>Este archivo ir&aacute; alrededor de la variable&nbsp;<code>$_SERVER[&#39;REQUEST_URI&#39;]</code>, la cual contendr&aacute; el segmento de la URL actual sin el nombre del servidor. Aqu&iacute; est&aacute; el c&oacute;digo documentado:</p>\n\n<pre><code>\n<span style="color:rgb(150, 152, 150)">// Dividimos la URL.\n</span><span style="color:rgb(204, 102, 102)">$requestURI</span> <span style="color:rgb(138, 190, 183)">=</span> <span style="color:rgb(129, 162, 190)">explode<span style="color:rgb(204, 204, 204)">(</span></span> <span style="color:rgb(181, 189, 104)">&#39;/&#39;</span>, <span style="color:rgb(204, 102, 102)">$_SERVER</span>[<span style="color:rgb(181, 189, 104)">&#39;REQUEST_URI&#39;</span>] );<span style="color:rgb(150, 152, 150)">\n// Eliminamos los espacios del principio y final\n</span><span style="color:rgb(150, 152, 150)">// y recalculamos los &iacute;ndices del vector.\n</span><span style="color:rgb(204, 102, 102)">$requestURI</span> <span style="color:rgb(138, 190, 183)">=</span> <span style="color:rgb(129, 162, 190)">array_values<span style="color:rgb(204, 204, 204)">(</span></span> <span style="color:rgb(129, 162, 190)">array_filter<span style="color:rgb(204, 204, 204)">(</span></span> <span style="color:rgb(204, 102, 102)">$requestURI</span> ) );</code></pre>\n\n<p>Por ejemplo, si tuviesemos&nbsp;<code>/app/page/param1</code>,&nbsp;<code>$requestURI</code>&nbsp;nos quedar&iacute;a de la siguiente manera:</p>\n\n<pre><code>\nArray\n(\n    [0] =&gt; app\n    [1] =&gt; page\n    [2] =&gt; param1\n)</code></pre>\n\n<h2>Ejemplos pr&aacute;cticos</h2>\n\n<p>Tenemos la teor&iacute;a. Solo falta una cosa: aplicar los datos que hemos obtenido. Esto es algo que cada cual debe adaptar a su manera. De todos modos, yo presento a continuaci&oacute;n un par de aplicaciones pr&aacute;cticas que podr&iacute;an serviros en vuestras webs.</p>\n\n<h3>Cargar un controlador</h3>\n\n<p>Comenzaremos nuestro&nbsp;<code>index.php</code>&nbsp;definiendo algunas funciones y alguna constante de configuraci&oacute;n.</p>\n\n<p><em>Nota: la ruta que utilizaremos a partir de ahora ser&aacute;&nbsp;<code>/controller/method/param1/param1/</code>&nbsp;para que nos sea m&aacute;s f&aacute;cil comprender el funcionamiento.</em></p>\n\n<pre><code>\n<span style="color:rgb(150, 152, 150)">/**\n * Funci&oacute;n original de Laravel4.\n *\n * Convierte una cadena separada por guiones o barras bajas\n * a PascalCase. Ej: hola-mundo = HolaMundo\n */</span>\n<span style="color:rgb(178, 148, 187)">function</span> <span style="color:rgb(129, 162, 190)">studlyCase<span style="color:rgb(204, 204, 204)">(</span></span> <span style="color:rgb(204, 102, 102)">$value</span> )\n{\n	<span style="color:rgb(204, 102, 102)">$value</span> <span style="color:rgb(138, 190, 183)">=</span> <span style="color:rgb(129, 162, 190)">ucwords<span style="color:rgb(204, 204, 204)">(</span></span> <span style="color:rgb(129, 162, 190)">str_replace<span style="color:rgb(204, 204, 204)">(</span></span> <span style="color:rgb(178, 148, 187)">array</span>( <span style="color:rgb(181, 189, 104)">&#39;-&#39;</span>, <span style="color:rgb(181, 189, 104)">&#39;_&#39;</span> ), <span style="color:rgb(181, 189, 104)">&#39; &#39;</span>, <span style="color:rgb(204, 102, 102)">$value</span> ) );\n	<span style="color:rgb(178, 148, 187)">return</span> <span style="color:rgb(129, 162, 190)">str_replace<span style="color:rgb(204, 204, 204)">(</span></span> <span style="color:rgb(181, 189, 104)">&#39; &#39;</span>, <span style="color:rgb(181, 189, 104)">&#39;&#39;</span>, <span style="color:rgb(204, 102, 102)">$value</span> );\n}\n<span style="color:rgb(150, 152, 150)">\n// Configuraci&oacute;n.\n</span><span style="color:rgb(129, 162, 190)">define<span style="color:rgb(204, 204, 204)">(</span></span> <span style="color:rgb(181, 189, 104)">&#39;CONTROLLER_PATH&#39;</span>, <span style="color:rgb(181, 189, 104)">&#39;controllers/&#39;</span> );\n<span style="color:rgb(129, 162, 190)">define<span style="color:rgb(204, 204, 204)">(</span></span> <span style="color:rgb(181, 189, 104)">&#39;EXT&#39;</span>, <span style="color:rgb(181, 189, 104)">&#39;.php&#39;</span> );</code></pre>\n\n<p>Ahora ya podemos utilizar nuestro c&oacute;digo de m&aacute;s arriba para conseguir&nbsp;<code>$requestURI</code>. Despu&eacute;s de eso, comprobaremos si estamos en la p&aacute;gina principal con un simple&nbsp;<code>if</code>.</p>\n\n<pre><code>\n<span style="color:rgb(178, 148, 187)">if</span> ( <span style="color:rgb(129, 162, 190)">empty<span style="color:rgb(204, 204, 204)">(</span></span> <span style="color:rgb(204, 102, 102)">$requestURI</span> ) ) {\n<span style="color:rgb(150, 152, 150)">	// P&aacute;gina principal.\n</span>	<span style="color:rgb(178, 148, 187)">echo</span> &#39;Prueba a escribir <span style="color:rgb(204, 102, 102)"><span style="color:rgb(204, 204, 204)">&lt;</span>a <span style="color:rgb(222, 147, 95)">href</span><span style="color:rgb(181, 189, 104)"><span style="color:rgb(204, 204, 204)">=</span><span style="color:rgb(204, 204, 204)">&quot;</span>/controller/method/param1/param2<span style="color:rgb(204, 204, 204)">&quot;</span></span><span style="color:rgb(204, 204, 204)">&gt;</span></span><span style="color:rgb(204, 102, 102)"><span style="color:rgb(204, 204, 204)">&lt;</span>code<span style="color:rgb(204, 204, 204)">&gt;</span></span>controller<span style="color:rgb(138, 190, 183)">/</span>method<span style="color:rgb(138, 190, 183)">/</span>param1<span style="color:rgb(138, 190, 183)">/</span>param2<span style="color:rgb(204, 102, 102)"><span style="color:rgb(204, 204, 204)">&lt;/</span>code<span style="color:rgb(204, 204, 204)">&gt;</span></span><span style="color:rgb(204, 102, 102)"><span style="color:rgb(204, 204, 204)">&lt;/</span>a<span style="color:rgb(204, 204, 204)">&gt;</span></span> en la <span style="color:rgb(138, 190, 183)">URL</span>.&#39;;\n}\n<span style="color:rgb(178, 148, 187)">else</span>\n{\n<span style="color:rgb(150, 152, 150)">	// C&oacute;digo (sigue leyendo).\n</span>	<span style="color:rgb(178, 148, 187)">try</span>\n	{\n\n	}\n	<span style="color:rgb(178, 148, 187)">catch</span><span style="color:rgb(150, 152, 150)"> // ...\n</span>}</code></pre>\n\n<p>En el caso de que sea la p&aacute;gina principal ejecutamos lo que queramos. Si no lo es, continuaremos con el c&oacute;digo. Lo que haremos ser&aacute; hacer unas cuantas comprobaciones de seguridad ayud&aacute;ndonos de excepciones y cargar el controlador siguiendo un patr&oacute;n.</p>\n\n<p>Lo siguiente ser&aacute; el c&oacute;digo dentro del bloque&nbsp;<code>try</code>.</p>\n\n<pre><code>\n<span style="color:rgb(150, 152, 150)">// Guardamos el nombre del controlador y la\n</span><span style="color:rgb(150, 152, 150)">// ruta de su archivo para utilizarlas m&aacute;s tarde.\n</span><span style="color:rgb(204, 102, 102)">$controllerName</span> <span style="color:rgb(138, 190, 183)">=</span> <span style="color:rgb(129, 162, 190)">studlyCase<span style="color:rgb(204, 204, 204)">(</span></span> <span style="color:rgb(204, 102, 102)">$requestURI</span>[<span style="color:rgb(222, 147, 95)">0</span>] );\n<span style="color:rgb(204, 102, 102)">$controllerPath</span> <span style="color:rgb(138, 190, 183)">=</span> <span style="color:rgb(138, 190, 183)">CONTROLLER_PATH</span> . <span style="color:rgb(204, 102, 102)">$controllerName</span> . <span style="color:rgb(138, 190, 183)">EXT</span>;<span style="color:rgb(150, 152, 150)">\n// Guardamos el nombre del m&eacute;todo a llamar.\n</span><span style="color:rgb(204, 102, 102)">$method</span> <span style="color:rgb(138, 190, 183)">=</span> <span style="color:rgb(204, 102, 102)">$controllerName</span> . <span style="color:rgb(181, 189, 104)">&#39;::&#39;</span> . <span style="color:rgb(129, 162, 190)">studlyCase<span style="color:rgb(204, 204, 204)">(</span></span> <span style="color:rgb(204, 102, 102)">$requestURI</span>[<span style="color:rgb(222, 147, 95)">1</span>] );<span style="color:rgb(150, 152, 150)">\n// Eliminamos el controlador y el m&eacute;todo de\n</span><span style="color:rgb(150, 152, 150)">// $requestURI para quedarnos s&oacute;lo con los par&aacute;metros.\n</span><span style="color:rgb(204, 102, 102)">$arguments</span> <span style="color:rgb(138, 190, 183)">=</span> <span style="color:rgb(129, 162, 190)">array_slice<span style="color:rgb(204, 204, 204)">(</span></span> <span style="color:rgb(204, 102, 102)">$requestURI</span>, <span style="color:rgb(222, 147, 95)">2</span> );\n<span style="color:rgb(150, 152, 150)">\n// Comprobamos que el archivo del controlador existe.\n</span><span style="color:rgb(178, 148, 187)">if</span> ( <span style="color:rgb(138, 190, 183)">!</span> <span style="color:rgb(129, 162, 190)">file_exists<span style="color:rgb(204, 204, 204)">(</span></span> <span style="color:rgb(204, 102, 102)">$controllerPath</span> ) ) {\n	<span style="color:rgb(178, 148, 187)">throw</span> <span style="color:rgb(178, 148, 187)">new</span> <em>DomainException</em>( &#39;El archivo <span style="color:rgb(204, 102, 102)"><span style="color:rgb(204, 204, 204)">&lt;</span>code<span style="color:rgb(204, 204, 204)">&gt;</span></span><span style="color:rgb(181, 189, 104)">&#39; . $controllerPath . &#39;</span><span style="color:rgb(204, 102, 102)"><span style="color:rgb(204, 204, 204)">&lt;/</span>code<span style="color:rgb(204, 204, 204)">&gt;</span></span> no existe.&#39;, <span style="color:rgb(222, 147, 95)">404</span> );\n}\n<span style="color:rgb(150, 152, 150)">\n// Cargamos el archivo.\n</span><span style="color:rgb(178, 148, 187)">require_once</span> <span style="color:rgb(204, 102, 102)">$controllerPath</span>;	\n<span style="color:rgb(150, 152, 150)">\n// Comprobamos que el archivo contenga el controlador.\n</span><span style="color:rgb(178, 148, 187)">if</span> ( <span style="color:rgb(138, 190, 183)">!</span> <span style="color:rgb(129, 162, 190)">class_exists<span style="color:rgb(204, 204, 204)">(</span></span> <span style="color:rgb(204, 102, 102)">$controllerName</span> ) ) {\n	<span style="color:rgb(178, 148, 187)">throw</span> <span style="color:rgb(178, 148, 187)">new</span> <em>RuntimeException</em>( &#39;El archivo <span style="color:rgb(204, 102, 102)"><span style="color:rgb(204, 204, 204)">&lt;</span>code<span style="color:rgb(204, 204, 204)">&gt;</span></span><span style="color:rgb(181, 189, 104)">&#39; . $controllerPath . &#39;</span><span style="color:rgb(204, 102, 102)"><span style="color:rgb(204, 204, 204)">&lt;/</span>code<span style="color:rgb(204, 204, 204)">&gt;</span></span> debe contener un objeto <span style="color:rgb(204, 102, 102)"><span style="color:rgb(204, 204, 204)">&lt;</span>code<span style="color:rgb(204, 204, 204)">&gt;</span></span><span style="color:rgb(181, 189, 104)">&#39; . $controllerName . &#39;</span><span style="color:rgb(204, 102, 102)"><span style="color:rgb(204, 204, 204)">&lt;/</span>code<span style="color:rgb(204, 204, 204)">&gt;</span></span>.&#39; );\n}\n<span style="color:rgb(150, 152, 150)">\n// Comprobamos que el m&eacute;todo definido en la URL est&eacute; disponible.\n</span><span style="color:rgb(178, 148, 187)">if</span> ( <span style="color:rgb(138, 190, 183)">!</span> <span style="color:rgb(129, 162, 190)">is_callable<span style="color:rgb(204, 204, 204)">(</span></span> <span style="color:rgb(204, 102, 102)">$method</span> ) ) {\n	<span style="color:rgb(178, 148, 187)">throw</span> <span style="color:rgb(178, 148, 187)">new</span> <em>DomainException</em>( &#39;El archivo <span style="color:rgb(204, 102, 102)"><span style="color:rgb(204, 204, 204)">&lt;</span>code<span style="color:rgb(204, 204, 204)">&gt;</span></span><span style="color:rgb(181, 189, 104)">&#39; . $controllerPath . &#39;</span><span style="color:rgb(204, 102, 102)"><span style="color:rgb(204, 204, 204)">&lt;/</span>code<span style="color:rgb(204, 204, 204)">&gt;</span></span> no contiene un m&eacute;todo <span style="color:rgb(204, 102, 102)"><span style="color:rgb(204, 204, 204)">&lt;</span>code<span style="color:rgb(204, 204, 204)">&gt;</span></span><span style="color:rgb(181, 189, 104)">&#39; . $requestURI[1] . &#39;</span><span style="color:rgb(204, 102, 102)"><span style="color:rgb(204, 204, 204)">&lt;/</span>code<span style="color:rgb(204, 204, 204)">&gt;</span></span>.&#39;, <span style="color:rgb(222, 147, 95)">404</span> );\n}\n<span style="color:rgb(150, 152, 150)">\n// Creamos un nuevo m&eacute;todo reflejo de $method.\n</span><span style="color:rgb(204, 102, 102)">$reflection</span> <span style="color:rgb(138, 190, 183)">=</span> <span style="color:rgb(178, 148, 187)">new</span> <em>ReflectionMethod</em>( <span style="color:rgb(204, 102, 102)">$method</span> );\n<span style="color:rgb(150, 152, 150)">\n// Comprobamos que la URL tiene todos los\n</span><span style="color:rgb(150, 152, 150)">// par&aacute;metros requeridos por el m&eacute;todo.\n</span><span style="color:rgb(178, 148, 187)">if</span> ( <span style="color:rgb(204, 102, 102)">$reflection</span><span style="color:rgb(138, 190, 183)">-</span><span style="color:rgb(138, 190, 183)">&gt;</span><span style="color:rgb(129, 162, 190)">getNumberOfRequiredParameters<span style="color:rgb(204, 204, 204)">(</span></span>) <span style="color:rgb(138, 190, 183)">&gt;</span> <span style="color:rgb(129, 162, 190)">count<span style="color:rgb(204, 204, 204)">(</span></span> <span style="color:rgb(204, 102, 102)">$arguments</span> ) ) {\n	<span style="color:rgb(178, 148, 187)">throw</span> <span style="color:rgb(178, 148, 187)">new</span> <em>DomainException</em>( &#39;No hay suficientes par&aacute;metros como para ejecutar el m&eacute;todo <span style="color:rgb(204, 102, 102)"><span style="color:rgb(204, 204, 204)">&lt;</span>code<span style="color:rgb(204, 204, 204)">&gt;</span></span><span style="color:rgb(181, 189, 104)">&#39; . $method . &#39;</span><span style="color:rgb(204, 102, 102)"><span style="color:rgb(204, 204, 204)">&lt;/</span>code<span style="color:rgb(204, 204, 204)">&gt;</span></span>&#39;, <span style="color:rgb(222, 147, 95)">404</span> );\n}\n<span style="color:rgb(150, 152, 150)">\n// Llamamos a la funci&oacute;n.\n</span><span style="color:rgb(129, 162, 190)">call_user_func_array<span style="color:rgb(204, 204, 204)">(</span></span> <span style="color:rgb(204, 102, 102)">$method</span>, <span style="color:rgb(204, 102, 102)">$arguments</span> );</code></pre>\n\n<p>Para finalizar con el archivo, definiremos los bloques&nbsp;<code>catch</code>.</p>\n\n<pre><code>\n<span style="color:rgb(178, 148, 187)">catch</span> ( RuntimeException <span style="color:rgb(204, 102, 102)">$e</span> ) {\n	<span style="color:rgb(178, 148, 187)">echo</span> <span style="color:rgb(204, 102, 102)">$e</span><span style="color:rgb(138, 190, 183)">-</span><span style="color:rgb(138, 190, 183)">&gt;</span><span style="color:rgb(129, 162, 190)">getMessage<span style="color:rgb(204, 204, 204)">(</span></span>);\n}\n<span style="color:rgb(178, 148, 187)">catch</span> ( DomainException <span style="color:rgb(204, 102, 102)">$e</span> ) {\n	<span style="color:rgb(178, 148, 187)">echo</span> &#39;<span style="color:rgb(204, 102, 102)"><span style="color:rgb(204, 204, 204)">&lt;</span>strong<span style="color:rgb(204, 204, 204)">&gt;</span></span>Error <span style="color:rgb(181, 189, 104)">&#39; . $e-&gt;getCode() . &#39;</span><span style="color:rgb(204, 102, 102)"><span style="color:rgb(204, 204, 204)">&lt;/</span>strong<span style="color:rgb(204, 204, 204)">&gt;</span></span>: &#39; . <span style="color:rgb(204, 102, 102)">$e</span><span style="color:rgb(138, 190, 183)">-</span><span style="color:rgb(138, 190, 183)">&gt;</span><span style="color:rgb(129, 162, 190)">getMessage<span style="color:rgb(204, 204, 204)">(</span></span>);\n<span style="color:rgb(150, 152, 150)">	// O bien escribimos un mensaje de p&aacute;gina no encontrada.\n</span>}</code></pre>\n\n<p>Ahora solo tendremos que crear un controlador para la ruta que deseemos. Para poner un ejemplo, crearemos el archivo&nbsp;<code>controllers/Controller.php</code>.</p>\n\n<pre><code>\n<span style="color:rgb(222, 147, 95)">&lt;?php</span>\n\n<span style="color:rgb(178, 148, 187)">class</span> <em>Controller</em>\n{\n\n	<span style="color:rgb(178, 148, 187)">public</span> <span style="color:rgb(178, 148, 187)">static</span> <span style="color:rgb(178, 148, 187)">function</span> <span style="color:rgb(129, 162, 190)">Method<span style="color:rgb(204, 204, 204)">(</span></span> <span style="color:rgb(204, 102, 102)">$param1</span>, <span style="color:rgb(204, 102, 102)">$param2</span> <span style="color:rgb(138, 190, 183)">=</span> <span style="color:rgb(181, 189, 104)">&#39;No especificado&#39;</span> )\n	{\n		<span style="color:rgb(178, 148, 187)">echo</span> <span style="color:rgb(181, 189, 104)">&quot;Par&aacute;metro 1: $param1&quot;</span>;\n		<span style="color:rgb(178, 148, 187)">echo</span> &#39;<span style="color:rgb(204, 102, 102)"><span style="color:rgb(204, 204, 204)">&lt;</span>br<span style="color:rgb(204, 204, 204)">&gt;</span></span>&#39;;\n		<span style="color:rgb(178, 148, 187)">echo</span> <span style="color:rgb(181, 189, 104)">&quot;Par&aacute;metro 2: $param2&quot;</span>;\n	}\n\n}\n\n<span style="color:rgb(222, 147, 95)">?&gt;</span></code></pre>\n\n<p>De esta forma podr&eacute;mos llamar a la URL&nbsp;<code>controller/method/param1</code>&nbsp;o bien<code>controller/method/param1/param2</code>&nbsp;ya que el segundo par&aacute;metro es opcional. Hay muchas m&aacute;s cosas que se le podr&iacute;an a&ntilde;adir al c&oacute;digo, por ejemplo que al llamar a la URL&nbsp;<code>controller</code>&nbsp;se busque un m&eacute;todo&nbsp;<code>index()</code>&nbsp;en el controlador al igual que hacen muchos frameworks. A&uacute;n as&iacute; esto es algo que os dejo a vosotros, esto es tan solo un c&oacute;digo b&aacute;sico para ense&ntilde;ar el funcionamiento del sistema.</p>\n\n<h3>Cargar un controlador &ldquo;RESTful&rdquo;</h3>\n\n<p>REST es un tipo de arquitectura web por as&iacute; decirlo, el cual se basa en que cada URL tenga distintos funcionamientos. Si sab&eacute;is algo de formularios recordareis que el m&eacute;todo de envio puede ser POST, GET, DELETE, PUT&hellip; Esto para un formulario simple carece de mucho sentido, pero es de suma importancia a la hora de desarrollar aplicaciones RESTful ya que dependiendo del m&eacute;todo de la petici&oacute;n se ejecutar&aacute; una acci&oacute;n u otra.</p>\n\n<p>Pongamos el ejemplo de una aplicaci&oacute;n com&uacute;n para la gesti&oacute;n de noticias:</p>\n\n<table style="border-collapse:collapse; border-spacing:0px; box-sizing:border-box; outline:rgb(247, 247, 247) solid 2px; width:662px">\n	<thead>\n		<tr>\n			<th>URL</th>\n			<th>Acci&oacute;n</th>\n		</tr>\n	</thead>\n	<tbody>\n		<tr>\n			<td><code>/show/$id</code></td>\n			<td>Mostrar una noticia.</td>\n		</tr>\n		<tr>\n			<td><code>/edit/$id</code></td>\n			<td>Editar una noticia.</td>\n		</tr>\n		<tr>\n			<td><code>/delete/$id</code></td>\n			<td>Eliminar una noticia.</td>\n		</tr>\n		<tr>\n			<td><code>/add</code></td>\n			<td>A&ntilde;adir una noticia.</td>\n		</tr>\n	</tbody>\n</table>\n\n<p>Ahora bien, si nuestra p&aacute;gina estuviese basada en REST, las URLs se comportar&iacute;an de la siguiente manera:</p>\n\n<table style="border-collapse:collapse; border-spacing:0px; box-sizing:border-box; outline:rgb(247, 247, 247) solid 2px; width:662px">\n	<thead>\n		<tr>\n			<th>URL</th>\n			<th>M&eacute;todo de petici&oacute;n</th>\n			<th>Acci&oacute;n</th>\n		</tr>\n	</thead>\n	<tbody>\n		<tr>\n			<td><code>/news/$id</code></td>\n			<td>GET</td>\n			<td>Mostrar una noticia.</td>\n		</tr>\n		<tr>\n			<td><code>/news/$id</code></td>\n			<td>PUT</td>\n			<td>Actualizar una noticia.</td>\n		</tr>\n		<tr>\n			<td><code>/news/$id</code></td>\n			<td>DELETE</td>\n			<td>Eliminar una noticia.</td>\n		</tr>\n		<tr>\n			<td><code>/news/$id</code></td>\n			<td>POST</td>\n			<td>A&ntilde;adir una noticia.</td>\n		</tr>\n	</tbody>\n</table>\n\n<p>Para adaptar nuestro c&oacute;digo anterior no tendremos m&aacute;s que cambiar un par de l&iacute;neas, de modo que si se llama a&nbsp;<code>method</code>&nbsp;y la petici&oacute;n es GET, el m&eacute;todo del controlador al que accederemos ser&aacute;<code>getMethod()</code>.</p>\n\n<p>Tan s&oacute;lo necesitaremos cambiar una variable en&nbsp;<code>index.php</code>.</p>\n\n<pre><code>\n<span style="color:rgb(204, 102, 102)">$method</span> <span style="color:rgb(138, 190, 183)">=</span> <span style="color:rgb(204, 102, 102)">$controllerName</span> . <span style="color:rgb(181, 189, 104)">&#39;::&#39;</span> . <span style="color:rgb(129, 162, 190)">strtolower<span style="color:rgb(204, 204, 204)">(</span></span> <span style="color:rgb(204, 102, 102)">$_SERVER</span>[<span style="color:rgb(181, 189, 104)">&#39;REQUEST_METHOD&#39;</span>] ) . <span style="color:rgb(129, 162, 190)">studlyCase<span style="color:rgb(204, 204, 204)">(</span></span> <span style="color:rgb(204, 102, 102)">$requestURI</span>[<span style="color:rgb(222, 147, 95)">1</span>] );</code></pre>\n\n<h3>Y muchas opciones m&aacute;s&hellip;</h3>\n\n<p>Estos ejemplos que he dado son los m&aacute;s b&aacute;sicos actualmente en aplicaciones web, pero se pueden hacer tantas cosas con las URL como a nuestra imaginaci&oacute;n se le ocurra. Como siempre es cosa de investigar.</p>\n\n<p>Espero que este peque&ntilde;o truquito os haya servido para aumentar vuestros conocimientos. Como siempre no dud&eacute;is en comentar, tanto si ten&eacute;is dudas como si no, es algo que me hace escribir m&aacute;s tutoriales y motivarme. Un abrazo.</p>\n', 'alexander', 'Programacion', 198, 0, '2014-10-28 21:20:27', 0),
(27, 'Useful :nth-child Recipes', 'imagenes/nth-child-positive-range.png', '<P>I GET A LITTLE GIDDY WHEN I COME ACROSS PERFECT USES FOR<CODE>:NTH-CHILD</CODE>&NBSP;OR&NBSP;<CODE>:NTH-OF-TYPE</CODE>&NBSP;(<A HREF="HTTP://CSS-TRICKS.COM/THE-DIFFERENCE-BETWEEN-NTH-CHILD-AND-NTH-OF-TYPE/" STYLE="BOX-SIZING: BORDER-BOX; COLOR: RGB(68, 114, 185); TEXT-DECORATION: NONE; BORDER-BOTTOM-WIDTH: 2PX; BORDER-BOTTOM-STYLE: SOLID; BORDER-BOTTOM-COLOR: TRANSPARENT;">READ ABOUT THE DIFFERENCE</A>). THE BETTER YOU UNDERSTAND THEM, THE MORE CSS NERDGASMS YOU GET TO HAVE!</P>\n\n<P>IN THESE SIMPLE &QUOT;RECIPES&QUOT; (REALLY: EXPRESSIONS) I&#39;LL ARBITRARILY USE A FLAT LIST OF LIST ITEMS AND RANDOMLY CHOSEN NUMBERS. BUT IT SHOULD BE FAIRLY OBVIOUS HOW TO ALTER THEM TO GET SIMILAR SELECTIONS.</P>\n\n<H3>SELECT ONLY THE FIFTH ELEMENT</H3>\n\n<P><IMG ALT="" CLASS="ALIGNNONE SIZE-FULL WP-IMAGE-9760" SRC="../imagenes/5.png" STYLE="BORDER:0PX; BOX-SIZING:BORDER-BOX; HEIGHT:AUTO !IMPORTANT; MAX-WIDTH:100%; WIDTH:570PX" TITLE="5" /></P>\n\n<PRE>\n<CODE><SPAN STYLE="COLOR:RGB(223, 196, 140)">LI:NTH-CHILD(5) </SPAN><SPAN STYLE="COLOR:WHITE">{</SPAN>\n    <SPAN STYLE="COLOR:RGB(155, 134, 156)">COLOR</SPAN><SPAN STYLE="COLOR:WHITE">:</SPAN> GREEN<SPAN STYLE="COLOR:WHITE">;</SPAN>   \n<SPAN STYLE="COLOR:WHITE">}</SPAN></CODE></PRE>\n\n<P>TO SELECT THE FIRST ELEMENT, YOU CAN USE :FIRST-CHILD, OR I BET YOU CAN GUESS HOW TO ALTER THE ABOVE TO DO IT AS WELL.</P>\n\n<H3>SELECT ALL BUT THE FIRST FIVE</H3>\n\n<P><IMG ALT="" CLASS="ALIGNNONE SIZE-FULL WP-IMAGE-9761" SRC="../imagenes/6-10.PNG" STYLE="BORDER:0PX; BOX-SIZING:BORDER-BOX; HEIGHT:AUTO !IMPORTANT; MAX-WIDTH:100%; WIDTH:570PX" TITLE="6-10" /></P>\n\n<PRE>\n<CODE><SPAN STYLE="COLOR:RGB(223, 196, 140)">LI:NTH-CHILD(N+6) </SPAN><SPAN STYLE="COLOR:WHITE">{</SPAN>\n    <SPAN STYLE="COLOR:RGB(155, 134, 156)">COLOR</SPAN><SPAN STYLE="COLOR:WHITE">:</SPAN> GREEN<SPAN STYLE="COLOR:WHITE">;</SPAN>   \n<SPAN STYLE="COLOR:WHITE">}</SPAN></CODE></PRE>\n\n<P>IF THERE WERE MORE THAN 10 ELEMENTS HERE, IT WOULD SELECT ALL OF THEM BEYOND 5.</P>\n\n<H3>SELECT ONLY THE FIRST FIVE</H3>\n\n<P><IMG ALT="" CLASS="ALIGNNONE SIZE-FULL WP-IMAGE-9762" SRC="../imagenes/1-5.PNG" STYLE="BORDER:0PX; BOX-SIZING:BORDER-BOX; HEIGHT:AUTO !IMPORTANT; MAX-WIDTH:100%; WIDTH:570PX" TITLE="1-5" /></P>\n\n<PRE>\n<CODE><SPAN STYLE="COLOR:RGB(223, 196, 140)">LI:NTH-CHILD(-N+5) </SPAN><SPAN STYLE="COLOR:WHITE">{</SPAN>\n    <SPAN STYLE="COLOR:RGB(155, 134, 156)">COLOR</SPAN><SPAN STYLE="COLOR:WHITE">:</SPAN> GREEN<SPAN STYLE="COLOR:WHITE">;</SPAN>   \n<SPAN STYLE="COLOR:WHITE">}</SPAN></CODE></PRE>\n\n<H3>SELECT EVERY FOURTH, STARTING AT THE FIRST</H3>\n\n<P><IMG ALT="" CLASS="ALIGNNONE SIZE-FULL WP-IMAGE-9763" SRC="../imagenes/159.PNG" STYLE="BORDER:0PX; BOX-SIZING:BORDER-BOX; HEIGHT:AUTO !IMPORTANT; MAX-WIDTH:100%; WIDTH:570PX" TITLE="159" /></P>\n\n<PRE>\n<CODE><SPAN STYLE="COLOR:RGB(223, 196, 140)">LI:NTH-CHILD(4N-7) </SPAN><SPAN STYLE="COLOR:WHITE">{</SPAN>  <SPAN STYLE="COLOR:RGB(119, 119, 119)">/* OR 4N+1 */</SPAN>\n    <SPAN STYLE="COLOR:RGB(155, 134, 156)">COLOR</SPAN><SPAN STYLE="COLOR:WHITE">:</SPAN> GREEN<SPAN STYLE="COLOR:WHITE">;</SPAN>   \n<SPAN STYLE="COLOR:WHITE">}</SPAN></CODE></PRE>\n\n<H3>SELECT ONLY ODD OR EVEN</H3>\n\n<P><IMG ALT="" CLASS="ALIGNNONE SIZE-FULL WP-IMAGE-9764" SRC="../imagenes/odd.PNG" STYLE="BORDER:0PX; BOX-SIZING:BORDER-BOX; HEIGHT:AUTO !IMPORTANT; MAX-WIDTH:100%; WIDTH:570PX" TITLE="ODD" /></P>\n\n<PRE>\n<CODE><SPAN STYLE="COLOR:RGB(223, 196, 140)">LI:NTH-CHILD(ODD) </SPAN><SPAN STYLE="COLOR:WHITE">{</SPAN>\n    <SPAN STYLE="COLOR:RGB(155, 134, 156)">COLOR</SPAN><SPAN STYLE="COLOR:WHITE">:</SPAN> GREEN<SPAN STYLE="COLOR:WHITE">;</SPAN>   \n<SPAN STYLE="COLOR:WHITE">}</SPAN></CODE></PRE>\n\n<P><IMG ALT="" CLASS="ALIGNNONE SIZE-FULL WP-IMAGE-9765" SRC="../imagenes/EVEN.PNG" STYLE="BORDER:0PX; BOX-SIZING:BORDER-BOX; HEIGHT:AUTO !IMPORTANT; MAX-WIDTH:100%; WIDTH:570PX" TITLE="EVEN" /></P>\n\n<PRE>\n<CODE><SPAN STYLE="COLOR:RGB(223, 196, 140)">LI:NTH-CHILD(EVEN) </SPAN><SPAN STYLE="COLOR:WHITE">{</SPAN>\n    <SPAN STYLE="COLOR:RGB(155, 134, 156)">COLOR</SPAN><SPAN STYLE="COLOR:WHITE">:</SPAN> GREEN<SPAN STYLE="COLOR:WHITE">;</SPAN>   \n<SPAN STYLE="COLOR:WHITE">}</SPAN></CODE></PRE>\n\n<H3>SELECT THE LAST ELEMENT</H3>\n\n<P><IMG ALT="" CLASS="ALIGNNONE SIZE-FULL WP-IMAGE-9766" SRC="../imagenes/LAST.PNG" STYLE="BORDER:0PX; BOX-SIZING:BORDER-BOX; HEIGHT:AUTO !IMPORTANT; MAX-WIDTH:100%; WIDTH:570PX" TITLE="LAST" /></P>\n\n<PRE>\n<CODE><SPAN STYLE="COLOR:RGB(223, 196, 140)">LI:LAST-CHILD </SPAN><SPAN STYLE="COLOR:WHITE">{</SPAN>\n    <SPAN STYLE="COLOR:RGB(155, 134, 156)">COLOR</SPAN><SPAN STYLE="COLOR:WHITE">:</SPAN> GREEN<SPAN STYLE="COLOR:WHITE">;</SPAN>\n<SPAN STYLE="COLOR:WHITE">}</SPAN></CODE></PRE>\n\n<P>SELECTS THE 10TH BECAUSE WE HAVE 10 ELEMENTS HERE, BUT IF THERE WAS 8 IT WOULD SELECT THE 8TH, OR IF THERE WERE 1,290 IT WOULD SELECT THE 1,290TH.</P>\n\n<H3>SELECT THE SECOND TO LAST ELEMENT</H3>\n\n<P><IMG ALT="" CLASS="ALIGNNONE SIZE-FULL WP-IMAGE-9767" SRC="../imagenes/9.PNG" STYLE="BORDER:0PX; BOX-SIZING:BORDER-BOX; HEIGHT:AUTO !IMPORTANT; MAX-WIDTH:100%; WIDTH:570PX" TITLE="9" /></P>\n\n<PRE>\n<CODE><SPAN STYLE="COLOR:RGB(223, 196, 140)">LI:NTH-LAST-CHILD(2) </SPAN><SPAN STYLE="COLOR:WHITE">{</SPAN>\n    <SPAN STYLE="COLOR:RGB(155, 134, 156)">COLOR</SPAN><SPAN STYLE="COLOR:WHITE">:</SPAN> GREEN<SPAN STYLE="COLOR:WHITE">;</SPAN>\n<SPAN STYLE="COLOR:WHITE">}</SPAN></CODE></PRE>\n\n<P>SELECTS THE 9TH BECAUSE WE HAVE 10 ELEMENTS HERE, BUT IF THERE WERE 30 ELEMENTS IT WOULD SELECT THE 29TH.</P>\n', 'alexander', 'css', 26, 0, '2014-10-30 08:09:54', 0),
(28, 'A Call for ::nth-everything', 'imagenes/lettering.png', '<P>WITH CSS3, WE HAVE POSITIONAL PSEUDO CLASS SELECTORS TO HELP US SELECT SPECIFIC ELEMENTS WHEN THERE ARE NO OTHER DISTINGUISHING CHARACTERISTICS OTHER THAN WHERE IT IS IN THE DOM IN RELATION TO IT&#39;S SIBLINGS.</P>\n\n<PRE>\n<CODE><SPAN STYLE="COLOR:WHITE">:</SPAN><SPAN STYLE="COLOR:RGB(155, 134, 156)">FIRST-CHILD</SPAN>\n<SPAN STYLE="COLOR:WHITE">:</SPAN><SPAN STYLE="COLOR:RGB(155, 134, 156)">LAST-CHILD</SPAN>\n<SPAN STYLE="COLOR:WHITE">:</SPAN><SPAN STYLE="COLOR:RGB(155, 134, 156)">NTH-CHILD</SPAN>\n<SPAN STYLE="COLOR:WHITE">:</SPAN><SPAN STYLE="COLOR:RGB(155, 134, 156)">NTH-LAST-CHILD</SPAN>\n\n<SPAN STYLE="COLOR:WHITE">:</SPAN><SPAN STYLE="COLOR:RGB(155, 134, 156)">FIRST-OF-TYPE</SPAN>\n<SPAN STYLE="COLOR:WHITE">:</SPAN><SPAN STYLE="COLOR:RGB(155, 134, 156)">LAST-OF-TYPE</SPAN>\n<SPAN STYLE="COLOR:WHITE">:</SPAN><SPAN STYLE="COLOR:RGB(155, 134, 156)">NTH-OF-TYPE</SPAN>\n<SPAN STYLE="COLOR:WHITE">:</SPAN><SPAN STYLE="COLOR:RGB(155, 134, 156)">NTH-LAST-OF-TYPE</SPAN>\n\n<SPAN STYLE="COLOR:WHITE">:</SPAN><SPAN STYLE="COLOR:RGB(155, 134, 156)">ONLY-CHILD</SPAN>\n<SPAN STYLE="COLOR:WHITE">:</SPAN>ONLY-OF-TYPE</CODE></PRE>\n\n<P>WE ALSO GET A COUPLE OF TEXT-SPECIFIC PSEUDO ELEMENTS TO HELP WITH OUR TYPOGRAPHY NEEDS:</P>\n\n<PRE>\n<CODE><SPAN STYLE="COLOR:WHITE">:</SPAN><SPAN STYLE="COLOR:WHITE">:</SPAN><SPAN STYLE="COLOR:RGB(155, 134, 156)">FIRST-LETTER</SPAN>\n<SPAN STYLE="COLOR:WHITE">:</SPAN><SPAN STYLE="COLOR:WHITE">:</SPAN>FIRST-LINE</CODE></PRE>\n\n<P>THAT&#39;S A GREAT START, BUT IT REALLY WOULD BE USEFUL IF WE COULD EXTEND THE WHOLE &QUOT;:NTH&QUOT; CONCEPT TO THESE TYPOGRAPHIC SELECTORS. LET ME CONVINCE YOU.</P>\n\n<DIV CLASS="EXPLANATION" STYLE="BOX-SIZING: BORDER-BOX; MARGIN: 0PX 0PX 20PX; BORDER-LEFT-COLOR: ORANGE; FONT-FAMILY: ''NOTO SANS'', SANS-SERIF; FONT-SIZE: 17PX; LINE-HEIGHT: 25.5PX; PADDING: 20PX !IMPORTANT; BACKGROUND-IMAGE: LINEAR-GRADIENT(TO RIGHT, RGBA(0, 0, 0, 0.0980392), TRANSPARENT 40%); BACKGROUND-ATTACHMENT: INITIAL; BACKGROUND-SIZE: INITIAL; BACKGROUND-ORIGIN: INITIAL; BACKGROUND-CLIP: INITIAL; BACKGROUND-POSITION: INITIAL; BACKGROUND-REPEAT: INITIAL;">PLEASE NOTE THAT MOST OF THE CODE BELOW IS NOT VALID. IT&#39;S EXAMPLE CODE. LIKE &QUOT;WOULDN&#39;T IT BE COOL IF&QUOT; CODE.</DIV>\n\n<H3>::NTH-LINE() / ::LAST-LINE / ::NTH-LAST-LINE()</H3>\n\n<P>WE ALREADY HAVE&NBSP;<CODE>::FIRST-LINE</CODE>, SO TO COMPLETE THE SET LET&#39;S ADD&NBSP;<CODE>::NTH-LINE()</CODE>,<CODE>::LAST-LINE</CODE>, AND&NBSP;<CODE>::NTH-LAST-LINE()</CODE>.</P>\n\n<P>WITH THESE, WE COULD SELECT THE FIRST TWO LINES OF A POEM TO HIGHLIGHT.</P>\n\n<PRE>\n<CODE><SPAN STYLE="COLOR:RGB(223, 196, 140)">ARTICLE.POEM P:FIRST-CHILD::NTH-LINE(-N+2) </SPAN><SPAN STYLE="COLOR:WHITE">{</SPAN>\n  <SPAN STYLE="COLOR:RGB(155, 134, 156)">FONT-VARIANT-CAPS</SPAN><SPAN STYLE="COLOR:WHITE">:</SPAN> SMALL-CAPS<SPAN STYLE="COLOR:WHITE">;</SPAN>\n  <SPAN STYLE="COLOR:RGB(155, 134, 156)">COLOR</SPAN><SPAN STYLE="COLOR:WHITE">:</SPAN> RED<SPAN STYLE="COLOR:WHITE">;</SPAN>\n<SPAN STYLE="COLOR:WHITE">}</SPAN></CODE></PRE>\n\n<P><IMG ALT="" CLASS="ALIGNNONE SIZE-FULL WP-IMAGE-14772" SRC="../imagenes/FIRSTTWOLINES.PNG" STYLE="BORDER:0PX; BOX-SIZING:BORDER-BOX; DISPLAY:BLOCK; HEIGHT:AUTO !IMPORTANT; MARGIN:0PX AUTO; MAX-WIDTH:100%; WIDTH:570PX" TITLE="FIRSTTWOLINES" /><BR />\nI DON&#39;T KNOW FROM POETRY, BRENDON.</P>\n\n<P>OR PERHAPS WE COULD FADE OUT THE END OF A PASSAGE.</P>\n\n<PRE>\n<CODE><SPAN STYLE="COLOR:RGB(223, 196, 140)">ARTICLE.POEM P:LAST-CHILD::NTH-LAST-LINE(3) </SPAN><SPAN STYLE="COLOR:WHITE">{</SPAN>\n   <SPAN STYLE="COLOR:RGB(155, 134, 156)">COLOR</SPAN><SPAN STYLE="COLOR:WHITE">:</SPAN> HSLA(26, 5%, 25%, 1)<SPAN STYLE="COLOR:WHITE">;</SPAN>\n   <SPAN STYLE="COLOR:RGB(155, 134, 156)">FONT-SIZE</SPAN><SPAN STYLE="COLOR:WHITE">:</SPAN> 70%<SPAN STYLE="COLOR:WHITE">;</SPAN>\n<SPAN STYLE="COLOR:WHITE">}</SPAN>\n<SPAN STYLE="COLOR:RGB(223, 196, 140)">ARTICLE.POEM P:LAST-CHILD::NTH-LAST-LINE(2) </SPAN><SPAN STYLE="COLOR:WHITE">{</SPAN>\n   <SPAN STYLE="COLOR:RGB(155, 134, 156)">COLOR</SPAN><SPAN STYLE="COLOR:WHITE">:</SPAN> HSLA(26, 5%, 50%, 1)<SPAN STYLE="COLOR:WHITE">;</SPAN>\n   <SPAN STYLE="COLOR:RGB(155, 134, 156)">FONT-SIZE</SPAN><SPAN STYLE="COLOR:WHITE">:</SPAN> 60%<SPAN STYLE="COLOR:WHITE">;</SPAN>\n<SPAN STYLE="COLOR:WHITE">}</SPAN>\n<SPAN STYLE="COLOR:RGB(223, 196, 140)">ARTICLE.POEM P:LAST-CHILD::NTH-LAST-LINE(1) </SPAN><SPAN STYLE="COLOR:WHITE">{</SPAN>\n   <SPAN STYLE="COLOR:RGB(155, 134, 156)">COLOR</SPAN><SPAN STYLE="COLOR:WHITE">:</SPAN> HSLA(26, 5%, 75%, 1)<SPAN STYLE="COLOR:WHITE">;</SPAN>\n   <SPAN STYLE="COLOR:RGB(155, 134, 156)">FONT-SIZE</SPAN><SPAN STYLE="COLOR:WHITE">:</SPAN> 50%\n<SPAN STYLE="COLOR:WHITE">}</SPAN></CODE></PRE>\n\n<P><IMG ALT="" CLASS="ALIGNNONE SIZE-FULL WP-IMAGE-14773" SRC="../imagenes/FADEOUT.PNG" STYLE="BORDER:0PX; BOX-SIZING:BORDER-BOX; DISPLAY:BLOCK; HEIGHT:AUTO !IMPORTANT; MARGIN:0PX AUTO; MAX-WIDTH:100%; WIDTH:570PX" TITLE="FADEOUT" /></P>\n\n<P>IF WE WERE ALLOWED TO USE GENERATED CONTENT ON THESE LINE PSEUDO ELEMENTS, WE COULD ACCOMPLISH SOMETHING LIKE LINE NUMBERING WITHOUT HAVING TO RESORT TO INTRUSIVE MARKUP.</P>\n\n<PRE>\n<CODE><SPAN STYLE="COLOR:RGB(223, 196, 140)">PRE::NTH-LINE(N)::BEFORE </SPAN><SPAN STYLE="COLOR:WHITE">{</SPAN>\n  <SPAN STYLE="COLOR:RGB(155, 134, 156)">CONTENT</SPAN><SPAN STYLE="COLOR:WHITE">:</SPAN> COUNTER(LINE) <SPAN STYLE="COLOR:RGB(166, 127, 89)">&QUOT;. &QUOT;</SPAN><SPAN STYLE="COLOR:WHITE">;</SPAN>\n  <SPAN STYLE="COLOR:RGB(155, 134, 156)">COLOR</SPAN><SPAN STYLE="COLOR:WHITE">:</SPAN> #999<SPAN STYLE="COLOR:WHITE">;</SPAN>\n<SPAN STYLE="COLOR:WHITE">}</SPAN></CODE></PRE>\n\n<P><IMG ALT="" CLASS="ALIGNNONE SIZE-FULL WP-IMAGE-14789" SRC="../imagenes/CODELINENUMBERING.PNG" STYLE="BORDER:0PX; BOX-SIZING:BORDER-BOX; DISPLAY:BLOCK; HEIGHT:AUTO !IMPORTANT; MARGIN:0PX AUTO; MAX-WIDTH:100%; WIDTH:292PX" TITLE="CODELINENUMBERING" /><BR />\nLOOK MA, EASY PRACTICAL MULTI-LINE CODE STYLING.</P>\n\n<P><A HREF="HTTP://APRESCOTT.COM/POSTS/PRESENTATIONAL-LINE-NUMBERING" STYLE="BOX-SIZING: BORDER-BOX; COLOR: RGB(68, 114, 185); TEXT-DECORATION: NONE; BORDER-BOTTOM-WIDTH: 2PX; BORDER-BOTTOM-STYLE: SOLID; BORDER-BOTTOM-COLOR: TRANSPARENT;">RELEVANT ARTICLE BY ADAM PRESCOTT.</A></P>\n\n<H3>::NTH-WORD() / ::FIRST-WORD / ::LAST-WORD / ::NTH-LAST-WORD()</H3>\n\n<P>WE CURRENTLY DON&#39;T HAVE ANY WORD-BASED PSEUDO ELEMENTS. WE DO HAVE&NBSP;<CODE>WORD-SPACING</CODE>THOUGH, WHICH IS NOTABLE.</P>\n\n<P>ONE USE CASE IS SIMILAR TO USING&NBSP;<CODE>::FIRST-LETTER</CODE>&NBSP;FOR DROP CAPS, ONLY DOING A WHOLE WORD.</P>\n\n<PRE>\n<CODE><SPAN STYLE="COLOR:RGB(223, 196, 140)">ARTICLE P::FIRST-WORD </SPAN><SPAN STYLE="COLOR:WHITE">{</SPAN>\n  <SPAN STYLE="COLOR:RGB(155, 134, 156)">FLOAT</SPAN><SPAN STYLE="COLOR:WHITE">:</SPAN> LEFT<SPAN STYLE="COLOR:WHITE">;</SPAN>\n  <SPAN STYLE="COLOR:RGB(155, 134, 156)">FONT-SIZE</SPAN><SPAN STYLE="COLOR:WHITE">:</SPAN> 300%<SPAN STYLE="COLOR:WHITE">;</SPAN>\n  <SPAN STYLE="COLOR:RGB(155, 134, 156)">MARGIN</SPAN><SPAN STYLE="COLOR:WHITE">:</SPAN> 0 10PX 10PX 0<SPAN STYLE="COLOR:WHITE">;</SPAN>\n<SPAN STYLE="COLOR:WHITE">}</SPAN></CODE></PRE>\n\n<P><IMG ALT="" CLASS="ALIGNNONE SIZE-FULL WP-IMAGE-14774" SRC="../imagenes/DROPWORD.PNG" STYLE="BORDER:0PX; BOX-SIZING:BORDER-BOX; DISPLAY:BLOCK; HEIGHT:AUTO !IMPORTANT; MARGIN:0PX AUTO; MAX-WIDTH:100%; WIDTH:570PX" TITLE="DROPWORD" /></P>\n\n<P>ALSO SIMILAR TO THE &QUOT;FADE OUT&QUOT; OF LINES ABOVE, WE COULD FADE OUT A PASSAGE WORD-BY-WORD USING&NBSP;<CODE>::NTH-LAST-WORD(N)</CODE>.</P>\n\n<H3>::NTH-LETTER() / ::LAST-LETTER() / ::NTH-LAST-LETTER()</H3>\n\n<P>WE ALREADY HAVE&NBSP;<CODE>::FIRST-LETTER</CODE>, WHICH SEES PRETTY DECENT USAGE, SO WHY NOT COMPLETE THE SET?</P>\n\n<P>OF ALL OF THESE &QUOT;NEW&QUOT; SELECTORS,&NBSP;<CODE>::NTH-LETTER</CODE>&NBSP;IS LIKELY THE MOST USEFUL. FOR INSTANCE,<A HREF="HTTP://LETTERINGJS.COM/" STYLE="BOX-SIZING: BORDER-BOX; COLOR: RGB(68, 114, 185); TEXT-DECORATION: NONE; BORDER-BOTTOM-WIDTH: 2PX; BORDER-BOTTOM-STYLE: SOLID; BORDER-BOTTOM-COLOR: TRANSPARENT;">LETTERING.JS</A>&NBSP;WRAPS LETTERS IN&NBSP;<CODE>&LT;SPAN&GT;</CODE>S FOR US SO THAT WE CAN SELECT INDIVIDUAL LETTERS. THIS WOULD BE ENTIRELY UNNECESSARY WITH&NBSP;<CODE>::NTH-LETTER</CODE>.</P>\n\n<P>TAKE THIS EXAMPLE:</P>\n\n<P><IMG ALT="" CLASS="ALIGNNONE SIZE-FULL WP-IMAGE-14775" SRC="../imagenes/LETTERING.PNG" STYLE="BORDER:0PX; BOX-SIZING:BORDER-BOX; DISPLAY:BLOCK; HEIGHT:AUTO !IMPORTANT; MARGIN:0PX AUTO; MAX-WIDTH:100%; WIDTH:570PX" TITLE="LETTERING" /></P>\n\n<PRE>\n<CODE><SPAN STYLE="COLOR:RGB(223, 196, 140)">H1.FANCY::NTH-LETTER(N) </SPAN><SPAN STYLE="COLOR:WHITE">{</SPAN>\n  <SPAN STYLE="COLOR:RGB(155, 134, 156)">DISPLAY</SPAN><SPAN STYLE="COLOR:WHITE">:</SPAN> INLINE-BLOCK<SPAN STYLE="COLOR:WHITE">;</SPAN>\n  <SPAN STYLE="COLOR:RGB(155, 134, 156)">PADDING</SPAN><SPAN STYLE="COLOR:WHITE">:</SPAN> 20PX 10PX<SPAN STYLE="COLOR:WHITE">;</SPAN>\n<SPAN STYLE="COLOR:WHITE">}</SPAN>\n<SPAN STYLE="COLOR:RGB(223, 196, 140)">H1.FANCY::NTH-LETTER(ODD) </SPAN><SPAN STYLE="COLOR:WHITE">{</SPAN>\n  <SPAN STYLE="COLOR:RGB(155, 134, 156)">TRANSFORM</SPAN><SPAN STYLE="COLOR:WHITE">:</SPAN> SKEWY(15DEG)<SPAN STYLE="COLOR:WHITE">;</SPAN>\n  <SPAN STYLE="COLOR:RGB(155, 134, 156)">BACKGROUND</SPAN><SPAN STYLE="COLOR:WHITE">:</SPAN> <SPAN STYLE="COLOR:RGB(166, 127, 89)">URL(LIGHT-RED-PATTERN.PNG)</SPAN><SPAN STYLE="COLOR:WHITE">;</SPAN>\n<SPAN STYLE="COLOR:WHITE">}</SPAN>\n<SPAN STYLE="COLOR:RGB(223, 196, 140)">H1.FANCY::NTH-LETTER(EVEN) </SPAN><SPAN STYLE="COLOR:WHITE">{</SPAN>\n  <SPAN STYLE="COLOR:RGB(155, 134, 156)">TRANSFORM</SPAN><SPAN STYLE="COLOR:WHITE">:</SPAN> SKEWY(-15DEG)<SPAN STYLE="COLOR:WHITE">;</SPAN>\n  <SPAN STYLE="COLOR:RGB(155, 134, 156)">BACKGROUND</SPAN><SPAN STYLE="COLOR:WHITE">:</SPAN> <SPAN STYLE="COLOR:RGB(166, 127, 89)">URL(DARK-RED-PATTERN.PNG)</SPAN><SPAN STYLE="COLOR:WHITE">;</SPAN>\n<SPAN STYLE="COLOR:WHITE">}</SPAN>\n<SPAN STYLE="COLOR:RGB(223, 196, 140)">H1.FANCY::NTH-WORD(N) </SPAN><SPAN STYLE="COLOR:WHITE">{</SPAN>\n  <SPAN STYLE="COLOR:RGB(155, 134, 156)">MARGIN-RIGHT</SPAN><SPAN STYLE="COLOR:WHITE">:</SPAN> 20PX<SPAN STYLE="COLOR:WHITE">;</SPAN>\n<SPAN STYLE="COLOR:WHITE">}</SPAN>\n<SPAN STYLE="COLOR:RGB(223, 196, 140)">H1.FANCY::LAST-WORD </SPAN><SPAN STYLE="COLOR:WHITE">{</SPAN>\n  <SPAN STYLE="COLOR:RGB(155, 134, 156)">MARGIN-RIGHT</SPAN><SPAN STYLE="COLOR:WHITE">:</SPAN> 0<SPAN STYLE="COLOR:WHITE">;</SPAN>\n<SPAN STYLE="COLOR:WHITE">}</SPAN></CODE></PRE>\n\n<P>CHECK OUT ALL THE EXAMPLES AT&NBSP;<A HREF="HTTP://LETTERINGJS.COM/" STYLE="BOX-SIZING: BORDER-BOX; COLOR: RGB(68, 114, 185); TEXT-DECORATION: NONE; BORDER-BOTTOM-WIDTH: 2PX; BORDER-BOTTOM-STYLE: SOLID; BORDER-BOTTOM-COLOR: TRANSPARENT;">LETTERING.JS</A>&NBSP;-- ALL OF THOSE ARE GOOD EXAMPLES OF THE NEED FOR THIS.</P>\n\n<P>ANOTHER WORD/LETTER COMBINATION EXAMPLE IS A FORMAL &QUOT;LETTER&QUOT;, LIKE:</P>\n\n<PRE>\n<CODE><SPAN STYLE="COLOR:RGB(171, 135, 93)">&LT;P&GT;</SPAN>DEAR EMILY,<SPAN STYLE="COLOR:RGB(171, 135, 93)">&LT;/P&GT;</SPAN>\n<SPAN STYLE="COLOR:RGB(171, 135, 93)">&LT;P&GT;</SPAN>YADDA YADDA YADDA.<SPAN STYLE="COLOR:RGB(171, 135, 93)">&LT;/P&GT;</SPAN>\n<SPAN STYLE="COLOR:RGB(171, 135, 93)">&LT;P&GT;</SPAN>LOVE, CHRIS.<SPAN STYLE="COLOR:RGB(171, 135, 93)">&LT;/P&GT;</SPAN></CODE></PRE>\n\n<P>PERHAPS THIS &QUOT;LETTER&QUOT; IS GENERATED BY DYNAMIC CONTENT FROM A DATABASE, BUT WE WANT TO ENSURE THE PROPER CAPITALIZATION AND STYLE OF THE OPENING AND CLOSING LINES.</P>\n\n<PRE>\n<CODE><SPAN STYLE="COLOR:RGB(223, 196, 140)">.LETTER P:FIRST-CHILD::NTH-WORD(-N+2)::NTH-LETTER(1),\n.LETTER P:LAST-CHILD:NTH-WORD(-N+2):NTH-LETTER(1) </SPAN><SPAN STYLE="COLOR:WHITE">{</SPAN>\n  <SPAN STYLE="COLOR:RGB(155, 134, 156)">TEXT-TRANSFORM</SPAN><SPAN STYLE="COLOR:WHITE">:</SPAN> UPPERCASE<SPAN STYLE="COLOR:WHITE">;</SPAN>\n<SPAN STYLE="COLOR:WHITE">}</SPAN></CODE></PRE>\n\n<H3>THE COMPLETE SET</H3>\n\n<P>SO IF WE GET ALL OF THIS, THE COMPLETE SET WOULD BE:</P>\n\n<PRE>\n<CODE><SPAN STYLE="COLOR:WHITE">:</SPAN><SPAN STYLE="COLOR:RGB(155, 134, 156)">FIRST-CHILD</SPAN>        <SPAN STYLE="COLOR:WHITE">:</SPAN><SPAN STYLE="COLOR:RGB(155, 134, 156)">FIRST-OF-TYPE</SPAN>        <SPAN STYLE="COLOR:WHITE">:</SPAN><SPAN STYLE="COLOR:RGB(155, 134, 156)">ONLY-CHILD</SPAN>\n<SPAN STYLE="COLOR:WHITE">:</SPAN><SPAN STYLE="COLOR:RGB(155, 134, 156)">LAST-CHILD</SPAN>         <SPAN STYLE="COLOR:WHITE">:</SPAN><SPAN STYLE="COLOR:RGB(155, 134, 156)">LAST-OF-TYPE</SPAN>         <SPAN STYLE="COLOR:WHITE">:</SPAN><SPAN STYLE="COLOR:RGB(155, 134, 156)">ONLY-OF-TYPE</SPAN>                  \n<SPAN STYLE="COLOR:WHITE">:</SPAN><SPAN STYLE="COLOR:RGB(155, 134, 156)">NTH-CHILD</SPAN>          <SPAN STYLE="COLOR:WHITE">:</SPAN><SPAN STYLE="COLOR:RGB(155, 134, 156)">NTH-OF-TYPE</SPAN>    \n<SPAN STYLE="COLOR:WHITE">:</SPAN><SPAN STYLE="COLOR:RGB(155, 134, 156)">NTH-LAST-CHILD</SPAN>     <SPAN STYLE="COLOR:WHITE">:</SPAN><SPAN STYLE="COLOR:RGB(155, 134, 156)">NTH-LAST-OF-TYPE</SPAN>\n\n<SPAN STYLE="COLOR:WHITE">:</SPAN><SPAN STYLE="COLOR:WHITE">:</SPAN><SPAN STYLE="COLOR:RGB(155, 134, 156)">FIRST-LETTER</SPAN>      <SPAN STYLE="COLOR:WHITE">:</SPAN><SPAN STYLE="COLOR:WHITE">:</SPAN><SPAN STYLE="COLOR:RGB(155, 134, 156)">FIRST-LINE</SPAN>          <SPAN STYLE="COLOR:WHITE">:</SPAN><SPAN STYLE="COLOR:WHITE">:</SPAN><SPAN STYLE="COLOR:RGB(155, 134, 156)">FIRST-WORD</SPAN>\n<SPAN STYLE="COLOR:WHITE">:</SPAN><SPAN STYLE="COLOR:WHITE">:</SPAN><SPAN STYLE="COLOR:RGB(155, 134, 156)">LAST-LETTER</SPAN>       <SPAN STYLE="COLOR:WHITE">:</SPAN><SPAN STYLE="COLOR:WHITE">:</SPAN><SPAN STYLE="COLOR:RGB(155, 134, 156)">LAST-LINE</SPAN>           <SPAN STYLE="COLOR:WHITE">:</SPAN><SPAN STYLE="COLOR:WHITE">:</SPAN><SPAN STYLE="COLOR:RGB(155, 134, 156)">LAST-WORD</SPAN>\n<SPAN STYLE="COLOR:WHITE">:</SPAN><SPAN STYLE="COLOR:WHITE">:</SPAN><SPAN STYLE="COLOR:RGB(155, 134, 156)">NTH-LETTER</SPAN>        <SPAN STYLE="COLOR:WHITE">:</SPAN><SPAN STYLE="COLOR:WHITE">:</SPAN><SPAN STYLE="COLOR:RGB(155, 134, 156)">NTH-LINE</SPAN>            <SPAN STYLE="COLOR:WHITE">:</SPAN><SPAN STYLE="COLOR:WHITE">:</SPAN><SPAN STYLE="COLOR:RGB(155, 134, 156)">NTH-WORD</SPAN>\n<SPAN STYLE="COLOR:WHITE">:</SPAN><SPAN STYLE="COLOR:WHITE">:</SPAN><SPAN STYLE="COLOR:RGB(155, 134, 156)">NTH-LAST-LETTER</SPAN>   <SPAN STYLE="COLOR:WHITE">:</SPAN><SPAN STYLE="COLOR:WHITE">:</SPAN><SPAN STYLE="COLOR:RGB(155, 134, 156)">NTH-LAST-LINE</SPAN>       <SPAN STYLE="COLOR:WHITE">:</SPAN><SPAN STYLE="COLOR:WHITE">:</SPAN>NTH-LAST-WORD</CODE></PRE>\n\n<P>AGAIN, JUST WISHFUL THINKING. IF THERE IS ANYONE I CAN PUT THIS IN FRONT OF THAT CAN DO SOMETHING ABOUT IT, I WILL. AND I&#39;LL ALSO KEEP THIS UPDATED WITH THE FEEDBACK ON IT, POSITIVE OR NEGATIVE.</P>\n', 'alexander', 'css', 5, 0, '2014-10-27 05:23:46', 0);
INSERT INTO `noticias` (`id`, `titulo`, `foto`, `contenido`, `user`, `categoria`, `visitas`, `id_comentario`, `publicado`, `comentarios`) VALUES
(29, 'How nth-child Works', 'imagenes/nth-child-t2.jpg', '<P>THERE IS A CSS SELECTOR, REALLY A PSEUDO-SELECTOR, CALLED NTH-CHILD. HERE IS AN EXAMPLE OF USING IT:</P>\r\n\r\n<PRE>\r\n<CODE><SPAN STYLE="COLOR:RGB(223, 196, 140)">UL LI:NTH-CHILD(3N+3) </SPAN><SPAN STYLE="COLOR:WHITE">{</SPAN>  \r\n  <SPAN STYLE="COLOR:RGB(155, 134, 156)">COLOR</SPAN><SPAN STYLE="COLOR:WHITE">:</SPAN> #CCC<SPAN STYLE="COLOR:WHITE">;</SPAN>\r\n<SPAN STYLE="COLOR:WHITE">}</SPAN></CODE></PRE>\r\n\r\n<P>WHAT THE ABOVE CSS DOES, IS SELECT EVERY THIRD LIST ITEM INSIDE UNORDERED LISTS. THAT IS, THE 3RD, 6TH, 9TH, 12TH, ETC. BUT HOW DOES THAT WORK? AND WHAT OTHER KINDS OF THINGS CAN YOU DO WITH NTH-CHILD? LET&#39;S TAKE A LOOK.</P>\r\n\r\n<P>&NBSP;</P>\r\n\r\n<P>IT BOILS DOWN TO WHAT IS IN BETWEEN THOSE PARENTHESES. NTH-CHILD ACCEPTS TWO KEYWORDS IN THAT SPOT:&NBSP;<STRONG>EVEN</STRONG>&NBSP;AND&NBSP;<STRONG>ODD</STRONG>. THOSE SHOULD BE PRETTY OBVIOUS. &QUOT;EVEN&QUOT; SELECTS EVEN NUMBERED ELEMENTS, LIKE THE 2ND, 4TH, 6TH, ETC. &QUOT;ODD&QUOT; SELECTS ODD NUMBERED ELEMENTS, LIKE 1ST, 3RD, 5TH, ETC.</P>\r\n\r\n<P>AS SEEN IN THE FIRST EXAMPLE, NTH-CHILD ALSO ACCEPTS&NBSP;<EM>EXPRESSIONS</EM>&NBSP;IN BETWEEN THOSE PARENTHESES. THE SIMPLEST POSSIBLE EXPRESSION? JUST A NUMBER. IF YOU PUT SIMPLY A NUMBER IN THE PARENTHESES, IT WILL MATCH ONLY THAT NUMBER ELEMENT. FOR EXAMPLE, HERE IS HOW TO SELECT ONLY THE 5TH ELEMENT:</P>\r\n\r\n<PRE>\r\n<CODE><SPAN STYLE="COLOR:RGB(223, 196, 140)">UL LI:NTH-CHILD(5) </SPAN><SPAN STYLE="COLOR:WHITE">{</SPAN>  \r\n  <SPAN STYLE="COLOR:RGB(155, 134, 156)">COLOR</SPAN><SPAN STYLE="COLOR:WHITE">:</SPAN> #CCC<SPAN STYLE="COLOR:WHITE">;</SPAN>\r\n<SPAN STYLE="COLOR:WHITE">}</SPAN></CODE></PRE>\r\n\r\n<P>LET&#39;S GET BACK TO THE &QUOT;3N+3&QUOT; FROM THE ORIGINAL EXAMPLE THOUGH. HOW DOES THAT WORK? WHY DOES IT SELECT EVERY THIRD ELEMENT? THE TRICK IS UNDERSTANDING THE &QUOT;N&QUOT; AND ALGEBRAIC EXPRESSION THAT REPRESENTS. THINK OF &QUOT;N&QUOT; AS STARTING AT ZERO AND THEN A SET OF ALL POSITIVE INTEGERS. THEN COMPLETE THE EXPRESSION. SO THE 3N IS &QUOT;3XN&QUOT;, AND THE WHOLE EXPRESSION TOGETHER IS &QUOT;(3XN)+3&QUOT;. NOW SUBSTITUTING IN THE ZERO AND POSITIVE INTEGERS, WE GET:</P>\r\n\r\n<P>(3 X 0) + 3 = 3 = 3RD ELEMENT<BR />\r\n(3 X 1) + 3 = 6 = 6TH ELEMENT<BR />\r\n(3 X 2) + 3 = 9 = 9TH ELEMENT<BR />\r\nETC.</P>\r\n\r\n<P>HOW ABOUT THE :NTH-CHILD(2N+1)?</P>\r\n\r\n<P>(2 X 0) + 1 = 1 = 1ST ELEMENT<BR />\r\n(2 X 1) + 1 = 3 = 3RD ELEMENT<BR />\r\n(2 X 2) + 1 = 5 = 5TH ELEMENT<BR />\r\nETC.</P>\r\n\r\n<P>HEY WAIT! THAT&#39;S THE SAME AS &QUOT;ODD&QUOT;, SO PROBABLY DON&#39;T NEED TO USE THAT ONE VERY OFTEN. BUT WAIT NOW. HAVEN&#39;T WE EXPOSED OUR ORIGINAL EXAMPLE AS BEING OVERLY COMPLICATED? WHAT IF INSTEAD OF &QUOT;3N+3&QUOT;, WE USED &QUOT;3N+0&QUOT;, OR EVEN SIMPLER &QUOT;3N&QUOT;.</P>\r\n\r\n<P>(3 X 0) = 0 = NO MATCH<BR />\r\n(3 X 1) = 3 = 3RD ELEMENT<BR />\r\n(3 X 2) = 6 = 6TH ELEMENT<BR />\r\n(3 X 3) = 9 = 9TH ELEMENT<BR />\r\nETC.</P>\r\n\r\n<P>SO AS YOU CAN SEE, THE MATCHES ARE EXACTLY THE SAME, NO NEED FOR THE &QUOT;+3&QUOT;. WE CAN USE NEGATIVE N VALUES, AS WELL AS USE SUBTRACTION IN THE EXPRESSIONS. FOR EXAMPLE, 4N-1:</P>\r\n\r\n<P>(4 X 0) - 1 = -1 = NO MATCH<BR />\r\n(4 X 1) - 1 = 3 = 3RD ELEMENT<BR />\r\n(4 X 2) - 1 = 7 = 7TH ELEMENT<BR />\r\nETC.</P>\r\n\r\n<P>USING &QUOT;-N&QUOT; VALUES SEEMS A LITTLE WEIRD, BECAUSE IF THE END RESULT IS NEGATIVE THERE IS NO MATCH, SO YOU&#39;LL NEED TO ADD TO THE EXPRESSION TO GET IT BACK POSITIVE AGAIN. AS IT TURNS OUT, THIS IS A RATHER CLEVER TECHNIQUE. YOU CAN USE IT TO SELECT THE &QUOT;FIRST N ELEMENTS&QUOT; WITH &QUOT;-N+3&QUOT;:</P>\r\n\r\n<P>-0 + 3 = 3 = 3RD ELEMENT<BR />\r\n-1 + 3 = 2 = 2ND ELEMENT<BR />\r\n-2 + 3 = 1 = 1ST ELEMENT<BR />\r\n-3 + 3 = 0 = NO MATCH<BR />\r\nETC.</P>\r\n\r\n<P>SITEPOINT HAS A NICE REFERENCE GUIDE, WHICH INCLUDES THIS&NBSP;<A HREF="HTTP://REFERENCE.SITEPOINT.COM/CSS/UNDERSTANDINGNTHCHILDEXPRESSIONS" STYLE="BOX-SIZING: BORDER-BOX; COLOR: RGB(68, 114, 185); TEXT-DECORATION: NONE; BORDER-BOTTOM-WIDTH: 2PX; BORDER-BOTTOM-STYLE: SOLID; BORDER-BOTTOM-COLOR: TRANSPARENT;">HANDY-DANDY TABLE</A>&NBSP;WHICH I&#39;LL SHAMELESSLY REPUBLISH HERE:</P>\r\n\r\n<TABLE ID="NTHTABLE" STYLE="BORDER-COLLAPSE:COLLAPSE; BORDER-SPACING:0PX; BOX-SIZING:BORDER-BOX; COLOR:RGB(0, 0, 0); FONT-FAMILY:NOTO SANS,SANS-SERIF; FONT-SIZE:17PX; LINE-HEIGHT:25.5PX; MARGIN:0PX 0PX 15PX; WIDTH:695PX">\r\n	<THEAD>\r\n		<TR>\r\n			<TH STYLE="TEXT-ALIGN:CENTER">N</TH>\r\n			<TH STYLE="TEXT-ALIGN:CENTER">2N+1</TH>\r\n			<TH STYLE="TEXT-ALIGN:CENTER">4N+1</TH>\r\n			<TH STYLE="TEXT-ALIGN:CENTER">4N+4</TH>\r\n			<TH STYLE="TEXT-ALIGN:CENTER">4N</TH>\r\n			<TH STYLE="TEXT-ALIGN:CENTER">5N-2</TH>\r\n			<TH STYLE="TEXT-ALIGN:CENTER">-N+3</TH>\r\n		</TR>\r\n	</THEAD>\r\n	<TBODY>\r\n		<TR>\r\n			<TH STYLE="TEXT-ALIGN:CENTER">0</TH>\r\n			<TD STYLE="TEXT-ALIGN:CENTER">1</TD>\r\n			<TD STYLE="TEXT-ALIGN:CENTER">1</TD>\r\n			<TD STYLE="TEXT-ALIGN:CENTER">4</TD>\r\n			<TD STYLE="TEXT-ALIGN:CENTER">-</TD>\r\n			<TD STYLE="TEXT-ALIGN:CENTER">-</TD>\r\n			<TD STYLE="TEXT-ALIGN:CENTER">3</TD>\r\n		</TR>\r\n		<TR>\r\n			<TH STYLE="TEXT-ALIGN:CENTER">1</TH>\r\n			<TD STYLE="TEXT-ALIGN:CENTER">3</TD>\r\n			<TD STYLE="TEXT-ALIGN:CENTER">5</TD>\r\n			<TD STYLE="TEXT-ALIGN:CENTER">8</TD>\r\n			<TD STYLE="TEXT-ALIGN:CENTER">4</TD>\r\n			<TD STYLE="TEXT-ALIGN:CENTER">3</TD>\r\n			<TD STYLE="TEXT-ALIGN:CENTER">2</TD>\r\n		</TR>\r\n		<TR>\r\n			<TH STYLE="TEXT-ALIGN:CENTER">2</TH>\r\n			<TD STYLE="TEXT-ALIGN:CENTER">5</TD>\r\n			<TD STYLE="TEXT-ALIGN:CENTER">9</TD>\r\n			<TD STYLE="TEXT-ALIGN:CENTER">12</TD>\r\n			<TD STYLE="TEXT-ALIGN:CENTER">8</TD>\r\n			<TD STYLE="TEXT-ALIGN:CENTER">8</TD>\r\n			<TD STYLE="TEXT-ALIGN:CENTER">1</TD>\r\n		</TR>\r\n		<TR>\r\n			<TH STYLE="TEXT-ALIGN:CENTER">3</TH>\r\n			<TD STYLE="TEXT-ALIGN:CENTER">7</TD>\r\n			<TD STYLE="TEXT-ALIGN:CENTER">13</TD>\r\n			<TD STYLE="TEXT-ALIGN:CENTER">16</TD>\r\n			<TD STYLE="TEXT-ALIGN:CENTER">12</TD>\r\n			<TD STYLE="TEXT-ALIGN:CENTER">13</TD>\r\n			<TD STYLE="TEXT-ALIGN:CENTER">-</TD>\r\n		</TR>\r\n		<TR>\r\n			<TH STYLE="TEXT-ALIGN:CENTER">4</TH>\r\n			<TD STYLE="TEXT-ALIGN:CENTER">9</TD>\r\n			<TD STYLE="TEXT-ALIGN:CENTER">17</TD>\r\n			<TD STYLE="TEXT-ALIGN:CENTER">20</TD>\r\n			<TD STYLE="TEXT-ALIGN:CENTER">16</TD>\r\n			<TD STYLE="TEXT-ALIGN:CENTER">18</TD>\r\n			<TD STYLE="TEXT-ALIGN:CENTER">-</TD>\r\n		</TR>\r\n		<TR>\r\n			<TH STYLE="TEXT-ALIGN:CENTER">5</TH>\r\n			<TD STYLE="TEXT-ALIGN:CENTER">11</TD>\r\n			<TD STYLE="TEXT-ALIGN:CENTER">21</TD>\r\n			<TD STYLE="TEXT-ALIGN:CENTER">24</TD>\r\n			<TD STYLE="TEXT-ALIGN:CENTER">20</TD>\r\n			<TD STYLE="TEXT-ALIGN:CENTER">23</TD>\r\n			<TD STYLE="TEXT-ALIGN:CENTER">-</TD>\r\n		</TR>\r\n	</TBODY>\r\n</TABLE>\r\n\r\n<H3>BROWSER COMPATIBILITY</H3>\r\n\r\n<P>NTH-CHILD IS ONE OF THOSE RATHER UNFORTUNATE CSS ATTRIBUTES THAT IS CAUGHT BETWEEN NEARLY FULL CROSS-BROWSER COMPATIBILITY, EXCEPT FOR COMPLETELY ZERO SUPPORT IN IE, EVEN IE 8. SO WHEN IT COMES TO IT&#39;S USE, IF THE END RESULT IS &QUOT;PROGRESSIVE ENHANCEMENT&QUOT; IN SOME FASHION (E.G. APPLYING A COOL COLOR PALETTE TO TABLE ROWS, FOR EXAMPLE), THEN BY ALL MEANS, GO FOR IT. BUT YOU PROBABLY SHOULDN&#39;T USE IT IF YOU ARE DOING SOMETHING MORE IMPORTANT, LIKE RELYING ON IT FOR SITE STRUCTURE. FOR EXAMPLE, REMOVING THE RIGHT MARGIN FROM EVERY THIRD BOX IN A THREE BY THREE GRID OF BOXES, SO THEY WILL FIT PROPERLY.</P>\r\n\r\n<P>ONE SAVING GRACE HERE IS THAT IF YOU ARE USING JQUERY, WHICH SUPPORTS ALL CSS SELECTOR INCLUDING :NTH-CHILD, THE SELECTOR&NBSP;<STRONG>WILL</STRONG>&NBSP;WORK, EVEN IN INTERNET EXPLORER.</P>\r\n', 'alexander', 'css', 21, 0, '2014-11-01 03:28:35', 0),
(30, 'CSS Attribute Selectors', 'imagenes/css3-attr-selector-cover.jpg', '<P>CSS HAS THE ABILITY TO TARGET HTML ELEMENTS BASED ON ANY ONE OF THEIR ATTRIBUTES. YOU PROBABLY ALREADY KNOW ABOUT CLASSES AND IDS. CHECK OUT THIS BIT OF HTML:</P>\r\n\r\n<PRE>\r\n<CODE><SPAN STYLE="COLOR:RGB(171, 135, 93)">&LT;H2 ID<SPAN STYLE="COLOR:RGB(143, 156, 108)"><SPAN STYLE="COLOR:RGB(171, 135, 93)">=</SPAN>&QUOT;TITLE&QUOT;</SPAN> CLASS<SPAN STYLE="COLOR:RGB(143, 156, 108)"><SPAN STYLE="COLOR:RGB(171, 135, 93)">=</SPAN>&QUOT;MAGIC&QUOT;</SPAN> REL<SPAN STYLE="COLOR:RGB(143, 156, 108)"><SPAN STYLE="COLOR:RGB(171, 135, 93)">=</SPAN>&QUOT;FRIEND&QUOT;</SPAN>&GT;</SPAN>DAVID WALSH<SPAN STYLE="COLOR:RGB(171, 135, 93)">&LT;/H2&GT;</SPAN></CODE></PRE>\r\n\r\n<P>THIS SINGLE ELEMENT HAS THREE ATTRIBUTES: ID, CLASS, AND REL. TO SELECT THE ELEMENT IN CSS, YOU COULD USE AN ID SELECTOR (#FIRST-TITLE) OR A CLASS SELECTOR (.MAGICAL). BUT DID YOU KNOW YOU CAN SELECT IT BASED ON THAT REL ATTRIBUTE AS WELL? THAT IS WHAT IS KNOWN AS AN ATTRIBUTE SELECTOR:</P>\r\n\r\n<PRE>\r\n<CODE><SPAN STYLE="COLOR:RGB(223, 196, 140)">H2[REL=&QUOT;FRIEND&QUOT;] </SPAN><SPAN STYLE="COLOR:WHITE">{</SPAN>\r\n   <SPAN STYLE="COLOR:RGB(119, 119, 119)">/* WOOHOO! */</SPAN>\r\n<SPAN STYLE="COLOR:WHITE">}</SPAN></CODE></PRE>\r\n\r\n<P>THERE IS A LOT MORE TO ATTRIBUTE SELECTORS THOUGH, SO LET&#39;S LOOK CLOSER AT ALL THE DIFFERENT OPTIONS AND TRY TO COVER SOME &QUOT;REAL WORLD&QUOT; SCENARIOS ON WHEN THEY MIGHT BE USEFUL.</P>\r\n\r\n<P>&NBSP;</P>\r\n\r\n<H4>ATTRIBUTE EXACTLY EQUALS CERTAIN VALUE</H4>\r\n\r\n<P>IN THE EXAMPLE WE USED ABOVE, THE ATTRIBUTE OF THE H2 ELEMENT WAS &QUOT;FRIEND&QUOT;. THE CSS SELECTOR WE WROTE TARGETED THAT H2 ELEMENT BECAUSE IT&#39;S REL ATTRIBUTE WAS EXACTLY &QUOT;FRIEND&QUOT;. IN OTHER WORDS, THAT EQUALS SIGN MEANS JUST JUST WHAT YOU THINK IT DOES... AN EXACT MATCH. SEE ANOTHER BASIC EXAMPLE:</P>\r\n\r\n<PRE>\r\n<CODE><SPAN STYLE="COLOR:RGB(171, 135, 93)">&LT;H1 REL<SPAN STYLE="COLOR:RGB(143, 156, 108)"><SPAN STYLE="COLOR:RGB(171, 135, 93)">=</SPAN>&QUOT;EXTERNAL&QUOT;</SPAN>&GT;</SPAN>ATTRIBUTE EQUALS<SPAN STYLE="COLOR:RGB(171, 135, 93)">&LT;/H1&GT;</SPAN></CODE></PRE>\r\n\r\n<PRE>\r\n<CODE><SPAN STYLE="COLOR:RGB(223, 196, 140)">H1[REL=&QUOT;EXTERNAL&QUOT;] </SPAN><SPAN STYLE="COLOR:WHITE">{</SPAN> <SPAN STYLE="COLOR:RGB(155, 134, 156)">COLOR</SPAN><SPAN STYLE="COLOR:WHITE">:</SPAN> RED<SPAN STYLE="COLOR:WHITE">;</SPAN> <SPAN STYLE="COLOR:WHITE">}</SPAN></CODE></PRE>\r\n\r\n<P>A GREAT REAL WORLD EXAMPLE OF THIS IS STYLING A BLOGROLL. LET&#39;S SAY YOU HAD A LIST OF LINKS TO FRIENDS SITES LIKE THIS:</P>\r\n\r\n<PRE>\r\n<CODE><SPAN STYLE="COLOR:RGB(171, 135, 93)">&LT;A HREF<SPAN STYLE="COLOR:RGB(143, 156, 108)"><SPAN STYLE="COLOR:RGB(171, 135, 93)">=</SPAN>&QUOT;HTTP://PERISHABLEPRESS.COM&QUOT;</SPAN>&GT;</SPAN>JEFF STARR<SPAN STYLE="COLOR:RGB(171, 135, 93)">&LT;/A&GT;</SPAN>\r\n<SPAN STYLE="COLOR:RGB(171, 135, 93)">&LT;A HREF<SPAN STYLE="COLOR:RGB(143, 156, 108)"><SPAN STYLE="COLOR:RGB(171, 135, 93)">=</SPAN>&QUOT;HTTP://DAVIDWALSH.NAME&QUOT;</SPAN>&GT;</SPAN>DAVID WALSH<SPAN STYLE="COLOR:RGB(171, 135, 93)">&LT;/A&GT;</SPAN>\r\n<SPAN STYLE="COLOR:RGB(171, 135, 93)">&LT;A HREF<SPAN STYLE="COLOR:RGB(143, 156, 108)"><SPAN STYLE="COLOR:RGB(171, 135, 93)">=</SPAN>&QUOT;HTTP://ACCIDENTALNINJA.NET/&QUOT;</SPAN>&GT;</SPAN>RICHARD FELIX<SPAN STYLE="COLOR:RGB(171, 135, 93)">&LT;/A&GT;</SPAN></CODE></PRE>\r\n\r\n<P>THEN YOU WANTED TO STYLE EACH LINK SLIGHTLY DIFFERENTLY. THE TRADITIONAL WAY WOULD PROBABLY BE TO GIVE EACH LINK A CLASS NAME IN WHICH TO TARGET, BUT THAT REQUIRES ADDITIONAL MARKUP WHICH IS ALWAYS A NICE THING TO AVOID (SEMANTICS AND ALL). ANOTHER WAY MIGHT BE TO USE&NBSP;<A HREF="HTTP://CSS-TRICKS.COM/HOW-NTH-CHILD-WORKS/" STYLE="BOX-SIZING: BORDER-BOX; COLOR: RGB(68, 114, 185); TEXT-DECORATION: NONE; BORDER-BOTTOM-WIDTH: 2PX; BORDER-BOTTOM-STYLE: SOLID; BORDER-BOTTOM-COLOR: TRANSPARENT;">:NTH-CHILD</A>, BUT THAT REQUIRES THEIR ORDER TO NEVER CHANGE. THIS IS THE PERFECT USE FOR ATTRIBUTE SELECTORS... THE LINKS ALREADY HAVE A UNIQUE ATTRIBUTE IN WHICH TO TARGET!</P>\r\n\r\n<PRE>\r\n<CODE><SPAN STYLE="COLOR:RGB(223, 196, 140)">A[HREF=&QUOT;HTTP://PERISHABLEPRESS.COM&QUOT;] </SPAN><SPAN STYLE="COLOR:WHITE">{</SPAN> <SPAN STYLE="COLOR:RGB(155, 134, 156)">COLOR</SPAN><SPAN STYLE="COLOR:WHITE">:</SPAN> RED<SPAN STYLE="COLOR:WHITE">;</SPAN> <SPAN STYLE="COLOR:WHITE">}</SPAN></CODE></PRE>\r\n\r\n<P><STRONG>I BELIEVE THE MOST COMMON USE</STRONG>&NBSP;OF REGULAR ATTRIBUTE SELECTORS IS ON INPUTS. THERE ARE TEXT, BUTTON, CHECKBOX, FILE, HIDDEN, IMAGE, PASSWORD, RADIO, RESET, AND SUBMIT (DID I MISS ANY?). ALL OF THEM ARE &LT;INPUT&GT;&#39;S, AND ALL OF THEM ARE VERY DIFFERENT. SO DOING SOMETHING LIKE&NBSP;<TT>INPUT { PADDING: 10PX; }</TT>&NBSP;IS A BAD IDEA MOST OF THE TIME. IT&#39;S VERY COMMON TO SEE THINGS LIKE:</P>\r\n\r\n<PRE>\r\n<CODE><SPAN STYLE="COLOR:RGB(223, 196, 140)">INPUT[TYPE=&QUOT;TEXT&QUOT;] </SPAN><SPAN STYLE="COLOR:WHITE">{</SPAN> <SPAN STYLE="COLOR:RGB(155, 134, 156)">PADDING</SPAN><SPAN STYLE="COLOR:WHITE">:</SPAN> 3PX<SPAN STYLE="COLOR:WHITE">;</SPAN> <SPAN STYLE="COLOR:WHITE">}</SPAN>\r\n<SPAN STYLE="COLOR:RGB(223, 196, 140)">INPUT[TYPE=&QUOT;RADIO&QUOT;] </SPAN><SPAN STYLE="COLOR:WHITE">{</SPAN> <SPAN STYLE="COLOR:RGB(155, 134, 156)">FLOAT</SPAN><SPAN STYLE="COLOR:WHITE">:</SPAN> LEFT<SPAN STYLE="COLOR:WHITE">;</SPAN> <SPAN STYLE="COLOR:WHITE">}</SPAN></CODE></PRE>\r\n\r\n<P>IT&#39;S REALLY THE ONLY WAY TO GET YOUR HANDS ON CERTAIN TYPES OF INPUTS WITHOUT SCREWING UP THE OTHERS AND WITHOUT ADDING EXTRA MARKUP.</P>\r\n\r\n<DIV CLASS="EXPLANATION" STYLE="BOX-SIZING: BORDER-BOX; MARGIN: 0PX 0PX 20PX; BORDER-LEFT-COLOR: ORANGE; FONT-FAMILY: ''NOTO SANS'', SANS-SERIF; FONT-SIZE: 17PX; LINE-HEIGHT: 25.5PX; PADDING: 20PX !IMPORTANT; BACKGROUND-IMAGE: LINEAR-GRADIENT(TO RIGHT, RGBA(0, 0, 0, 0.0980392), TRANSPARENT 40%); BACKGROUND-ATTACHMENT: INITIAL; BACKGROUND-SIZE: INITIAL; BACKGROUND-ORIGIN: INITIAL; BACKGROUND-CLIP: INITIAL; BACKGROUND-POSITION: INITIAL; BACKGROUND-REPEAT: INITIAL;">\r\n<P>NOTE ON QUOTES: YOU CAN USUALLY GET AWAY WITHOUT USING QUOTES IN ATTRIBUTE SELECTORS, LIKE [TYPE=RADIO], BUT THE RULES FOR OMITTING QUOTES ARE WEIRD AND INCONSISTENT ACROSS ACTUAL BROWSER IMPLEMENTATIONS. SO, BEST PRACTICE, JUST USE QUOTES, LIKE [TYPE=&QUOT;RADIO&QUOT;]. IT&#39;S SAFER AND ALWAYS WORKS.</P>\r\n</DIV>\r\n\r\n<H4>ATTRIBUTE CONTAINS CERTAIN VALUE SOMEWHERE</H4>\r\n\r\n<P>THIS IS WHERE IT STARTS GETTING MORE INTERESTING. THE EQUALS SIGN IN ATTRIBUTE SELECTORS MAY BE PREFACED BY OTHER CHARACTERS WHICH ALTER THE MEANING A BIT. FOR EXAMPLE, &QUOT;*=&QUOT; MEANS &QUOT;MATCH THE FOLLOWING VALUE&NBSP;<EM>ANYWHERE IN THE ATTRIBUTE VALUE</EM>.&QUOT; LOOK AT THIS EXAMPLE:</P>\r\n\r\n<PRE>\r\n<CODE><SPAN STYLE="COLOR:RGB(171, 135, 93)">&LT;H1 REL<SPAN STYLE="COLOR:RGB(143, 156, 108)"><SPAN STYLE="COLOR:RGB(171, 135, 93)">=</SPAN>&QUOT;XXXEXTERNALXXX&QUOT;</SPAN>&GT;</SPAN>ATTRIBUTE CONTAINS<SPAN STYLE="COLOR:RGB(171, 135, 93)">&LT;/H1&GT;</SPAN></CODE></PRE>\r\n\r\n<PRE>\r\n<CODE><SPAN STYLE="COLOR:RGB(223, 196, 140)">H1[REL*=&QUOT;EXTERNAL&QUOT;] </SPAN><SPAN STYLE="COLOR:WHITE">{</SPAN> <SPAN STYLE="COLOR:RGB(155, 134, 156)">COLOR</SPAN><SPAN STYLE="COLOR:WHITE">:</SPAN> RED<SPAN STYLE="COLOR:WHITE">;</SPAN> <SPAN STYLE="COLOR:WHITE">}</SPAN></CODE></PRE>\r\n\r\n<P>REMEMBER THAT CLASSES AND ID&#39;S ARE ATTRIBUTES TOO, AND CAN BE USED USED WITH ATTRIBUTE SELECTORS. SO LET&#39;S SAY YOU WERE WRITING CSS FOR A SITE WHERE YOU COULDN&#39;T CONTROL THE MARKUP AND A SLOPPY DEVELOPER HAD THREE DIVS YOU NEED TO TARGET:</P>\r\n\r\n<PRE>\r\n<CODE><SPAN STYLE="COLOR:RGB(171, 135, 93)">&LT;DIV ID<SPAN STYLE="COLOR:RGB(143, 156, 108)"><SPAN STYLE="COLOR:RGB(171, 135, 93)">=</SPAN>&QUOT;POST_1&QUOT;</SPAN>&GT;</SPAN><SPAN STYLE="COLOR:RGB(171, 135, 93)">&LT;/DIV&GT;</SPAN>\r\n<SPAN STYLE="COLOR:RGB(171, 135, 93)">&LT;DIV ID<SPAN STYLE="COLOR:RGB(143, 156, 108)"><SPAN STYLE="COLOR:RGB(171, 135, 93)">=</SPAN>&QUOT;POST_TWO&QUOT;</SPAN>&GT;</SPAN><SPAN STYLE="COLOR:RGB(171, 135, 93)">&LT;/DIV&GT;</SPAN>\r\n<SPAN STYLE="COLOR:RGB(171, 135, 93)">&LT;DIV ID<SPAN STYLE="COLOR:RGB(143, 156, 108)"><SPAN STYLE="COLOR:RGB(171, 135, 93)">=</SPAN>&QUOT;THIRD_POST&QUOT;</SPAN>&GT;</SPAN><SPAN STYLE="COLOR:RGB(171, 135, 93)">&LT;/DIV&GT;</SPAN></CODE></PRE>\r\n\r\n<P>YOU COULD SELECT THEM ALL WITH:</P>\r\n\r\n<PRE>\r\n<CODE><SPAN STYLE="COLOR:RGB(223, 196, 140)">DIV[ID*=&QUOT;POST&QUOT;]  </SPAN><SPAN STYLE="COLOR:WHITE">{</SPAN> <SPAN STYLE="COLOR:RGB(155, 134, 156)">COLOR</SPAN><SPAN STYLE="COLOR:WHITE">:</SPAN> RED<SPAN STYLE="COLOR:WHITE">;</SPAN> <SPAN STYLE="COLOR:WHITE">}</SPAN></CODE></PRE>\r\n\r\n<H4>ATTRIBUTE BEGINS WITH CERTAIN VALUE</H4>\r\n\r\n<PRE>\r\n<CODE><SPAN STYLE="COLOR:RGB(171, 135, 93)">&LT;H1 REL<SPAN STYLE="COLOR:RGB(143, 156, 108)"><SPAN STYLE="COLOR:RGB(171, 135, 93)">=</SPAN>&QUOT;EXTERNAL-LINK YEP&QUOT;</SPAN>&GT;</SPAN>ATTRIBUTE BEGINS<SPAN STYLE="COLOR:RGB(171, 135, 93)">&LT;/H1&GT;</SPAN></CODE></PRE>\r\n\r\n<PRE>\r\n<CODE><SPAN STYLE="COLOR:RGB(223, 196, 140)">H1[REL^=&QUOT;EXTERNAL&QUOT;] </SPAN><SPAN STYLE="COLOR:WHITE">{</SPAN> <SPAN STYLE="COLOR:RGB(155, 134, 156)">COLOR</SPAN><SPAN STYLE="COLOR:WHITE">:</SPAN> RED<SPAN STYLE="COLOR:WHITE">;</SPAN> <SPAN STYLE="COLOR:WHITE">}</SPAN></CODE></PRE>\r\n\r\n<P>A REAL WORLD EXAMPLE OF USING THIS WOULD BE, SAY, THAT YOU WANTED TO STYLE EVERY SINGLE LINK TO YOUR FRIENDS SITE DIFFERENT THAN OTHER LINKS. DOESN&#39;T MATTER IF YOU ARE LINKING TO THEIR HOMEPAGE OR ANY SUBPAGE, ANY LINKS TO THEM YOU WANT TO STYLE UP.</P>\r\n\r\n<PRE>\r\n<CODE><SPAN STYLE="COLOR:RGB(223, 196, 140)">A[HREF^=&QUOT;HTTP://PERISHABLEPRESS.COM&QUOT;] </SPAN><SPAN STYLE="COLOR:WHITE">{</SPAN> <SPAN STYLE="COLOR:RGB(155, 134, 156)">COLOR</SPAN><SPAN STYLE="COLOR:WHITE">:</SPAN> RED<SPAN STYLE="COLOR:WHITE">;</SPAN> <SPAN STYLE="COLOR:WHITE">}</SPAN></CODE></PRE>\r\n\r\n<P>THAT WILL MATCH A LINK TO THEIR HOMEPAGE, BUT ALSO ANY OTHER SUBPAGES AS WELL.</P>\r\n\r\n<H4>ATTRIBUTE ENDS WITH CERTAIN VALUE</H4>\r\n\r\n<P>WE CAN SELECT BASED ON HOW ATTRIBUTE VALUES&NBSP;<EM>BEGIN</EM>, WHY NOT&NBSP;<EM>END</EM>?</P>\r\n\r\n<PRE>\r\n<CODE><SPAN STYLE="COLOR:RGB(171, 135, 93)">&LT;H1 REL<SPAN STYLE="COLOR:RGB(143, 156, 108)"><SPAN STYLE="COLOR:RGB(171, 135, 93)">=</SPAN>&QUOT;FRIEND EXTERNAL&QUOT;</SPAN>&GT;</SPAN>ATTRIBUTE ENDS<SPAN STYLE="COLOR:RGB(171, 135, 93)">&LT;/H1&GT;</SPAN></CODE></PRE>\r\n\r\n<PRE>\r\n<CODE><SPAN STYLE="COLOR:RGB(223, 196, 140)">H1[REL$=&QUOT;EXTERNAL&QUOT;] </SPAN><SPAN STYLE="COLOR:WHITE">{</SPAN> <SPAN STYLE="COLOR:RGB(155, 134, 156)">COLOR</SPAN><SPAN STYLE="COLOR:WHITE">:</SPAN> RED<SPAN STYLE="COLOR:WHITE">;</SPAN> <SPAN STYLE="COLOR:WHITE">}</SPAN></CODE></PRE>\r\n\r\n<P>A GOOD USE CASE FOR THESE IS LABELING FILE DOWNLOAD ANCHOR LINKS WITH ICONS BASED ON WHAT TYPE OF FILE THEY ARE. FOR EXAMPLE, PDF&#39;S GET A PDF ICON AND WORD DOCUMENTS GET A WORD ICON:</P>\r\n\r\n<PRE>\r\n<CODE><SPAN STYLE="COLOR:RGB(223, 196, 140)">A[HREF$=&QUOT;.PDF&QUOT;] </SPAN><SPAN STYLE="COLOR:WHITE">{</SPAN> <SPAN STYLE="COLOR:RGB(155, 134, 156)">BACKGROUND</SPAN><SPAN STYLE="COLOR:WHITE">:</SPAN> <SPAN STYLE="COLOR:RGB(166, 127, 89)">URL(ICON-PDF.PNG)</SPAN> LEFT CENTER NO-REPEAT<SPAN STYLE="COLOR:WHITE">;</SPAN> <SPAN STYLE="COLOR:RGB(155, 134, 156)">PADDING-LEFT</SPAN><SPAN STYLE="COLOR:WHITE">:</SPAN> 30PX<SPAN STYLE="COLOR:WHITE">;</SPAN> <SPAN STYLE="COLOR:WHITE">}</SPAN>\r\n<SPAN STYLE="COLOR:RGB(223, 196, 140)">A[HREF$=&QUOT;.DOC&QUOT;] </SPAN><SPAN STYLE="COLOR:WHITE">{</SPAN> <SPAN STYLE="COLOR:RGB(155, 134, 156)">BACKGROUND</SPAN><SPAN STYLE="COLOR:WHITE">:</SPAN> <SPAN STYLE="COLOR:RGB(166, 127, 89)">URL(ICON-DOC.PNG)</SPAN> LEFT CENTER NO-REPEAT<SPAN STYLE="COLOR:WHITE">;</SPAN> <SPAN STYLE="COLOR:RGB(155, 134, 156)">PADDING-LEFT</SPAN><SPAN STYLE="COLOR:WHITE">:</SPAN> 30PX<SPAN STYLE="COLOR:WHITE">;</SPAN> <SPAN STYLE="COLOR:WHITE">}</SPAN></CODE></PRE>\r\n\r\n<H4>ATTRIBUTE IS WITHIN SPACE SEPARATED LIST</H4>\r\n\r\n<P>YOU PROBABLY ALREADY KNEW THAT YOU COULD APPLY MULTIPLE CLASSES TO ELEMENTS RIGHT? WELL IF YOU DO THAT, YOU CAN STILL USE .CLASS-NAME IN CSS TO TARGET ANY ONE OF THEM. ATTRIBUTE SELECTORS AREN&#39;T THAT EASY. IF YOUR REL ATTRIBUTE HAS MULTIPLE VALUES (E.G. VALUES IN A SPACE SEPARATED LIST) YOU&#39;LL NEED TO USE &QUOT;~=&QUOT;:</P>\r\n\r\n<PRE>\r\n<CODE><SPAN STYLE="COLOR:RGB(171, 135, 93)">&LT;H1 REL<SPAN STYLE="COLOR:RGB(143, 156, 108)"><SPAN STYLE="COLOR:RGB(171, 135, 93)">=</SPAN>&QUOT;FRIEND EXTERNAL SANDWICH&QUOT;</SPAN>&GT;</SPAN>ATTRIBUTE SPACE SEPARATED<SPAN STYLE="COLOR:RGB(171, 135, 93)">&LT;/H1&GT;</SPAN></CODE></PRE>\r\n\r\n<PRE>\r\n<CODE><SPAN STYLE="COLOR:RGB(223, 196, 140)">H1[REL~=&QUOT;EXTERNAL&QUOT;] </SPAN><SPAN STYLE="COLOR:WHITE">{</SPAN> <SPAN STYLE="COLOR:RGB(155, 134, 156)">COLOR</SPAN><SPAN STYLE="COLOR:WHITE">:</SPAN> RED<SPAN STYLE="COLOR:WHITE">;</SPAN> <SPAN STYLE="COLOR:WHITE">}</SPAN></CODE></PRE>\r\n\r\n<P>YOU MIGHT BE THINKING, WHY WOULD I USE THIS WHEN *= WOULD ALSO MATCH THIS AND BE MORE VERSATILE? INDEED IT IS MORE VERSATILE, BUT IT CAN BE TOO VERSATILE. THIS SELECTOR REQUIRES THE SPACES AROUND THE VALUE WHERE AS *= WOULD NOT. SO IF YOU HAD TWO ELEMENTS ONE WITH&NBSP;<TT>REL=HOME FRIEND-LINK</TT>&NBSP;AND ONE WITH&NBSP;<TT>REL=HOME FRIEND LINK</TT>&NBSP;YOU ARE GOING TO NEED THE SPACE-SEPARATED SELECTOR TO TARGET THE SECOND ONE PROPERLY.</P>\r\n\r\n<H4>ATTRIBUTE IS THE START OF A DASH SEPARATED LIST</H4>\r\n\r\n<P>THIS WILL SELECT IF THE&NBSP;<STRONG>START</STRONG>&NBSP;OF A DASH-SEPARATED LIST OF ATTRIBUTE VALUES MATCHES THE SELECTOR.</P>\r\n\r\n<PRE>\r\n<CODE><SPAN STYLE="COLOR:RGB(171, 135, 93)">&LT;H1 REL<SPAN STYLE="COLOR:RGB(143, 156, 108)"><SPAN STYLE="COLOR:RGB(171, 135, 93)">=</SPAN>&QUOT;FRIEND-EXTERNAL-SANDWICH&QUOT;</SPAN>&GT;</SPAN>ATTRIBUTE DASH SEPARATED<SPAN STYLE="COLOR:RGB(171, 135, 93)">&LT;/H1&GT;</SPAN></CODE></PRE>\r\n\r\n<PRE>\r\n<CODE><SPAN STYLE="COLOR:RGB(223, 196, 140)">H1[REL|=&QUOT;FRIEND&QUOT;] </SPAN><SPAN STYLE="COLOR:WHITE">{</SPAN> <SPAN STYLE="COLOR:RGB(155, 134, 156)">COLOR</SPAN><SPAN STYLE="COLOR:WHITE">:</SPAN> RED<SPAN STYLE="COLOR:WHITE">;</SPAN> <SPAN STYLE="COLOR:WHITE">}</SPAN></CODE></PRE>\r\n\r\n<P>NOTE THAT EVEN THOUGH IT MATCHES BASED ON THE START OF THE SELECTOR, THE ENTIRE FIRST PART OF THE STRING BEFORE THE FIRST DASH NEEDS TO MATCH. SO IN THE ABOVE EXAMPLE, IF THE<CODE>REL</CODE>&NBSP;ATTRIBUTE WAS&NBSP;<CODE>FRIEND2-EXTERNAL-SANDWICH</CODE>, IT WOULD NOT BE A MATCH WHILE THE&NBSP;<CODE>^=</CODE>ATTRIBUTE SELECTOR WOULD HAVE.</P>\r\n\r\n<H4>MULTIPLE ATTRIBUTE MATCHES</H4>\r\n\r\n<P>VITAL TO NOTE IS THAT YOU CAN USE&NBSP;<STRONG>MULTIPLE ATTRIBUTE SELECTORS</STRONG>&NBSP;IN THE SAME SELECTOR, WHICH REQUIRES ALL OF THEM TO MATCH FOR THE SELECTOR ITSELF TO MATCH.</P>\r\n\r\n<PRE>\r\n<CODE><SPAN STYLE="COLOR:RGB(171, 135, 93)">&LT;H1 REL<SPAN STYLE="COLOR:RGB(143, 156, 108)"><SPAN STYLE="COLOR:RGB(171, 135, 93)">=</SPAN>&QUOT;HANDSOME&QUOT;</SPAN> TITLE<SPAN STYLE="COLOR:RGB(143, 156, 108)"><SPAN STYLE="COLOR:RGB(171, 135, 93)">=</SPAN>&QUOT;IMPORTANT NOTE&QUOT;</SPAN>&GT;</SPAN>MULTIPLE ATTRIBUTES<SPAN STYLE="COLOR:RGB(171, 135, 93)">&LT;/H1&GT;</SPAN></CODE></PRE>\r\n\r\n<PRE>\r\n<CODE><SPAN STYLE="COLOR:RGB(223, 196, 140)">H1[REL=&QUOT;HANDSOME&QUOT;][TITLE^=&QUOT;IMPORTANT&QUOT;] </SPAN><SPAN STYLE="COLOR:WHITE">{</SPAN> <SPAN STYLE="COLOR:RGB(155, 134, 156)">COLOR</SPAN><SPAN STYLE="COLOR:WHITE">:</SPAN> RED<SPAN STYLE="COLOR:WHITE">;</SPAN> <SPAN STYLE="COLOR:WHITE">}</SPAN></CODE></PRE>\r\n\r\n<H3>BROWSER SUPPORT</H3>\r\n\r\n<P>EVERY SINGLE EXAMPLE ABOVE WORKS IN ALL MODERN BROWSERS: SAFARI, CHROME, FIREFOX, OPERA, AND IE. INTERNET EXPLORER HAS PERFECT SUPPORT FOR ALL OF THESE DOWN TO VERSION 7, BUT ZERO SUPPORT IN 6. TO TEST IN YOUR BROWSER, SEE THE&NBSP;<A HREF="HTTP://CSS-TRICKS.COM/EXAMPLES/ATTRIBUTESELECTORS/" STYLE="BOX-SIZING: BORDER-BOX; COLOR: RGB(68, 114, 185); TEXT-DECORATION: NONE; BORDER-BOTTOM-WIDTH: 2PX; BORDER-BOTTOM-STYLE: SOLID; BORDER-BOTTOM-COLOR: TRANSPARENT;">TEST PAGE</A>. IF THE LINE/SELECTOR STYLE IS IN RED, IT WORKS.</P>\r\n', 'alexander', 'css', 7, 0, '2014-10-30 06:34:43', 0),
(31, 'Pseudo Class Selectors', 'imagenes/css-beforeafter-0.jpg', '<P>PSEUDO CLASS SELECTORS ARE CSS SELECTORS WITH A COLON PRECEDING THEM. YOU ARE PROBABLY VERY FAMILIAR WITH A FEW OF THEM. LIKE HOVER:</P>\n\n<PRE>\n<CODE><SPAN>A:HOVER </SPAN><SPAN>{</SPAN>\n  <SPAN>/* YEP, HOVER IS A PSEUDO CLASS */</SPAN>\n<SPAN>}</SPAN></CODE></PRE>\n\n<P>THEY ARE IMMENSELY USEFUL IN A VARIETY OF SITUATIONS. SOME OF THEM ARE CSS3, SOME CSS2... IT DEPENDS ON EACH PARTICULAR ONE. OUTSIDE OF IE, THEY HAVE GREAT BROWSER SUPPORT. IN IE LAND, EVEN IE8, SUPPORT IS PRETTY BARREN. HOWEVER, THE IE9 PREVIEW HAS<A HREF="HTTP://IE.MICROSOFT.COM/TESTDRIVE/BENCHMARKS/CSS3INFO/DEFAULT.HTML">FULL SUPPORT OF THEM</A>. THE LINK-RELATED ONES WORK BUT NOT MUCH ELSE. LET&#39;S TAKE A BRIEF LOOK AT EACH ONE OF THEM. DON&#39;T WORRY, THERE ISN&#39;T THAT MANY.</P>\n\n<P>&NBSP;</P>\n\n<H3>LINK-RELATED PSEUDO CLASS SELECTORS</H3>\n\n<P><A HREF="HTTP://CSS-TRICKS.COM/ALMANAC/SELECTORS/L/LINK/">:LINK</A>&NBSP;- PERHAPS THE MOST CONFUSION-CAUSING LINK-RELATED PSEUDO SELECTOR. AREN&#39;T ALL&NBSP;<CODE>&LT;A&GT;</CODE>LINKS? WELL NOT IF THEY DON&#39;T HAVE AN HREF ATTRIBUTE. THIS SELECTS ONLY THOSE THAT DO, THUS IS ESSENTIALLY THE SAME AS A[HREF]. THIS SELECTOR WILL BECOME A LOT MORE USEFUL SHOULD<A HREF="HTTP://MEYERWEB.COM/ERIC/THOUGHTS/2008/07/23/ANY-ELEMENT-LINKING-DEMO/">ANY-ELEMENT LINKING</A>&NBSP;BECOME REALITY.</P>\n\n<P><A HREF="HTTP://CSS-TRICKS.COM/ALMANAC/SELECTORS/V/VISITED/">:VISITED</A>&NBSP;- SELECTS LINKS THAT HAVE ALREADY BEEN VISITED BY THE CURRENT BROWSER.</P>\n\n<P><A HREF="HTTP://CSS-TRICKS.COM/ALMANAC/SELECTORS/H/HOVER/">:HOVER</A>&NBSP;- WHEN THE MOUSE CURSOR ROLLS OVER A LINK, THAT LINK IS IN IT&#39;S HOVER STATE AND THIS WILL SELECT IT.</P>\n\n<P><A HREF="HTTP://CSS-TRICKS.COM/ALMANAC/SELECTORS/A/ACTIVE/">:ACTIVE</A>&NBSP;- SELECTS THE LINK WHILE IT IS BEING ACTIVATED (BEING CLICKED ON OR OTHERWISE ACTIVATED). FOR EXAMPLE, FOR THE &QUOT;PRESSED&QUOT; STATE OF A BUTTON-STYLE LINK OR TO&NBSP;<A HREF="HTTP://CSS-TRICKS.COM/ONE-PIXEL-SHIFT-BUTTONS/">MAKE ALL LINKS FEEL MORE BUTTON-LIKE</A>.</P>\n\n<P>THERE IS A FUN TECHNIQUE TO REMEMBER ALL THE LINK PSEDUO CLASS SELECTORS. LOOK AT THE FIRST LETTER OF EACH: LVHA ...&NBSP;<A HREF="HTTP://CSS-TRICKS.COM/REMEMBER-SELECTORS-WITH-LOVE-AND-HATE/"><STRONG>L</STRONG>O<STRONG>V</STRONG>E&NBSP;<STRONG>H</STRONG><STRONG>A</STRONG>TE</A>.</P>\n\n<H3>INPUT &AMP; LINK RELATED PSEUDO CLASS SELECTORS</H3>\n\n<P><A HREF="HTTP://CSS-TRICKS.COM/ALMANAC/SELECTORS/F/FOCUS/">:FOCUS</A>&NBSP;- DEFINING HOVER STYLES FOR LINKS IS GREAT, BUT IT DOESN&#39;T HELP OUT THOSE WHO USED KEYBOARD NAVIGATION TO GET TO THE LINK. :FOCUS WILL SELECT LINKS THAT ARE THE CURRENT FOCUS OF THE KEYBOARD. THIS IS NOT LIMITED TO LINKS, BUT CAN BE USED (AND REALLY SHOULD BE USED) ON INPUTS AND TEXTAREAS AS WELL.&NBSP;<A HREF="HTTP://ANTONPECK.COM/JOURNAL/ARTICLE/FOCUS_ON_THE_HOVER/">SOME WOULD TELL YOU</A>&NBSP;TO DEFINE A :FOCUS STYLE FOR ANYTHING THAT HAS A :HOVER STYLE.</P>\n\n<P><IMG ALT="FORM WITH A TEXT INPUT IN FOCUS. YELLOW BACKGROUND IS A FOCUS STYLE." SRC="../imagenes/FORMWITHFOCUS.PNG"/><BR />\nFORM WITH A TEXT INPUT IN FOCUS. YELLOW BACKGROUND IS A FOCUS STYLE.</P>\n\n<P><A HREF="HTTP://CSS-TRICKS.COM/ALMANAC/SELECTORS/T/TARGET/">:TARGET</A>&NBSP;- THE TARGET PSEUDO CLASS IS USED IN CONJUNCTION WITH IDS, AND MATCH WHEN THE HASH TAG IN THE CURRENT URL MATCHES THAT ID. SO IF YOU ARE AT URL WWW.YOURSITE.COM/#HOME THEN THE SELECTOR&NBSP;<TT>#HOME:TARGET</TT>&NBSP;WILL MATCH. THAT CAN BE EXTREMELY POWERFUL. FOR EXAMPLE, YOU CAN CREATE A&NBSP;<A HREF="HTTP://CSS-TRICKS.COM/CSS3-TABS/">TABBED AREA</A>&NBSP;WHERE THE TABS LINK TO HASH TAGS AND THEN THE PANELS &QUOT;ACTIVATE&QUOT; BY MATCHING :TARGET SELECTORS AND (FOR EXAMPLE) USING Z-INDEX TO MOVE TO THE TOP.</P>\n\n<P><A HREF="HTTP://CSS-TRICKS.COM/ALMANAC/SELECTORS/E/ENABLED/">:ENABLED</A>&NBSP;- SELECTS INPUTS THAT ARE IN THE DEFAULT STATE OF ENABLED AND READY TO BE USED.</P>\n\n<P><A HREF="HTTP://CSS-TRICKS.COM/ALMANAC/SELECTORS/D/DISABLED/">:DISABLED</A>&NBSP;- SELECTS INPUTS THAT HAVE THE&NBSP;<TT>DISABLED</TT>&NBSP;ATTRIBUTE. A LOT OF BROWSERS WILL MAKE THE INPUT A FADED OUT GRAY, YOU CAN CONTROL THAT WITH THIS SELECTOR.</P>\n\n<P><IMG ALT="" SRC="../imagenes/DISABLEDELEMENTS.PNG"/>FORM USING THE :DISABLED ATTRIBUTE.</P>\n\n<P><A HREF="HTTP://CSS-TRICKS.COM/ALMANAC/SELECTORS/C/CHECKED/">:CHECKED</A>&NBSP;- SELECTS CHECKBOXES THAT ARE, WAIT FOR IT, CHECKED.</P>\n\n<P><STRONG>:INDETERMINATE</STRONG>&NBSP;- SELECTS RADIO BUTTONS THAT ARE IN THE PURGATORY STATE OF NEITHER CHOSEN OR UNCHOSEN (LIKE WHEN A PAGE LOADS WITH RADIO BUTTON CHOICES BUT NO DEFAULT IS SET).</P>\n\n<P><IMG ALT="" SRC="../imagenes/RADIOPURGATORY.PNG"/><BR />\nSET OF RADIO BUTTONS IN PURGATORY. OR MORE ACCURATELY, IN THEIR :INDETERMINATE STATUS.</P>\n\n<H3>POSITION/NUMBER-BASED PSEUDO CLASS SELECTORS</H3>\n\n<P><A HREF="HTTP://CSS-TRICKS.COM/ALMANAC/SELECTORS/R/ROOT/">:ROOT</A>&NBSP;- SELECTS THE ELEMENT THAT IS AT THE ROOT OF THE DOCUMENT. ALMOST CERTAINLY WILL SELECT THE&NBSP;<CODE>&LT;HTML&GT;</CODE>&NBSP;ELEMENT, UNLESS YOU ARE SPECIFICALLY WORKING IN SOME WEIRD ENVIRONMENT THAT SOMEHOW ALSO ALLOWS CSS. PERHAPS XML.</P>\n\n<P><A HREF="HTTP://CSS-TRICKS.COM/ALMANAC/SELECTORS/F/FIRST-CHILD/">:FIRST-CHILD</A>&NBSP;- SELECTS THE FIRST ELEMENT WITHIN A PARENT.</P>\n\n<P><A HREF="HTTP://CSS-TRICKS.COM/ALMANAC/SELECTORS/L/LAST-CHILD/">:LAST-CHILD</A>&NBSP;- SELECTS THE LAST ELEMENT WITHIN A PARENT.</P>\n\n<P><A HREF="HTTP://CSS-TRICKS.COM/ALMANAC/SELECTORS/N/NTH-CHILD/">:NTH-CHILD(N)</A>&NBSP;- SELECTS ELEMENTS BASED ON A SIMPLE PROVIDED ALGEBRAIC EXPRESSION (E.G. &QUOT;2N&QUOT; OR &QUOT;4N-1&QUOT;). HAS THE ABILITY TO DO THINGS LIKE SELECT EVEN/ODD ELEMENTS, &QUOT;EVERY THIRD&QUOT;, &QUOT;THE FIRST FIVE&QUOT;, AND THINGS LIKE THAT. COVERED IN&NBSP;<A HREF="HTTP://CSS-TRICKS.COM/HOW-NTH-CHILD-WORKS/">MORE DETAIL HERE</A>&NBSP;WITH A&NBSP;<A HREF="HTTP://CSS-TRICKS.COM/EXAMPLES/NTH-CHILD-TESTER/">TESTER TOOL</A>.</P>\n\n<P><A HREF="HTTP://CSS-TRICKS.COM/ALMANAC/SELECTORS/N/NTH-OF-TYPE/">:NTH-OF-TYPE(N)</A>&NBSP;- WORKS LIKE :NTH-CHILD, BUT USED IN PLACES WHERE THE ELEMENTS AT THE SAME LEVEL ARE OF DIFFERENT TYPES. LIKE IF INSIDE A DIV YOU HAD A NUMBER OF PARAGRAPHS AND A NUMBER OF IMAGES. YOU WANTED TO SELECT ALL THE ODD IMAGES. :NTH-CHILD WON&#39;T WORK THERE, YOU&#39;D USE&NBSP;<TT>DIV IMG:NTH-OF-TYPE(ODD)</TT>. PARTICULARLY USEFUL WHEN WORKING WITH DEFINITION LISTS AND THEIR ALTERNATING &LT;DT&GT; AND &LT;DD&GT; ELEMENTS.</P>\n\n<P><A HREF="HTTP://CSS-TRICKS.COM/ALMANAC/SELECTORS/F/FIRST-OF-TYPE/">:FIRST-OF-TYPE</A>&NBSP;- SELECTS THE FIRST ELEMENT OF THIS TYPE WITHIN ANY PARENT. SO IF YOU HAVE TWO DIVS, EACH HAD WITHIN IT A PARAGRAPH, IMAGE, PARAGRAPH, IMAGE. THEN&NBSP;<TT>DIV IMG:FIRST-OF-TYPE</TT>&NBSP;WOULD SELECT THE FIRST IMAGE INSIDE THE FIRST DIV AND THE FIRST IMAGE INSIDE THE SECOND DIV.</P>\n\n<P><A HREF="HTTP://CSS-TRICKS.COM/ALMANAC/SELECTORS/L/LAST-OF-TYPE/">:LAST-OF-TYPE</A>&NBSP;- SAME AS ABOVE, ONLY WOULD SELECT THE LAST IMAGE INSIDE THE FIRST DIV AND THE LAST IMAGE INSIDE THE SECOND DIV.</P>\n\n<P><STRONG>:NTH-LAST-OF-TYPE(N)</STRONG>&NBSP;- WORKS LIKE :NTH-OF-TYPE, BUT IT COUNTS UP FROM THE BOTTOM INSTEAD OF THE TOP.</P>\n\n<P><STRONG>:NTH-LAST-CHILD(N)</STRONG>&NBSP;- WORKS LIKE :NTH-CHILD, BUT IT COUNTS UP FROM THE BOTTOM INSTEAD OF THE TOP.</P>\n\n<P><A HREF="HTTP://CSS-TRICKS.COM/ALMANAC/SELECTORS/O/ONLY-OF-TYPE/">:ONLY-OF-TYPE</A>&NBSP;- SELECTS ONLY IF THE ELEMENT IS THE ONLY ONE OF ITS KIND WITHIN THE CURRENT PARENT.</P>\n\n<P><IMG ALT="" SRC="../imagenes/RELATIONALPSEUDOS2.PNG" />POSITION/NUMBER-BASED PSEUDO CLASS SELECTORS</P>\n\n<H3>RELATIONAL PSEUDO CLASS SELECTORS</H3>\n\n<P><A HREF="HTTP://CSS-TRICKS.COM/ALMANAC/SELECTORS/N/NOT/">:NOT(S)</A>&NBSP;- REMOVES ELEMENTS FROM AN EXISTING MATCHED SET THAT MATCH THE SELECTOR INSIDE THE PARAMETER OF :NOT(). SO FOR EXAMPLE, ALL DIVS&NBSP;<EM>EXCEPT</EM>&NBSP;THOSE WITH A CLASS OF &QUOT;MUSIC&QUOT; =&NBSP;<TT>DIV:NOT(.MUSIC)</TT>. THE SPEC SAYS THAT :NOT SELECTORS CANNOT BE NESTED, BUT THEY CAN BE CHAINED. SOME BROWSERS (FIREFOX) ALSO SUPPORT COMMA-SEPARATED SELECTORS AS THE SELECTOR PARAMETER, ALTHOUGH CHAINING THEM WOULD BE A FAR SAFTER BET. ALSO USEFUL IN CONJUNCTION WITH ATTRIBUTE SELECTORS, E.G.&NBSP;<TT>INPUT:NOT([DISABLED])</TT>.</P>\n\n<P><A HREF="HTTP://CSS-TRICKS.COM/ALMANAC/SELECTORS/E/EMPTY/">:EMPTY</A>&NBSP;- SELECTS ELEMENTS WHICH CONTAIN NO TEXT AND NO CHILD ELEMENTS. E.G.&NBSP;<TT>&LT;P&GT;&LT;/P&GT;</TT></P>\n\n<H3>TEXT-RELATED PSEUDO CLASS SELECTORS / ELEMENTS</H3>\n\n<P><A HREF="HTTP://CSS-TRICKS.COM/ALMANAC/SELECTORS/F/FIRST-LETTER/">::FIRST-LETTER</A>&NBSP;- SELECTS THE FIRST LETTER OF THE TEXT IN THE ELEMENT. TYPICAL USE: DROPCAPS.</P>\n\n<P><A HREF="HTTP://CSS-TRICKS.COM/ALMANAC/SELECTORS/F/FIRST-LINE/">::FIRST-LINE</A>&NBSP;- SELECTS THE FIRST LINE OF TEXT IN THE ELEMENT. TYPICAL USE: SETTING THE FIRST SENTENCE IN SMALL-CAPS AS A TYPOGRAPHICAL EYE-CATCHER / LEAD-IN.</P>\n\n<P><A HREF="HTTP://CSS-TRICKS.COM/ALMANAC/SELECTORS/L/LANG/">:LANG</A>&NBSP;- THIS PSEUDO SELECTOR IS IN THE CSS3 SPEC BUT ONLY IMPLEMENTED IN IE 8+. WILL MATCH ANYTHING THAT EITHER HAS OR IS A DESCENDANT OF AN ELEMENT WITH A MATCHING LANG ATTRIBUTE. FOR EXAMPLE, :LANG(FR) WILL MATCH ANY PARAGRAPH, EVEN WITHOUT A LANG ATTRIBUTE, IF THE PARENT BODY HAD LANG=&QUOT;FR&QUOT; AS AN ATTRIBUTE.</P>\n\n<H4>QUICK NOTE</H4>\n\n<P>YOU CAN CHAIN PSEDUO SELECTORS JUST LIKE YOU CAN&NBSP;<A HREF="HTTP://CSS-TRICKS.COM/MULTIPLE-CLASS-ID-SELECTORS/">CHAIN CLASS AND ID SELECTORS</A>. THIS IS PARTICULARLY USEFUL HERE WHILE WE ARE LOOKING AT :FIRST-LETTER AND :FIRST-LINE. YOU PROBABLY WOULDN&#39;T WANT TO DROP CAP EVERY SINGLE PARAGRAPH ON THE PAGE, BUT JUST THE FIRST ONE, SO,&NBSP;<TT>P:FIRST-CHILD:FIRST-LETTER { }</TT></P>\n\n<P><IMG ALT="" SRC="../imagenes/DROPCAP.PNG" /><BR />\nDROPCAP USING :FIRST-LETTER, WHICH ENLARGES THE FONT SIZE AND FLOATS TO THE LEFT.</P>\n\n<H3>CONTENT-RELATED PSEUDO &QUOT;ELEMENTS&QUOT;</H3>\n\n<P><A HREF="HTTP://CSS-TRICKS.COM/ALMANAC/SELECTORS/A/AFTER-AND-BEFORE/">::BEFORE</A>&NBSP;- IS ABLE TO ADD CONTENT BEFORE A CERTAIN ELEMENT. FOR EXAMPLE, ADDING AN OPENING QUOTE BEFORE A BLOCKQUOTE OR PERHAPS AN PRECEDING IMAGE TO SET APART A PARTICULAR PARAGRAPH.</P>\n\n<P><A HREF="HTTP://CSS-TRICKS.COM/ALMANAC/SELECTORS/A/AFTER-AND-BEFORE/">::AFTER</A>&NBSP;- IS ABLE TO ADD CONTENT AFTER A CERTAIN ELEMENT. FOR EXAMPLE, A CLOSING QUOTE TO A BLOCKQUOTE. ALSO USED COMMONLY FOR THE&NBSP;<A HREF="HTTP://CSS-TRICKS.COM/SNIPPETS/CSS/CLEAR-FIX/">CLEARFIX</A>, WHERE AN EMPTY SPACE IS ADDED AFTER THE ELEMENT WHICH CLEARS THE FLOAT WITHOUT ANY NEED FOR EXTRA HTML MARKUP.</P>\n\n<H4>PSEUDO ELEMENTS VS PSEUDO SELECTORS</H4>\n\n<P>THESE ARE APPROPRIATELY CALLED PSEUDO &QUOT;ELEMENTS&QUOT; (NOT SELECTORS) BECAUSE THEY DON&#39;T SELECT ANY &QUOT;REAL&QUOT; ELEMENT THAT EXISTS ON THE PAGE. THIS GOES FOR THESE TWO, AS WELL AS THE PREVIOUS SECTIONS :FIRST-LETTER AND :FIRST-LINE. MAKE SENSE? LIKE THE FIRST LETTER THAT ::FIRST-LETTER SELECTS ISN&#39;T AN ELEMENT ALL TO ITSELF, IT&#39;S JUST A PART OF AN EXISTING ELEMENT, HENCE, PSEUDO ELEMENT.</P>\n\n<P>THE DOUBLE COLONS (::) MAKE THIS DISTINCTION.</P>\n\n<H3>TAG QUALIFICATION</H3>\n\n<P>THESE SELECTORS CAN BE TAG-QUALIFIED, MEANING THEY WILL ONLY APPLY IF&NBSP;<EM>BOTH</EM>&NBSP;THE ELEMENT (TAG) AND SELECTOR MATCH. FOR INSTANCE:</P>\n\n<PRE>\n<CODE><SPAN>P:FIRST-CHILD </SPAN><SPAN>{</SPAN>\n  <SPAN>COLOR</SPAN><SPAN>:</SPAN> RED<SPAN>;</SPAN>\n<SPAN>}</SPAN></CODE></PRE>\n\n<P>THAT WILL ONLY MATCH IF THE FIRST CHILD OF ANOTHER ELEMENT IS A `</P>\n\n<P>`. IF IT&#39;S NOT, IT WON&#39;T MATCH.</P>\n\n<H3>DEPRECATED</H3>\n\n<P><STRONG>:CONTAINS()</STRONG>&NBSP;- AS FAR AS I KNOW, THIS IS GONE. THE CURRENT CSS3 SPEC HAS REMOVED IT. I DON&#39;T KNOW THE STORY, LET ME KNOW IF YOU DO. AT A GLANCE, IT LOOKS RIDICULOUSLY USEFUL (BEING ABLE TO SELECT OBJECTS BASED ON THE TEXTUAL CONTENT THEY CONTAIN). IT MAY BE BECAUSE OF PROBLEMS, OR HAVING CONTENT IN SELECTORS BEING UNDESIRABLE. MY PREFERENCE WOULD BE TO HAVE IT SELECT BY ELEMENTS RATHER THAN TEXT, LIKE P:CONTAINS(IMG), BUT ALAS, NO SUCH LUCK.</P>\n\n<P><STRONG>::SELECTION</STRONG>&NBSP;- ALLOWS THE CHANGING OF STYLE OF SELECTED TEXT. IT WAS DRAFTED FOR CSS SELECTORS LEVEL 3 BUT REMOVED BEFORE IT REACHED THE RECOMMENDATION STATUS. DESPITE THIS, IT&#39;S IMPLEMENTED IN SOME BROWSERS, WHICH WILL PROBABLY RETAIN EXPERIMENTAL SUPPORT FOR IT. FOR FIREFOX, YOU CAN USE ::-MOZ-SELECTION.&NBSP;<A HREF="HTTP://CSS-TRICKS.COM/OVERRIDING-THE-DEFAULT-TEXT-SELECTION-COLOR-WITH-CSS/">MORE INFORMATION HERE</A>.</P>\n\n<P><STRONG>:REQUIRED / :OPTIONAL / :READ-ONLY / :READ-WRITE</STRONG>&NBSP;- JUST USE ATTRIBUTE SELECTORS INSTEAD.</P>\n\n<H3>JQUERY USAGE</H3>\n\n<P>JQUERY CAN USE ALL OF THESE IN ITS SELECTORS, WHICH IS AWESOME. EVEN&NBSP;<EM>AWESOMER</EM>, JQUERY HAS ADDITIONAL PSEUDO CLASS SELECTORS AVAILABLE.</P>\n\n<P><STRONG>:FIRST</STRONG>&NBSP;- MATCHES THE FIRST INSTANCE OF THE&NBSP;<EM>ALREADY MATCHED</EM>&NBSP;SET. THIS IS DIFFERENT THAN :NTH-CHILD(1) WHICH WILL ONLY SELECT IF THE SELECTOR MATCHES&NBSP;<EM>AND</EM>&NBSP;IT&#39;S THE FIRST CHILD. WITH :FIRST, THE SELECTOR MATCHES, THEN IT TAKES THE FIRST ONE IT FINDS REGARDLESS OF CHILD POSITION.</P>\n\n<P><STRONG>:EQ(X)</STRONG>&NBSP;-&NBSP;<DEL>JQUERY DOESN&#39;T SUPPORT :NTH-OF-TYPE AS A PART OF IT&#39;S SELECTOR ENGINE, BUT THIS IS VERY SIMILAR.</DEL><INS>IT&NBSP;<A HREF="HTTP://CODEPEN.IO/CHRISCOYIER/PEN/WFGED">DOES NOW</A>.</INS>&NBSP;THIS SELECTS THE XTH ELEMENT FROM THE ALREADY-MATCHED SET. IT&#39;S ALSO ZERO-INDEXED (0 IS THE FIRST ELEMENT) UNLIKE :NTH-CHILD IN WHICH THE FIRST ELEMENT IS 1.</P>\n\n<P>THE ABOVE TWO CONCEPTS ARE KINDA WEIRD.&NBSP;<A HREF="HTTP://JSFIDDLE.NET/CHRISCOYIER/PDRAG/5/">HERE&#39;S A DEMO.</A></P>\n\n<P><STRONG>:CONTAINS(&#39;TEXT&#39;)</STRONG>&NBSP;- THIS IS REMOVED FROM CSS, BUT STILL WORKS IN JQUERY.</P>\n\n<P><STRONG>:LT(X)</STRONG>&NBSP;- THE SAME AS :NTH-CHILD(-N+X), AS IN IT SELECTS THE &QUOT;FIRST X ELEMENTS&QUOT;</P>\n\n<P><STRONG>:GT(X)&NBSP;</STRONG>- THE SAME AS :NTH-CHILD(N+X), AS IN IT SELECTS EVERYTHING EXCEPT THE &QUOT;FIRST (X-1) ELEMENTS&QUOT;</P>\n\n<P><STRONG>:EVEN</STRONG>&NBSP;- THE SAME AS :NTH-CHILD(EVEN) OR :NTH-CHILD(2N)</P>\n\n<P><STRONG>:ODD</STRONG>&NBSP;- THE SAME AS :NTH-CHILD(ODD) OR :NTH-CHILD(2N+1)</P>\n\n<P><STRONG>:HAS(S)</STRONG>&NBSP;- WORKS LIKE I WISH CSS :CONTAIN DID, WHERE IT TESTS IF THE ELEMENT HAS A DESCENDANT OF A CERTAIN SELECTOR BEFORE MATCHING.</P>\n\n<P>THERE ARE ACTUALLY A WHOLE BUNCH MORE, AND ALL OF THEM ARE CLEVER AND USEFUL (OR AT LEAST AN IMPROVEMENT ON READABILITY) SEE THE&NBSP;<A HREF="HTTP://API.JQUERY.COM/CATEGORY/SELECTORS/">SELECTOR DOCUMENTATION</A>&NBSP;FOR MORE.</P>\n\n<P>NOTE: JQUERY CAN&#39;T REALLY HELP YOU WITH PSEUDO&NBSP;<EM>ELEMENTS</EM>&NBSP;LIKE :BEFORE AND :AFTER, BUT YOU CAN&NBSP;<A HREF="HTTP://JSFIDDLE.NET/CHRISCOYIER/GTLWN/4/">ACCESS THEIR VALUES IN SOME BROWSERS</A>. E.G IF A DIV HAD SOME :BEFORE GENERATED CONTENT, YOU COULD GET THE VALUE LIKE:</P>\n\n<PRE>\n<CODE><SPAN>VAR</SPAN> CONTENT <SPAN>=</SPAN> WINDOW\n    <SPAN>.</SPAN>GETCOMPUTEDSTYLE<SPAN>(</SPAN>$<SPAN>(</SPAN><SPAN>&#39;DIV&#39;</SPAN><SPAN>)</SPAN><SPAN>[</SPAN><SPAN>0</SPAN><SPAN>]</SPAN><SPAN>,</SPAN> <SPAN>&#39;:BEFORE&#39;</SPAN><SPAN>)</SPAN>\n    <SPAN>.</SPAN>GETPROPERTYCSSVALUE<SPAN>(</SPAN><SPAN>&#39;CONTENT&#39;</SPAN><SPAN>)</SPAN>\n    <SPAN>.</SPAN>CSSTEXT<SPAN>;</SPAN></CODE></PRE>\n\n<H3>SPECIFICITY</H3>\n\n<P>CLASS SELECTORS AND PSEUDO CLASS SELECTORS HAVE THE SAME SPECIFICITY WEIGHT:</P>\n\n<PRE>\n<CODE><SPAN>LI            </SPAN><SPAN>{</SPAN><SPAN>}</SPAN>  <SPAN>/* SPECIFICITY = 0,0,0,1 */</SPAN>\n<SPAN>LI:FIRST-LINE </SPAN><SPAN>{</SPAN><SPAN>}</SPAN>  <SPAN >/* SPECIFICITY = 0,0,1,1 */</SPAN>\n<SPAN>{</SPAN><SPAN>}</SPAN>        <SPAN>/* SPECIFICITY = 0,0,1,1 */</SPAN></CODE></PRE>\n\n<P>TYPICALLY THEY ARE USED IN CONJUNCTION OR LISTED AFTERWARDS IN CSS ANYWAY, SO HOPEFULLY IT WON&#39;T CAUSE TOO MANY PROBLEMS...</P>\n\n<P>UL LI.FRIEND { MARGIN: 0 0 5PX 0; }<BR />\nUL LI:LAST-CHILD { MARGIN: 0; }</P>\n\n<P>IN THAT CASE THE ZEROING OUT OF THE MARGIN WOULD WORK (ASSUMING IT MATCHED THE SAME ELEMENT), BUT ONLY BECAUSE THE ZEROING OUT IS LISTED SECOND (THEY HAVE THE SAME SPECIFICITY). SO... WATCH FOR THAT.</P>\n', 'alexander', 'css', 61, 0, '2014-10-28 23:27:52', 0);

-- --------------------------------------------------------

--
-- Estructura de tabla para la tabla `servicios`
--

CREATE TABLE `servicios` (
  `id` int(11) NOT NULL,
  `servicio` text COLLATE utf8_spanish_ci NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_spanish_ci;

-- --------------------------------------------------------

--
-- Estructura de tabla para la tabla `shout_box`
--

CREATE TABLE `shout_box` (
  `id` int(11) NOT NULL,
  `foto` varchar(255) NOT NULL,
  `user` varchar(60) NOT NULL,
  `message` varchar(255) NOT NULL,
  `date_time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `ip_address` varchar(40) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Índices para tablas volcadas
--

--
-- Indices de la tabla `acerca`
--
ALTER TABLE `acerca`
  ADD PRIMARY KEY (`id_acerca`);

--
-- Indices de la tabla `baner`
--
ALTER TABLE `baner`
  ADD PRIMARY KEY (`id_baner`);

--
-- Indices de la tabla `categoria`
--
ALTER TABLE `categoria`
  ADD PRIMARY KEY (`id`);

--
-- Indices de la tabla `comentario`
--
ALTER TABLE `comentario`
  ADD PRIMARY KEY (`id`);

--
-- Indices de la tabla `links`
--
ALTER TABLE `links`
  ADD PRIMARY KEY (`id`);

--
-- Indices de la tabla `noticias`
--
ALTER TABLE `noticias`
  ADD PRIMARY KEY (`id`);

--
-- Indices de la tabla `servicios`
--
ALTER TABLE `servicios`
  ADD PRIMARY KEY (`id`);

--
-- Indices de la tabla `shout_box`
--
ALTER TABLE `shout_box`
  ADD PRIMARY KEY (`id`);

--
-- AUTO_INCREMENT de las tablas volcadas
--

--
-- AUTO_INCREMENT de la tabla `baner`
--
ALTER TABLE `baner`
  MODIFY `id_baner` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=173;
--
-- AUTO_INCREMENT de la tabla `categoria`
--
ALTER TABLE `categoria`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=19;
--
-- AUTO_INCREMENT de la tabla `comentario`
--
ALTER TABLE `comentario`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=12;
--
-- AUTO_INCREMENT de la tabla `links`
--
ALTER TABLE `links`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=10;
--
-- AUTO_INCREMENT de la tabla `noticias`
--
ALTER TABLE `noticias`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=32;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
